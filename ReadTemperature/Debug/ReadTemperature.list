
ReadTemperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007370  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08007430  08007430  00017430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007514  08007514  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08007514  08007514  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007514  08007514  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007514  08007514  00017514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007518  08007518  00017518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800751c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  2000005c  08007578  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08007578  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010bbb  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000241c  00000000  00000000  00030c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  000330a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c62  00000000  00000000  00034040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a46b  00000000  00000000  00034ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013cda  00000000  00000000  0004f10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099e17  00000000  00000000  00062de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004000  00000000  00000000  000fcc00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00100c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007418 	.word	0x08007418

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08007418 	.word	0x08007418

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_cfrcmple>:
 8000258:	4684      	mov	ip, r0
 800025a:	0008      	movs	r0, r1
 800025c:	4661      	mov	r1, ip
 800025e:	e7ff      	b.n	8000260 <__aeabi_cfcmpeq>

08000260 <__aeabi_cfcmpeq>:
 8000260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000262:	f000 f8b7 	bl	80003d4 <__lesf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	d401      	bmi.n	800026e <__aeabi_cfcmpeq+0xe>
 800026a:	2100      	movs	r1, #0
 800026c:	42c8      	cmn	r0, r1
 800026e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000270 <__aeabi_fcmpeq>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f000 f843 	bl	80002fc <__eqsf2>
 8000276:	4240      	negs	r0, r0
 8000278:	3001      	adds	r0, #1
 800027a:	bd10      	pop	{r4, pc}

0800027c <__aeabi_fcmplt>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 f8a9 	bl	80003d4 <__lesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	db01      	blt.n	800028a <__aeabi_fcmplt+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_fcmple>:
 8000290:	b510      	push	{r4, lr}
 8000292:	f000 f89f 	bl	80003d4 <__lesf2>
 8000296:	2800      	cmp	r0, #0
 8000298:	dd01      	ble.n	800029e <__aeabi_fcmple+0xe>
 800029a:	2000      	movs	r0, #0
 800029c:	bd10      	pop	{r4, pc}
 800029e:	2001      	movs	r0, #1
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__aeabi_fcmpgt>:
 80002a4:	b510      	push	{r4, lr}
 80002a6:	f000 f84f 	bl	8000348 <__gesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	dc01      	bgt.n	80002b2 <__aeabi_fcmpgt+0xe>
 80002ae:	2000      	movs	r0, #0
 80002b0:	bd10      	pop	{r4, pc}
 80002b2:	2001      	movs	r0, #1
 80002b4:	bd10      	pop	{r4, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)

080002b8 <__aeabi_fcmpge>:
 80002b8:	b510      	push	{r4, lr}
 80002ba:	f000 f845 	bl	8000348 <__gesf2>
 80002be:	2800      	cmp	r0, #0
 80002c0:	da01      	bge.n	80002c6 <__aeabi_fcmpge+0xe>
 80002c2:	2000      	movs	r0, #0
 80002c4:	bd10      	pop	{r4, pc}
 80002c6:	2001      	movs	r0, #1
 80002c8:	bd10      	pop	{r4, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__aeabi_f2uiz>:
 80002cc:	219e      	movs	r1, #158	; 0x9e
 80002ce:	b510      	push	{r4, lr}
 80002d0:	05c9      	lsls	r1, r1, #23
 80002d2:	1c04      	adds	r4, r0, #0
 80002d4:	f7ff fff0 	bl	80002b8 <__aeabi_fcmpge>
 80002d8:	2800      	cmp	r0, #0
 80002da:	d103      	bne.n	80002e4 <__aeabi_f2uiz+0x18>
 80002dc:	1c20      	adds	r0, r4, #0
 80002de:	f000 fbab 	bl	8000a38 <__aeabi_f2iz>
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	219e      	movs	r1, #158	; 0x9e
 80002e6:	1c20      	adds	r0, r4, #0
 80002e8:	05c9      	lsls	r1, r1, #23
 80002ea:	f000 fa05 	bl	80006f8 <__aeabi_fsub>
 80002ee:	f000 fba3 	bl	8000a38 <__aeabi_f2iz>
 80002f2:	2380      	movs	r3, #128	; 0x80
 80002f4:	061b      	lsls	r3, r3, #24
 80002f6:	469c      	mov	ip, r3
 80002f8:	4460      	add	r0, ip
 80002fa:	e7f2      	b.n	80002e2 <__aeabi_f2uiz+0x16>

080002fc <__eqsf2>:
 80002fc:	b570      	push	{r4, r5, r6, lr}
 80002fe:	0042      	lsls	r2, r0, #1
 8000300:	0245      	lsls	r5, r0, #9
 8000302:	024e      	lsls	r6, r1, #9
 8000304:	004c      	lsls	r4, r1, #1
 8000306:	0fc3      	lsrs	r3, r0, #31
 8000308:	0a6d      	lsrs	r5, r5, #9
 800030a:	2001      	movs	r0, #1
 800030c:	0e12      	lsrs	r2, r2, #24
 800030e:	0a76      	lsrs	r6, r6, #9
 8000310:	0e24      	lsrs	r4, r4, #24
 8000312:	0fc9      	lsrs	r1, r1, #31
 8000314:	2aff      	cmp	r2, #255	; 0xff
 8000316:	d006      	beq.n	8000326 <__eqsf2+0x2a>
 8000318:	2cff      	cmp	r4, #255	; 0xff
 800031a:	d003      	beq.n	8000324 <__eqsf2+0x28>
 800031c:	42a2      	cmp	r2, r4
 800031e:	d101      	bne.n	8000324 <__eqsf2+0x28>
 8000320:	42b5      	cmp	r5, r6
 8000322:	d006      	beq.n	8000332 <__eqsf2+0x36>
 8000324:	bd70      	pop	{r4, r5, r6, pc}
 8000326:	2d00      	cmp	r5, #0
 8000328:	d1fc      	bne.n	8000324 <__eqsf2+0x28>
 800032a:	2cff      	cmp	r4, #255	; 0xff
 800032c:	d1fa      	bne.n	8000324 <__eqsf2+0x28>
 800032e:	2e00      	cmp	r6, #0
 8000330:	d1f8      	bne.n	8000324 <__eqsf2+0x28>
 8000332:	428b      	cmp	r3, r1
 8000334:	d006      	beq.n	8000344 <__eqsf2+0x48>
 8000336:	2001      	movs	r0, #1
 8000338:	2a00      	cmp	r2, #0
 800033a:	d1f3      	bne.n	8000324 <__eqsf2+0x28>
 800033c:	0028      	movs	r0, r5
 800033e:	1e43      	subs	r3, r0, #1
 8000340:	4198      	sbcs	r0, r3
 8000342:	e7ef      	b.n	8000324 <__eqsf2+0x28>
 8000344:	2000      	movs	r0, #0
 8000346:	e7ed      	b.n	8000324 <__eqsf2+0x28>

08000348 <__gesf2>:
 8000348:	b570      	push	{r4, r5, r6, lr}
 800034a:	0042      	lsls	r2, r0, #1
 800034c:	0245      	lsls	r5, r0, #9
 800034e:	024e      	lsls	r6, r1, #9
 8000350:	004c      	lsls	r4, r1, #1
 8000352:	0fc3      	lsrs	r3, r0, #31
 8000354:	0a6d      	lsrs	r5, r5, #9
 8000356:	0e12      	lsrs	r2, r2, #24
 8000358:	0a76      	lsrs	r6, r6, #9
 800035a:	0e24      	lsrs	r4, r4, #24
 800035c:	0fc8      	lsrs	r0, r1, #31
 800035e:	2aff      	cmp	r2, #255	; 0xff
 8000360:	d01b      	beq.n	800039a <__gesf2+0x52>
 8000362:	2cff      	cmp	r4, #255	; 0xff
 8000364:	d00e      	beq.n	8000384 <__gesf2+0x3c>
 8000366:	2a00      	cmp	r2, #0
 8000368:	d11b      	bne.n	80003a2 <__gesf2+0x5a>
 800036a:	2c00      	cmp	r4, #0
 800036c:	d101      	bne.n	8000372 <__gesf2+0x2a>
 800036e:	2e00      	cmp	r6, #0
 8000370:	d01c      	beq.n	80003ac <__gesf2+0x64>
 8000372:	2d00      	cmp	r5, #0
 8000374:	d00c      	beq.n	8000390 <__gesf2+0x48>
 8000376:	4283      	cmp	r3, r0
 8000378:	d01c      	beq.n	80003b4 <__gesf2+0x6c>
 800037a:	2102      	movs	r1, #2
 800037c:	1e58      	subs	r0, r3, #1
 800037e:	4008      	ands	r0, r1
 8000380:	3801      	subs	r0, #1
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	2e00      	cmp	r6, #0
 8000386:	d122      	bne.n	80003ce <__gesf2+0x86>
 8000388:	2a00      	cmp	r2, #0
 800038a:	d1f4      	bne.n	8000376 <__gesf2+0x2e>
 800038c:	2d00      	cmp	r5, #0
 800038e:	d1f2      	bne.n	8000376 <__gesf2+0x2e>
 8000390:	2800      	cmp	r0, #0
 8000392:	d1f6      	bne.n	8000382 <__gesf2+0x3a>
 8000394:	2001      	movs	r0, #1
 8000396:	4240      	negs	r0, r0
 8000398:	e7f3      	b.n	8000382 <__gesf2+0x3a>
 800039a:	2d00      	cmp	r5, #0
 800039c:	d117      	bne.n	80003ce <__gesf2+0x86>
 800039e:	2cff      	cmp	r4, #255	; 0xff
 80003a0:	d0f0      	beq.n	8000384 <__gesf2+0x3c>
 80003a2:	2c00      	cmp	r4, #0
 80003a4:	d1e7      	bne.n	8000376 <__gesf2+0x2e>
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d1e5      	bne.n	8000376 <__gesf2+0x2e>
 80003aa:	e7e6      	b.n	800037a <__gesf2+0x32>
 80003ac:	2000      	movs	r0, #0
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e7      	beq.n	8000382 <__gesf2+0x3a>
 80003b2:	e7e2      	b.n	800037a <__gesf2+0x32>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	dc05      	bgt.n	80003c4 <__gesf2+0x7c>
 80003b8:	dbea      	blt.n	8000390 <__gesf2+0x48>
 80003ba:	42b5      	cmp	r5, r6
 80003bc:	d802      	bhi.n	80003c4 <__gesf2+0x7c>
 80003be:	d3e7      	bcc.n	8000390 <__gesf2+0x48>
 80003c0:	2000      	movs	r0, #0
 80003c2:	e7de      	b.n	8000382 <__gesf2+0x3a>
 80003c4:	4243      	negs	r3, r0
 80003c6:	4158      	adcs	r0, r3
 80003c8:	0040      	lsls	r0, r0, #1
 80003ca:	3801      	subs	r0, #1
 80003cc:	e7d9      	b.n	8000382 <__gesf2+0x3a>
 80003ce:	2002      	movs	r0, #2
 80003d0:	4240      	negs	r0, r0
 80003d2:	e7d6      	b.n	8000382 <__gesf2+0x3a>

080003d4 <__lesf2>:
 80003d4:	b570      	push	{r4, r5, r6, lr}
 80003d6:	0042      	lsls	r2, r0, #1
 80003d8:	0245      	lsls	r5, r0, #9
 80003da:	024e      	lsls	r6, r1, #9
 80003dc:	004c      	lsls	r4, r1, #1
 80003de:	0fc3      	lsrs	r3, r0, #31
 80003e0:	0a6d      	lsrs	r5, r5, #9
 80003e2:	0e12      	lsrs	r2, r2, #24
 80003e4:	0a76      	lsrs	r6, r6, #9
 80003e6:	0e24      	lsrs	r4, r4, #24
 80003e8:	0fc8      	lsrs	r0, r1, #31
 80003ea:	2aff      	cmp	r2, #255	; 0xff
 80003ec:	d00b      	beq.n	8000406 <__lesf2+0x32>
 80003ee:	2cff      	cmp	r4, #255	; 0xff
 80003f0:	d00d      	beq.n	800040e <__lesf2+0x3a>
 80003f2:	2a00      	cmp	r2, #0
 80003f4:	d11f      	bne.n	8000436 <__lesf2+0x62>
 80003f6:	2c00      	cmp	r4, #0
 80003f8:	d116      	bne.n	8000428 <__lesf2+0x54>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d114      	bne.n	8000428 <__lesf2+0x54>
 80003fe:	2000      	movs	r0, #0
 8000400:	2d00      	cmp	r5, #0
 8000402:	d010      	beq.n	8000426 <__lesf2+0x52>
 8000404:	e009      	b.n	800041a <__lesf2+0x46>
 8000406:	2d00      	cmp	r5, #0
 8000408:	d10c      	bne.n	8000424 <__lesf2+0x50>
 800040a:	2cff      	cmp	r4, #255	; 0xff
 800040c:	d113      	bne.n	8000436 <__lesf2+0x62>
 800040e:	2e00      	cmp	r6, #0
 8000410:	d108      	bne.n	8000424 <__lesf2+0x50>
 8000412:	2a00      	cmp	r2, #0
 8000414:	d008      	beq.n	8000428 <__lesf2+0x54>
 8000416:	4283      	cmp	r3, r0
 8000418:	d012      	beq.n	8000440 <__lesf2+0x6c>
 800041a:	2102      	movs	r1, #2
 800041c:	1e58      	subs	r0, r3, #1
 800041e:	4008      	ands	r0, r1
 8000420:	3801      	subs	r0, #1
 8000422:	e000      	b.n	8000426 <__lesf2+0x52>
 8000424:	2002      	movs	r0, #2
 8000426:	bd70      	pop	{r4, r5, r6, pc}
 8000428:	2d00      	cmp	r5, #0
 800042a:	d1f4      	bne.n	8000416 <__lesf2+0x42>
 800042c:	2800      	cmp	r0, #0
 800042e:	d1fa      	bne.n	8000426 <__lesf2+0x52>
 8000430:	2001      	movs	r0, #1
 8000432:	4240      	negs	r0, r0
 8000434:	e7f7      	b.n	8000426 <__lesf2+0x52>
 8000436:	2c00      	cmp	r4, #0
 8000438:	d1ed      	bne.n	8000416 <__lesf2+0x42>
 800043a:	2e00      	cmp	r6, #0
 800043c:	d1eb      	bne.n	8000416 <__lesf2+0x42>
 800043e:	e7ec      	b.n	800041a <__lesf2+0x46>
 8000440:	42a2      	cmp	r2, r4
 8000442:	dc05      	bgt.n	8000450 <__lesf2+0x7c>
 8000444:	dbf2      	blt.n	800042c <__lesf2+0x58>
 8000446:	42b5      	cmp	r5, r6
 8000448:	d802      	bhi.n	8000450 <__lesf2+0x7c>
 800044a:	d3ef      	bcc.n	800042c <__lesf2+0x58>
 800044c:	2000      	movs	r0, #0
 800044e:	e7ea      	b.n	8000426 <__lesf2+0x52>
 8000450:	4243      	negs	r3, r0
 8000452:	4158      	adcs	r0, r3
 8000454:	0040      	lsls	r0, r0, #1
 8000456:	3801      	subs	r0, #1
 8000458:	e7e5      	b.n	8000426 <__lesf2+0x52>
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_fmul>:
 800045c:	0243      	lsls	r3, r0, #9
 800045e:	0a5b      	lsrs	r3, r3, #9
 8000460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000462:	464f      	mov	r7, r9
 8000464:	4646      	mov	r6, r8
 8000466:	4699      	mov	r9, r3
 8000468:	46d6      	mov	lr, sl
 800046a:	0fc3      	lsrs	r3, r0, #31
 800046c:	0045      	lsls	r5, r0, #1
 800046e:	4698      	mov	r8, r3
 8000470:	b5c0      	push	{r6, r7, lr}
 8000472:	464b      	mov	r3, r9
 8000474:	1c0f      	adds	r7, r1, #0
 8000476:	0e2d      	lsrs	r5, r5, #24
 8000478:	d100      	bne.n	800047c <__aeabi_fmul+0x20>
 800047a:	e0cb      	b.n	8000614 <__aeabi_fmul+0x1b8>
 800047c:	2dff      	cmp	r5, #255	; 0xff
 800047e:	d100      	bne.n	8000482 <__aeabi_fmul+0x26>
 8000480:	e0cf      	b.n	8000622 <__aeabi_fmul+0x1c6>
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	00db      	lsls	r3, r3, #3
 8000486:	04d2      	lsls	r2, r2, #19
 8000488:	431a      	orrs	r2, r3
 800048a:	2300      	movs	r3, #0
 800048c:	4691      	mov	r9, r2
 800048e:	2600      	movs	r6, #0
 8000490:	469a      	mov	sl, r3
 8000492:	3d7f      	subs	r5, #127	; 0x7f
 8000494:	027c      	lsls	r4, r7, #9
 8000496:	007b      	lsls	r3, r7, #1
 8000498:	0a64      	lsrs	r4, r4, #9
 800049a:	0e1b      	lsrs	r3, r3, #24
 800049c:	0fff      	lsrs	r7, r7, #31
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fmul+0x48>
 80004a2:	e0a9      	b.n	80005f8 <__aeabi_fmul+0x19c>
 80004a4:	2bff      	cmp	r3, #255	; 0xff
 80004a6:	d011      	beq.n	80004cc <__aeabi_fmul+0x70>
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	00e4      	lsls	r4, r4, #3
 80004ac:	04d2      	lsls	r2, r2, #19
 80004ae:	4314      	orrs	r4, r2
 80004b0:	4642      	mov	r2, r8
 80004b2:	3b7f      	subs	r3, #127	; 0x7f
 80004b4:	195b      	adds	r3, r3, r5
 80004b6:	407a      	eors	r2, r7
 80004b8:	2000      	movs	r0, #0
 80004ba:	b2d2      	uxtb	r2, r2
 80004bc:	1c5d      	adds	r5, r3, #1
 80004be:	2e0a      	cmp	r6, #10
 80004c0:	dd13      	ble.n	80004ea <__aeabi_fmul+0x8e>
 80004c2:	003a      	movs	r2, r7
 80004c4:	2e0b      	cmp	r6, #11
 80004c6:	d047      	beq.n	8000558 <__aeabi_fmul+0xfc>
 80004c8:	4647      	mov	r7, r8
 80004ca:	e03f      	b.n	800054c <__aeabi_fmul+0xf0>
 80004cc:	002b      	movs	r3, r5
 80004ce:	33ff      	adds	r3, #255	; 0xff
 80004d0:	2c00      	cmp	r4, #0
 80004d2:	d11e      	bne.n	8000512 <__aeabi_fmul+0xb6>
 80004d4:	2202      	movs	r2, #2
 80004d6:	4316      	orrs	r6, r2
 80004d8:	4642      	mov	r2, r8
 80004da:	3501      	adds	r5, #1
 80004dc:	407a      	eors	r2, r7
 80004de:	b2d2      	uxtb	r2, r2
 80004e0:	35ff      	adds	r5, #255	; 0xff
 80004e2:	2e0a      	cmp	r6, #10
 80004e4:	dd00      	ble.n	80004e8 <__aeabi_fmul+0x8c>
 80004e6:	e0e4      	b.n	80006b2 <__aeabi_fmul+0x256>
 80004e8:	2002      	movs	r0, #2
 80004ea:	2e02      	cmp	r6, #2
 80004ec:	dc1c      	bgt.n	8000528 <__aeabi_fmul+0xcc>
 80004ee:	3e01      	subs	r6, #1
 80004f0:	2e01      	cmp	r6, #1
 80004f2:	d842      	bhi.n	800057a <__aeabi_fmul+0x11e>
 80004f4:	2802      	cmp	r0, #2
 80004f6:	d03d      	beq.n	8000574 <__aeabi_fmul+0x118>
 80004f8:	2801      	cmp	r0, #1
 80004fa:	d166      	bne.n	80005ca <__aeabi_fmul+0x16e>
 80004fc:	2000      	movs	r0, #0
 80004fe:	2100      	movs	r1, #0
 8000500:	05c0      	lsls	r0, r0, #23
 8000502:	4308      	orrs	r0, r1
 8000504:	07d2      	lsls	r2, r2, #31
 8000506:	4310      	orrs	r0, r2
 8000508:	bce0      	pop	{r5, r6, r7}
 800050a:	46ba      	mov	sl, r7
 800050c:	46b1      	mov	r9, r6
 800050e:	46a8      	mov	r8, r5
 8000510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000512:	2203      	movs	r2, #3
 8000514:	4316      	orrs	r6, r2
 8000516:	4642      	mov	r2, r8
 8000518:	3501      	adds	r5, #1
 800051a:	407a      	eors	r2, r7
 800051c:	b2d2      	uxtb	r2, r2
 800051e:	35ff      	adds	r5, #255	; 0xff
 8000520:	2e0a      	cmp	r6, #10
 8000522:	dd00      	ble.n	8000526 <__aeabi_fmul+0xca>
 8000524:	e0e4      	b.n	80006f0 <__aeabi_fmul+0x294>
 8000526:	2003      	movs	r0, #3
 8000528:	2101      	movs	r1, #1
 800052a:	40b1      	lsls	r1, r6
 800052c:	26a6      	movs	r6, #166	; 0xa6
 800052e:	00f6      	lsls	r6, r6, #3
 8000530:	4231      	tst	r1, r6
 8000532:	d10a      	bne.n	800054a <__aeabi_fmul+0xee>
 8000534:	2690      	movs	r6, #144	; 0x90
 8000536:	00b6      	lsls	r6, r6, #2
 8000538:	4231      	tst	r1, r6
 800053a:	d116      	bne.n	800056a <__aeabi_fmul+0x10e>
 800053c:	3eb9      	subs	r6, #185	; 0xb9
 800053e:	3eff      	subs	r6, #255	; 0xff
 8000540:	420e      	tst	r6, r1
 8000542:	d01a      	beq.n	800057a <__aeabi_fmul+0x11e>
 8000544:	46a1      	mov	r9, r4
 8000546:	4682      	mov	sl, r0
 8000548:	e000      	b.n	800054c <__aeabi_fmul+0xf0>
 800054a:	0017      	movs	r7, r2
 800054c:	4653      	mov	r3, sl
 800054e:	003a      	movs	r2, r7
 8000550:	2b02      	cmp	r3, #2
 8000552:	d00f      	beq.n	8000574 <__aeabi_fmul+0x118>
 8000554:	464c      	mov	r4, r9
 8000556:	4650      	mov	r0, sl
 8000558:	2803      	cmp	r0, #3
 800055a:	d1cd      	bne.n	80004f8 <__aeabi_fmul+0x9c>
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	03c9      	lsls	r1, r1, #15
 8000560:	4321      	orrs	r1, r4
 8000562:	0249      	lsls	r1, r1, #9
 8000564:	20ff      	movs	r0, #255	; 0xff
 8000566:	0a49      	lsrs	r1, r1, #9
 8000568:	e7ca      	b.n	8000500 <__aeabi_fmul+0xa4>
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	2200      	movs	r2, #0
 800056e:	20ff      	movs	r0, #255	; 0xff
 8000570:	03c9      	lsls	r1, r1, #15
 8000572:	e7c5      	b.n	8000500 <__aeabi_fmul+0xa4>
 8000574:	20ff      	movs	r0, #255	; 0xff
 8000576:	2100      	movs	r1, #0
 8000578:	e7c2      	b.n	8000500 <__aeabi_fmul+0xa4>
 800057a:	0c20      	lsrs	r0, r4, #16
 800057c:	4649      	mov	r1, r9
 800057e:	0424      	lsls	r4, r4, #16
 8000580:	0c24      	lsrs	r4, r4, #16
 8000582:	0027      	movs	r7, r4
 8000584:	0c0e      	lsrs	r6, r1, #16
 8000586:	0409      	lsls	r1, r1, #16
 8000588:	0c09      	lsrs	r1, r1, #16
 800058a:	4374      	muls	r4, r6
 800058c:	434f      	muls	r7, r1
 800058e:	4346      	muls	r6, r0
 8000590:	4348      	muls	r0, r1
 8000592:	0c39      	lsrs	r1, r7, #16
 8000594:	1900      	adds	r0, r0, r4
 8000596:	1809      	adds	r1, r1, r0
 8000598:	428c      	cmp	r4, r1
 800059a:	d903      	bls.n	80005a4 <__aeabi_fmul+0x148>
 800059c:	2080      	movs	r0, #128	; 0x80
 800059e:	0240      	lsls	r0, r0, #9
 80005a0:	4684      	mov	ip, r0
 80005a2:	4466      	add	r6, ip
 80005a4:	043f      	lsls	r7, r7, #16
 80005a6:	0408      	lsls	r0, r1, #16
 80005a8:	0c3f      	lsrs	r7, r7, #16
 80005aa:	19c0      	adds	r0, r0, r7
 80005ac:	0184      	lsls	r4, r0, #6
 80005ae:	1e67      	subs	r7, r4, #1
 80005b0:	41bc      	sbcs	r4, r7
 80005b2:	0c09      	lsrs	r1, r1, #16
 80005b4:	0e80      	lsrs	r0, r0, #26
 80005b6:	1989      	adds	r1, r1, r6
 80005b8:	4304      	orrs	r4, r0
 80005ba:	0189      	lsls	r1, r1, #6
 80005bc:	430c      	orrs	r4, r1
 80005be:	0109      	lsls	r1, r1, #4
 80005c0:	d571      	bpl.n	80006a6 <__aeabi_fmul+0x24a>
 80005c2:	2301      	movs	r3, #1
 80005c4:	0861      	lsrs	r1, r4, #1
 80005c6:	401c      	ands	r4, r3
 80005c8:	430c      	orrs	r4, r1
 80005ca:	002b      	movs	r3, r5
 80005cc:	337f      	adds	r3, #127	; 0x7f
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	dd51      	ble.n	8000676 <__aeabi_fmul+0x21a>
 80005d2:	0761      	lsls	r1, r4, #29
 80005d4:	d004      	beq.n	80005e0 <__aeabi_fmul+0x184>
 80005d6:	210f      	movs	r1, #15
 80005d8:	4021      	ands	r1, r4
 80005da:	2904      	cmp	r1, #4
 80005dc:	d000      	beq.n	80005e0 <__aeabi_fmul+0x184>
 80005de:	3404      	adds	r4, #4
 80005e0:	0121      	lsls	r1, r4, #4
 80005e2:	d503      	bpl.n	80005ec <__aeabi_fmul+0x190>
 80005e4:	4b43      	ldr	r3, [pc, #268]	; (80006f4 <__aeabi_fmul+0x298>)
 80005e6:	401c      	ands	r4, r3
 80005e8:	002b      	movs	r3, r5
 80005ea:	3380      	adds	r3, #128	; 0x80
 80005ec:	2bfe      	cmp	r3, #254	; 0xfe
 80005ee:	dcc1      	bgt.n	8000574 <__aeabi_fmul+0x118>
 80005f0:	01a1      	lsls	r1, r4, #6
 80005f2:	0a49      	lsrs	r1, r1, #9
 80005f4:	b2d8      	uxtb	r0, r3
 80005f6:	e783      	b.n	8000500 <__aeabi_fmul+0xa4>
 80005f8:	2c00      	cmp	r4, #0
 80005fa:	d12c      	bne.n	8000656 <__aeabi_fmul+0x1fa>
 80005fc:	2301      	movs	r3, #1
 80005fe:	4642      	mov	r2, r8
 8000600:	431e      	orrs	r6, r3
 8000602:	002b      	movs	r3, r5
 8000604:	407a      	eors	r2, r7
 8000606:	2001      	movs	r0, #1
 8000608:	b2d2      	uxtb	r2, r2
 800060a:	1c5d      	adds	r5, r3, #1
 800060c:	2e0a      	cmp	r6, #10
 800060e:	dd00      	ble.n	8000612 <__aeabi_fmul+0x1b6>
 8000610:	e757      	b.n	80004c2 <__aeabi_fmul+0x66>
 8000612:	e76a      	b.n	80004ea <__aeabi_fmul+0x8e>
 8000614:	2b00      	cmp	r3, #0
 8000616:	d110      	bne.n	800063a <__aeabi_fmul+0x1de>
 8000618:	2301      	movs	r3, #1
 800061a:	2604      	movs	r6, #4
 800061c:	2500      	movs	r5, #0
 800061e:	469a      	mov	sl, r3
 8000620:	e738      	b.n	8000494 <__aeabi_fmul+0x38>
 8000622:	2b00      	cmp	r3, #0
 8000624:	d104      	bne.n	8000630 <__aeabi_fmul+0x1d4>
 8000626:	2302      	movs	r3, #2
 8000628:	2608      	movs	r6, #8
 800062a:	25ff      	movs	r5, #255	; 0xff
 800062c:	469a      	mov	sl, r3
 800062e:	e731      	b.n	8000494 <__aeabi_fmul+0x38>
 8000630:	2303      	movs	r3, #3
 8000632:	260c      	movs	r6, #12
 8000634:	25ff      	movs	r5, #255	; 0xff
 8000636:	469a      	mov	sl, r3
 8000638:	e72c      	b.n	8000494 <__aeabi_fmul+0x38>
 800063a:	4648      	mov	r0, r9
 800063c:	f001 fbe2 	bl	8001e04 <__clzsi2>
 8000640:	464a      	mov	r2, r9
 8000642:	1f43      	subs	r3, r0, #5
 8000644:	2576      	movs	r5, #118	; 0x76
 8000646:	409a      	lsls	r2, r3
 8000648:	2300      	movs	r3, #0
 800064a:	426d      	negs	r5, r5
 800064c:	4691      	mov	r9, r2
 800064e:	2600      	movs	r6, #0
 8000650:	469a      	mov	sl, r3
 8000652:	1a2d      	subs	r5, r5, r0
 8000654:	e71e      	b.n	8000494 <__aeabi_fmul+0x38>
 8000656:	0020      	movs	r0, r4
 8000658:	f001 fbd4 	bl	8001e04 <__clzsi2>
 800065c:	4642      	mov	r2, r8
 800065e:	1f43      	subs	r3, r0, #5
 8000660:	409c      	lsls	r4, r3
 8000662:	1a2b      	subs	r3, r5, r0
 8000664:	3b76      	subs	r3, #118	; 0x76
 8000666:	407a      	eors	r2, r7
 8000668:	2000      	movs	r0, #0
 800066a:	b2d2      	uxtb	r2, r2
 800066c:	1c5d      	adds	r5, r3, #1
 800066e:	2e0a      	cmp	r6, #10
 8000670:	dd00      	ble.n	8000674 <__aeabi_fmul+0x218>
 8000672:	e726      	b.n	80004c2 <__aeabi_fmul+0x66>
 8000674:	e739      	b.n	80004ea <__aeabi_fmul+0x8e>
 8000676:	2101      	movs	r1, #1
 8000678:	1acb      	subs	r3, r1, r3
 800067a:	2b1b      	cmp	r3, #27
 800067c:	dd00      	ble.n	8000680 <__aeabi_fmul+0x224>
 800067e:	e73d      	b.n	80004fc <__aeabi_fmul+0xa0>
 8000680:	359e      	adds	r5, #158	; 0x9e
 8000682:	0021      	movs	r1, r4
 8000684:	40ac      	lsls	r4, r5
 8000686:	40d9      	lsrs	r1, r3
 8000688:	1e63      	subs	r3, r4, #1
 800068a:	419c      	sbcs	r4, r3
 800068c:	4321      	orrs	r1, r4
 800068e:	074b      	lsls	r3, r1, #29
 8000690:	d004      	beq.n	800069c <__aeabi_fmul+0x240>
 8000692:	230f      	movs	r3, #15
 8000694:	400b      	ands	r3, r1
 8000696:	2b04      	cmp	r3, #4
 8000698:	d000      	beq.n	800069c <__aeabi_fmul+0x240>
 800069a:	3104      	adds	r1, #4
 800069c:	014b      	lsls	r3, r1, #5
 800069e:	d504      	bpl.n	80006aa <__aeabi_fmul+0x24e>
 80006a0:	2001      	movs	r0, #1
 80006a2:	2100      	movs	r1, #0
 80006a4:	e72c      	b.n	8000500 <__aeabi_fmul+0xa4>
 80006a6:	001d      	movs	r5, r3
 80006a8:	e78f      	b.n	80005ca <__aeabi_fmul+0x16e>
 80006aa:	0189      	lsls	r1, r1, #6
 80006ac:	2000      	movs	r0, #0
 80006ae:	0a49      	lsrs	r1, r1, #9
 80006b0:	e726      	b.n	8000500 <__aeabi_fmul+0xa4>
 80006b2:	2302      	movs	r3, #2
 80006b4:	2e0f      	cmp	r6, #15
 80006b6:	d10c      	bne.n	80006d2 <__aeabi_fmul+0x276>
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	464b      	mov	r3, r9
 80006bc:	03c9      	lsls	r1, r1, #15
 80006be:	420b      	tst	r3, r1
 80006c0:	d00d      	beq.n	80006de <__aeabi_fmul+0x282>
 80006c2:	420c      	tst	r4, r1
 80006c4:	d10b      	bne.n	80006de <__aeabi_fmul+0x282>
 80006c6:	4321      	orrs	r1, r4
 80006c8:	0249      	lsls	r1, r1, #9
 80006ca:	003a      	movs	r2, r7
 80006cc:	20ff      	movs	r0, #255	; 0xff
 80006ce:	0a49      	lsrs	r1, r1, #9
 80006d0:	e716      	b.n	8000500 <__aeabi_fmul+0xa4>
 80006d2:	2e0b      	cmp	r6, #11
 80006d4:	d000      	beq.n	80006d8 <__aeabi_fmul+0x27c>
 80006d6:	e6f7      	b.n	80004c8 <__aeabi_fmul+0x6c>
 80006d8:	46a1      	mov	r9, r4
 80006da:	469a      	mov	sl, r3
 80006dc:	e736      	b.n	800054c <__aeabi_fmul+0xf0>
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	464b      	mov	r3, r9
 80006e2:	03c9      	lsls	r1, r1, #15
 80006e4:	4319      	orrs	r1, r3
 80006e6:	0249      	lsls	r1, r1, #9
 80006e8:	4642      	mov	r2, r8
 80006ea:	20ff      	movs	r0, #255	; 0xff
 80006ec:	0a49      	lsrs	r1, r1, #9
 80006ee:	e707      	b.n	8000500 <__aeabi_fmul+0xa4>
 80006f0:	2303      	movs	r3, #3
 80006f2:	e7df      	b.n	80006b4 <__aeabi_fmul+0x258>
 80006f4:	f7ffffff 	.word	0xf7ffffff

080006f8 <__aeabi_fsub>:
 80006f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fa:	46c6      	mov	lr, r8
 80006fc:	0243      	lsls	r3, r0, #9
 80006fe:	0a5b      	lsrs	r3, r3, #9
 8000700:	0045      	lsls	r5, r0, #1
 8000702:	00da      	lsls	r2, r3, #3
 8000704:	0fc4      	lsrs	r4, r0, #31
 8000706:	0248      	lsls	r0, r1, #9
 8000708:	004f      	lsls	r7, r1, #1
 800070a:	4694      	mov	ip, r2
 800070c:	0a42      	lsrs	r2, r0, #9
 800070e:	001e      	movs	r6, r3
 8000710:	4690      	mov	r8, r2
 8000712:	b500      	push	{lr}
 8000714:	0e2d      	lsrs	r5, r5, #24
 8000716:	0e3f      	lsrs	r7, r7, #24
 8000718:	0fc9      	lsrs	r1, r1, #31
 800071a:	0980      	lsrs	r0, r0, #6
 800071c:	2fff      	cmp	r7, #255	; 0xff
 800071e:	d059      	beq.n	80007d4 <__aeabi_fsub+0xdc>
 8000720:	2201      	movs	r2, #1
 8000722:	4051      	eors	r1, r2
 8000724:	428c      	cmp	r4, r1
 8000726:	d039      	beq.n	800079c <__aeabi_fsub+0xa4>
 8000728:	1bea      	subs	r2, r5, r7
 800072a:	2a00      	cmp	r2, #0
 800072c:	dd58      	ble.n	80007e0 <__aeabi_fsub+0xe8>
 800072e:	2f00      	cmp	r7, #0
 8000730:	d068      	beq.n	8000804 <__aeabi_fsub+0x10c>
 8000732:	2dff      	cmp	r5, #255	; 0xff
 8000734:	d100      	bne.n	8000738 <__aeabi_fsub+0x40>
 8000736:	e0d1      	b.n	80008dc <__aeabi_fsub+0x1e4>
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	04db      	lsls	r3, r3, #19
 800073c:	4318      	orrs	r0, r3
 800073e:	2a1b      	cmp	r2, #27
 8000740:	dc00      	bgt.n	8000744 <__aeabi_fsub+0x4c>
 8000742:	e0e3      	b.n	800090c <__aeabi_fsub+0x214>
 8000744:	2301      	movs	r3, #1
 8000746:	4662      	mov	r2, ip
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	015a      	lsls	r2, r3, #5
 800074c:	d400      	bmi.n	8000750 <__aeabi_fsub+0x58>
 800074e:	e0ac      	b.n	80008aa <__aeabi_fsub+0x1b2>
 8000750:	019b      	lsls	r3, r3, #6
 8000752:	099e      	lsrs	r6, r3, #6
 8000754:	0030      	movs	r0, r6
 8000756:	f001 fb55 	bl	8001e04 <__clzsi2>
 800075a:	0033      	movs	r3, r6
 800075c:	3805      	subs	r0, #5
 800075e:	4083      	lsls	r3, r0
 8000760:	4285      	cmp	r5, r0
 8000762:	dc00      	bgt.n	8000766 <__aeabi_fsub+0x6e>
 8000764:	e0c6      	b.n	80008f4 <__aeabi_fsub+0x1fc>
 8000766:	4ab2      	ldr	r2, [pc, #712]	; (8000a30 <__aeabi_fsub+0x338>)
 8000768:	1a2d      	subs	r5, r5, r0
 800076a:	4013      	ands	r3, r2
 800076c:	075a      	lsls	r2, r3, #29
 800076e:	d004      	beq.n	800077a <__aeabi_fsub+0x82>
 8000770:	220f      	movs	r2, #15
 8000772:	401a      	ands	r2, r3
 8000774:	2a04      	cmp	r2, #4
 8000776:	d000      	beq.n	800077a <__aeabi_fsub+0x82>
 8000778:	3304      	adds	r3, #4
 800077a:	015a      	lsls	r2, r3, #5
 800077c:	d400      	bmi.n	8000780 <__aeabi_fsub+0x88>
 800077e:	e097      	b.n	80008b0 <__aeabi_fsub+0x1b8>
 8000780:	1c6a      	adds	r2, r5, #1
 8000782:	2dfe      	cmp	r5, #254	; 0xfe
 8000784:	d100      	bne.n	8000788 <__aeabi_fsub+0x90>
 8000786:	e084      	b.n	8000892 <__aeabi_fsub+0x19a>
 8000788:	019b      	lsls	r3, r3, #6
 800078a:	0a5e      	lsrs	r6, r3, #9
 800078c:	b2d2      	uxtb	r2, r2
 800078e:	05d0      	lsls	r0, r2, #23
 8000790:	4330      	orrs	r0, r6
 8000792:	07e4      	lsls	r4, r4, #31
 8000794:	4320      	orrs	r0, r4
 8000796:	bc80      	pop	{r7}
 8000798:	46b8      	mov	r8, r7
 800079a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800079c:	1bea      	subs	r2, r5, r7
 800079e:	2a00      	cmp	r2, #0
 80007a0:	dd41      	ble.n	8000826 <__aeabi_fsub+0x12e>
 80007a2:	2f00      	cmp	r7, #0
 80007a4:	d06b      	beq.n	800087e <__aeabi_fsub+0x186>
 80007a6:	2dff      	cmp	r5, #255	; 0xff
 80007a8:	d100      	bne.n	80007ac <__aeabi_fsub+0xb4>
 80007aa:	e097      	b.n	80008dc <__aeabi_fsub+0x1e4>
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	04db      	lsls	r3, r3, #19
 80007b0:	4318      	orrs	r0, r3
 80007b2:	2a1b      	cmp	r2, #27
 80007b4:	dc00      	bgt.n	80007b8 <__aeabi_fsub+0xc0>
 80007b6:	e0cc      	b.n	8000952 <__aeabi_fsub+0x25a>
 80007b8:	2301      	movs	r3, #1
 80007ba:	4463      	add	r3, ip
 80007bc:	015a      	lsls	r2, r3, #5
 80007be:	d574      	bpl.n	80008aa <__aeabi_fsub+0x1b2>
 80007c0:	3501      	adds	r5, #1
 80007c2:	2dff      	cmp	r5, #255	; 0xff
 80007c4:	d065      	beq.n	8000892 <__aeabi_fsub+0x19a>
 80007c6:	2201      	movs	r2, #1
 80007c8:	499a      	ldr	r1, [pc, #616]	; (8000a34 <__aeabi_fsub+0x33c>)
 80007ca:	401a      	ands	r2, r3
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	400b      	ands	r3, r1
 80007d0:	4313      	orrs	r3, r2
 80007d2:	e7cb      	b.n	800076c <__aeabi_fsub+0x74>
 80007d4:	2800      	cmp	r0, #0
 80007d6:	d01f      	beq.n	8000818 <__aeabi_fsub+0x120>
 80007d8:	428c      	cmp	r4, r1
 80007da:	d022      	beq.n	8000822 <__aeabi_fsub+0x12a>
 80007dc:	002a      	movs	r2, r5
 80007de:	3aff      	subs	r2, #255	; 0xff
 80007e0:	2a00      	cmp	r2, #0
 80007e2:	d035      	beq.n	8000850 <__aeabi_fsub+0x158>
 80007e4:	1b7a      	subs	r2, r7, r5
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d000      	beq.n	80007ec <__aeabi_fsub+0xf4>
 80007ea:	e099      	b.n	8000920 <__aeabi_fsub+0x228>
 80007ec:	4663      	mov	r3, ip
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fsub+0xfc>
 80007f2:	e0dd      	b.n	80009b0 <__aeabi_fsub+0x2b8>
 80007f4:	1e53      	subs	r3, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fsub+0x104>
 80007fa:	e105      	b.n	8000a08 <__aeabi_fsub+0x310>
 80007fc:	2aff      	cmp	r2, #255	; 0xff
 80007fe:	d06b      	beq.n	80008d8 <__aeabi_fsub+0x1e0>
 8000800:	001a      	movs	r2, r3
 8000802:	e094      	b.n	800092e <__aeabi_fsub+0x236>
 8000804:	2800      	cmp	r0, #0
 8000806:	d073      	beq.n	80008f0 <__aeabi_fsub+0x1f8>
 8000808:	1e51      	subs	r1, r2, #1
 800080a:	2a01      	cmp	r2, #1
 800080c:	d100      	bne.n	8000810 <__aeabi_fsub+0x118>
 800080e:	e0df      	b.n	80009d0 <__aeabi_fsub+0x2d8>
 8000810:	2aff      	cmp	r2, #255	; 0xff
 8000812:	d063      	beq.n	80008dc <__aeabi_fsub+0x1e4>
 8000814:	000a      	movs	r2, r1
 8000816:	e792      	b.n	800073e <__aeabi_fsub+0x46>
 8000818:	2201      	movs	r2, #1
 800081a:	4051      	eors	r1, r2
 800081c:	42a1      	cmp	r1, r4
 800081e:	d000      	beq.n	8000822 <__aeabi_fsub+0x12a>
 8000820:	e782      	b.n	8000728 <__aeabi_fsub+0x30>
 8000822:	002a      	movs	r2, r5
 8000824:	3aff      	subs	r2, #255	; 0xff
 8000826:	2a00      	cmp	r2, #0
 8000828:	d036      	beq.n	8000898 <__aeabi_fsub+0x1a0>
 800082a:	1b7a      	subs	r2, r7, r5
 800082c:	2d00      	cmp	r5, #0
 800082e:	d100      	bne.n	8000832 <__aeabi_fsub+0x13a>
 8000830:	e0aa      	b.n	8000988 <__aeabi_fsub+0x290>
 8000832:	2fff      	cmp	r7, #255	; 0xff
 8000834:	d100      	bne.n	8000838 <__aeabi_fsub+0x140>
 8000836:	e0da      	b.n	80009ee <__aeabi_fsub+0x2f6>
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	4661      	mov	r1, ip
 800083c:	04db      	lsls	r3, r3, #19
 800083e:	4319      	orrs	r1, r3
 8000840:	468c      	mov	ip, r1
 8000842:	2a1b      	cmp	r2, #27
 8000844:	dc00      	bgt.n	8000848 <__aeabi_fsub+0x150>
 8000846:	e0d4      	b.n	80009f2 <__aeabi_fsub+0x2fa>
 8000848:	2301      	movs	r3, #1
 800084a:	003d      	movs	r5, r7
 800084c:	181b      	adds	r3, r3, r0
 800084e:	e7b5      	b.n	80007bc <__aeabi_fsub+0xc4>
 8000850:	27fe      	movs	r7, #254	; 0xfe
 8000852:	1c6a      	adds	r2, r5, #1
 8000854:	4217      	tst	r7, r2
 8000856:	d171      	bne.n	800093c <__aeabi_fsub+0x244>
 8000858:	2d00      	cmp	r5, #0
 800085a:	d000      	beq.n	800085e <__aeabi_fsub+0x166>
 800085c:	e09e      	b.n	800099c <__aeabi_fsub+0x2a4>
 800085e:	4663      	mov	r3, ip
 8000860:	2b00      	cmp	r3, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_fsub+0x16e>
 8000864:	e0d5      	b.n	8000a12 <__aeabi_fsub+0x31a>
 8000866:	2200      	movs	r2, #0
 8000868:	2800      	cmp	r0, #0
 800086a:	d100      	bne.n	800086e <__aeabi_fsub+0x176>
 800086c:	e78f      	b.n	800078e <__aeabi_fsub+0x96>
 800086e:	1a1b      	subs	r3, r3, r0
 8000870:	015e      	lsls	r6, r3, #5
 8000872:	d400      	bmi.n	8000876 <__aeabi_fsub+0x17e>
 8000874:	e0d6      	b.n	8000a24 <__aeabi_fsub+0x32c>
 8000876:	4663      	mov	r3, ip
 8000878:	000c      	movs	r4, r1
 800087a:	1ac3      	subs	r3, r0, r3
 800087c:	e776      	b.n	800076c <__aeabi_fsub+0x74>
 800087e:	2800      	cmp	r0, #0
 8000880:	d036      	beq.n	80008f0 <__aeabi_fsub+0x1f8>
 8000882:	1e51      	subs	r1, r2, #1
 8000884:	2a01      	cmp	r2, #1
 8000886:	d100      	bne.n	800088a <__aeabi_fsub+0x192>
 8000888:	e09a      	b.n	80009c0 <__aeabi_fsub+0x2c8>
 800088a:	2aff      	cmp	r2, #255	; 0xff
 800088c:	d026      	beq.n	80008dc <__aeabi_fsub+0x1e4>
 800088e:	000a      	movs	r2, r1
 8000890:	e78f      	b.n	80007b2 <__aeabi_fsub+0xba>
 8000892:	22ff      	movs	r2, #255	; 0xff
 8000894:	2600      	movs	r6, #0
 8000896:	e77a      	b.n	800078e <__aeabi_fsub+0x96>
 8000898:	27fe      	movs	r7, #254	; 0xfe
 800089a:	1c6a      	adds	r2, r5, #1
 800089c:	4217      	tst	r7, r2
 800089e:	d062      	beq.n	8000966 <__aeabi_fsub+0x26e>
 80008a0:	2aff      	cmp	r2, #255	; 0xff
 80008a2:	d0f6      	beq.n	8000892 <__aeabi_fsub+0x19a>
 80008a4:	0015      	movs	r5, r2
 80008a6:	4460      	add	r0, ip
 80008a8:	0843      	lsrs	r3, r0, #1
 80008aa:	075a      	lsls	r2, r3, #29
 80008ac:	d000      	beq.n	80008b0 <__aeabi_fsub+0x1b8>
 80008ae:	e75f      	b.n	8000770 <__aeabi_fsub+0x78>
 80008b0:	08db      	lsrs	r3, r3, #3
 80008b2:	2dff      	cmp	r5, #255	; 0xff
 80008b4:	d012      	beq.n	80008dc <__aeabi_fsub+0x1e4>
 80008b6:	025b      	lsls	r3, r3, #9
 80008b8:	0a5e      	lsrs	r6, r3, #9
 80008ba:	b2ea      	uxtb	r2, r5
 80008bc:	e767      	b.n	800078e <__aeabi_fsub+0x96>
 80008be:	4662      	mov	r2, ip
 80008c0:	2a00      	cmp	r2, #0
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fsub+0x1ce>
 80008c4:	e093      	b.n	80009ee <__aeabi_fsub+0x2f6>
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d008      	beq.n	80008dc <__aeabi_fsub+0x1e4>
 80008ca:	2280      	movs	r2, #128	; 0x80
 80008cc:	03d2      	lsls	r2, r2, #15
 80008ce:	4213      	tst	r3, r2
 80008d0:	d004      	beq.n	80008dc <__aeabi_fsub+0x1e4>
 80008d2:	4640      	mov	r0, r8
 80008d4:	4210      	tst	r0, r2
 80008d6:	d101      	bne.n	80008dc <__aeabi_fsub+0x1e4>
 80008d8:	000c      	movs	r4, r1
 80008da:	4643      	mov	r3, r8
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d0d8      	beq.n	8000892 <__aeabi_fsub+0x19a>
 80008e0:	2680      	movs	r6, #128	; 0x80
 80008e2:	03f6      	lsls	r6, r6, #15
 80008e4:	431e      	orrs	r6, r3
 80008e6:	0276      	lsls	r6, r6, #9
 80008e8:	22ff      	movs	r2, #255	; 0xff
 80008ea:	0a76      	lsrs	r6, r6, #9
 80008ec:	e74f      	b.n	800078e <__aeabi_fsub+0x96>
 80008ee:	4643      	mov	r3, r8
 80008f0:	0015      	movs	r5, r2
 80008f2:	e7de      	b.n	80008b2 <__aeabi_fsub+0x1ba>
 80008f4:	2220      	movs	r2, #32
 80008f6:	1b40      	subs	r0, r0, r5
 80008f8:	3001      	adds	r0, #1
 80008fa:	1a12      	subs	r2, r2, r0
 80008fc:	0019      	movs	r1, r3
 80008fe:	4093      	lsls	r3, r2
 8000900:	40c1      	lsrs	r1, r0
 8000902:	1e5a      	subs	r2, r3, #1
 8000904:	4193      	sbcs	r3, r2
 8000906:	2500      	movs	r5, #0
 8000908:	430b      	orrs	r3, r1
 800090a:	e72f      	b.n	800076c <__aeabi_fsub+0x74>
 800090c:	2320      	movs	r3, #32
 800090e:	1a9b      	subs	r3, r3, r2
 8000910:	0001      	movs	r1, r0
 8000912:	4098      	lsls	r0, r3
 8000914:	0003      	movs	r3, r0
 8000916:	40d1      	lsrs	r1, r2
 8000918:	1e5a      	subs	r2, r3, #1
 800091a:	4193      	sbcs	r3, r2
 800091c:	430b      	orrs	r3, r1
 800091e:	e712      	b.n	8000746 <__aeabi_fsub+0x4e>
 8000920:	2fff      	cmp	r7, #255	; 0xff
 8000922:	d0d9      	beq.n	80008d8 <__aeabi_fsub+0x1e0>
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	4664      	mov	r4, ip
 8000928:	04db      	lsls	r3, r3, #19
 800092a:	431c      	orrs	r4, r3
 800092c:	46a4      	mov	ip, r4
 800092e:	2a1b      	cmp	r2, #27
 8000930:	dd52      	ble.n	80009d8 <__aeabi_fsub+0x2e0>
 8000932:	2301      	movs	r3, #1
 8000934:	000c      	movs	r4, r1
 8000936:	003d      	movs	r5, r7
 8000938:	1ac3      	subs	r3, r0, r3
 800093a:	e706      	b.n	800074a <__aeabi_fsub+0x52>
 800093c:	4663      	mov	r3, ip
 800093e:	1a1e      	subs	r6, r3, r0
 8000940:	0173      	lsls	r3, r6, #5
 8000942:	d439      	bmi.n	80009b8 <__aeabi_fsub+0x2c0>
 8000944:	2e00      	cmp	r6, #0
 8000946:	d000      	beq.n	800094a <__aeabi_fsub+0x252>
 8000948:	e704      	b.n	8000754 <__aeabi_fsub+0x5c>
 800094a:	2400      	movs	r4, #0
 800094c:	2200      	movs	r2, #0
 800094e:	2600      	movs	r6, #0
 8000950:	e71d      	b.n	800078e <__aeabi_fsub+0x96>
 8000952:	2320      	movs	r3, #32
 8000954:	1a9b      	subs	r3, r3, r2
 8000956:	0001      	movs	r1, r0
 8000958:	4098      	lsls	r0, r3
 800095a:	0003      	movs	r3, r0
 800095c:	40d1      	lsrs	r1, r2
 800095e:	1e5a      	subs	r2, r3, #1
 8000960:	4193      	sbcs	r3, r2
 8000962:	430b      	orrs	r3, r1
 8000964:	e729      	b.n	80007ba <__aeabi_fsub+0xc2>
 8000966:	2d00      	cmp	r5, #0
 8000968:	d1a9      	bne.n	80008be <__aeabi_fsub+0x1c6>
 800096a:	4663      	mov	r3, ip
 800096c:	2b00      	cmp	r3, #0
 800096e:	d056      	beq.n	8000a1e <__aeabi_fsub+0x326>
 8000970:	2200      	movs	r2, #0
 8000972:	2800      	cmp	r0, #0
 8000974:	d100      	bne.n	8000978 <__aeabi_fsub+0x280>
 8000976:	e70a      	b.n	800078e <__aeabi_fsub+0x96>
 8000978:	0003      	movs	r3, r0
 800097a:	4463      	add	r3, ip
 800097c:	015a      	lsls	r2, r3, #5
 800097e:	d594      	bpl.n	80008aa <__aeabi_fsub+0x1b2>
 8000980:	4a2b      	ldr	r2, [pc, #172]	; (8000a30 <__aeabi_fsub+0x338>)
 8000982:	3501      	adds	r5, #1
 8000984:	4013      	ands	r3, r2
 8000986:	e790      	b.n	80008aa <__aeabi_fsub+0x1b2>
 8000988:	4663      	mov	r3, ip
 800098a:	2b00      	cmp	r3, #0
 800098c:	d0af      	beq.n	80008ee <__aeabi_fsub+0x1f6>
 800098e:	1e53      	subs	r3, r2, #1
 8000990:	2a01      	cmp	r2, #1
 8000992:	d015      	beq.n	80009c0 <__aeabi_fsub+0x2c8>
 8000994:	2aff      	cmp	r2, #255	; 0xff
 8000996:	d02a      	beq.n	80009ee <__aeabi_fsub+0x2f6>
 8000998:	001a      	movs	r2, r3
 800099a:	e752      	b.n	8000842 <__aeabi_fsub+0x14a>
 800099c:	4662      	mov	r2, ip
 800099e:	2a00      	cmp	r2, #0
 80009a0:	d191      	bne.n	80008c6 <__aeabi_fsub+0x1ce>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d198      	bne.n	80008d8 <__aeabi_fsub+0x1e0>
 80009a6:	2680      	movs	r6, #128	; 0x80
 80009a8:	2400      	movs	r4, #0
 80009aa:	22ff      	movs	r2, #255	; 0xff
 80009ac:	03f6      	lsls	r6, r6, #15
 80009ae:	e6ee      	b.n	800078e <__aeabi_fsub+0x96>
 80009b0:	000c      	movs	r4, r1
 80009b2:	4643      	mov	r3, r8
 80009b4:	0015      	movs	r5, r2
 80009b6:	e77c      	b.n	80008b2 <__aeabi_fsub+0x1ba>
 80009b8:	4663      	mov	r3, ip
 80009ba:	000c      	movs	r4, r1
 80009bc:	1ac6      	subs	r6, r0, r3
 80009be:	e6c9      	b.n	8000754 <__aeabi_fsub+0x5c>
 80009c0:	0003      	movs	r3, r0
 80009c2:	4463      	add	r3, ip
 80009c4:	2501      	movs	r5, #1
 80009c6:	015a      	lsls	r2, r3, #5
 80009c8:	d400      	bmi.n	80009cc <__aeabi_fsub+0x2d4>
 80009ca:	e76e      	b.n	80008aa <__aeabi_fsub+0x1b2>
 80009cc:	2502      	movs	r5, #2
 80009ce:	e6fa      	b.n	80007c6 <__aeabi_fsub+0xce>
 80009d0:	4663      	mov	r3, ip
 80009d2:	2501      	movs	r5, #1
 80009d4:	1a1b      	subs	r3, r3, r0
 80009d6:	e6b8      	b.n	800074a <__aeabi_fsub+0x52>
 80009d8:	4664      	mov	r4, ip
 80009da:	2320      	movs	r3, #32
 80009dc:	40d4      	lsrs	r4, r2
 80009de:	1a9b      	subs	r3, r3, r2
 80009e0:	4662      	mov	r2, ip
 80009e2:	409a      	lsls	r2, r3
 80009e4:	0013      	movs	r3, r2
 80009e6:	1e5a      	subs	r2, r3, #1
 80009e8:	4193      	sbcs	r3, r2
 80009ea:	4323      	orrs	r3, r4
 80009ec:	e7a2      	b.n	8000934 <__aeabi_fsub+0x23c>
 80009ee:	4643      	mov	r3, r8
 80009f0:	e774      	b.n	80008dc <__aeabi_fsub+0x1e4>
 80009f2:	4661      	mov	r1, ip
 80009f4:	2320      	movs	r3, #32
 80009f6:	40d1      	lsrs	r1, r2
 80009f8:	1a9b      	subs	r3, r3, r2
 80009fa:	4662      	mov	r2, ip
 80009fc:	409a      	lsls	r2, r3
 80009fe:	0013      	movs	r3, r2
 8000a00:	1e5a      	subs	r2, r3, #1
 8000a02:	4193      	sbcs	r3, r2
 8000a04:	430b      	orrs	r3, r1
 8000a06:	e720      	b.n	800084a <__aeabi_fsub+0x152>
 8000a08:	4663      	mov	r3, ip
 8000a0a:	000c      	movs	r4, r1
 8000a0c:	2501      	movs	r5, #1
 8000a0e:	1ac3      	subs	r3, r0, r3
 8000a10:	e69b      	b.n	800074a <__aeabi_fsub+0x52>
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d099      	beq.n	800094a <__aeabi_fsub+0x252>
 8000a16:	000c      	movs	r4, r1
 8000a18:	4646      	mov	r6, r8
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	e6b7      	b.n	800078e <__aeabi_fsub+0x96>
 8000a1e:	4646      	mov	r6, r8
 8000a20:	2200      	movs	r2, #0
 8000a22:	e6b4      	b.n	800078e <__aeabi_fsub+0x96>
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d000      	beq.n	8000a2a <__aeabi_fsub+0x332>
 8000a28:	e73f      	b.n	80008aa <__aeabi_fsub+0x1b2>
 8000a2a:	2400      	movs	r4, #0
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	e6ae      	b.n	800078e <__aeabi_fsub+0x96>
 8000a30:	fbffffff 	.word	0xfbffffff
 8000a34:	7dffffff 	.word	0x7dffffff

08000a38 <__aeabi_f2iz>:
 8000a38:	0241      	lsls	r1, r0, #9
 8000a3a:	0042      	lsls	r2, r0, #1
 8000a3c:	0fc3      	lsrs	r3, r0, #31
 8000a3e:	0a49      	lsrs	r1, r1, #9
 8000a40:	2000      	movs	r0, #0
 8000a42:	0e12      	lsrs	r2, r2, #24
 8000a44:	2a7e      	cmp	r2, #126	; 0x7e
 8000a46:	dd03      	ble.n	8000a50 <__aeabi_f2iz+0x18>
 8000a48:	2a9d      	cmp	r2, #157	; 0x9d
 8000a4a:	dd02      	ble.n	8000a52 <__aeabi_f2iz+0x1a>
 8000a4c:	4a09      	ldr	r2, [pc, #36]	; (8000a74 <__aeabi_f2iz+0x3c>)
 8000a4e:	1898      	adds	r0, r3, r2
 8000a50:	4770      	bx	lr
 8000a52:	2080      	movs	r0, #128	; 0x80
 8000a54:	0400      	lsls	r0, r0, #16
 8000a56:	4301      	orrs	r1, r0
 8000a58:	2a95      	cmp	r2, #149	; 0x95
 8000a5a:	dc07      	bgt.n	8000a6c <__aeabi_f2iz+0x34>
 8000a5c:	2096      	movs	r0, #150	; 0x96
 8000a5e:	1a82      	subs	r2, r0, r2
 8000a60:	40d1      	lsrs	r1, r2
 8000a62:	4248      	negs	r0, r1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1f3      	bne.n	8000a50 <__aeabi_f2iz+0x18>
 8000a68:	0008      	movs	r0, r1
 8000a6a:	e7f1      	b.n	8000a50 <__aeabi_f2iz+0x18>
 8000a6c:	3a96      	subs	r2, #150	; 0x96
 8000a6e:	4091      	lsls	r1, r2
 8000a70:	e7f7      	b.n	8000a62 <__aeabi_f2iz+0x2a>
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	7fffffff 	.word	0x7fffffff

08000a78 <__aeabi_dadd>:
 8000a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7a:	464f      	mov	r7, r9
 8000a7c:	4646      	mov	r6, r8
 8000a7e:	46d6      	mov	lr, sl
 8000a80:	0004      	movs	r4, r0
 8000a82:	b5c0      	push	{r6, r7, lr}
 8000a84:	001f      	movs	r7, r3
 8000a86:	030b      	lsls	r3, r1, #12
 8000a88:	0010      	movs	r0, r2
 8000a8a:	004e      	lsls	r6, r1, #1
 8000a8c:	0a5b      	lsrs	r3, r3, #9
 8000a8e:	0fcd      	lsrs	r5, r1, #31
 8000a90:	0f61      	lsrs	r1, r4, #29
 8000a92:	007a      	lsls	r2, r7, #1
 8000a94:	4319      	orrs	r1, r3
 8000a96:	00e3      	lsls	r3, r4, #3
 8000a98:	033c      	lsls	r4, r7, #12
 8000a9a:	0fff      	lsrs	r7, r7, #31
 8000a9c:	46bc      	mov	ip, r7
 8000a9e:	0a64      	lsrs	r4, r4, #9
 8000aa0:	0f47      	lsrs	r7, r0, #29
 8000aa2:	4327      	orrs	r7, r4
 8000aa4:	0d76      	lsrs	r6, r6, #21
 8000aa6:	0d52      	lsrs	r2, r2, #21
 8000aa8:	00c0      	lsls	r0, r0, #3
 8000aaa:	46b9      	mov	r9, r7
 8000aac:	4680      	mov	r8, r0
 8000aae:	1ab7      	subs	r7, r6, r2
 8000ab0:	4565      	cmp	r5, ip
 8000ab2:	d100      	bne.n	8000ab6 <__aeabi_dadd+0x3e>
 8000ab4:	e09b      	b.n	8000bee <__aeabi_dadd+0x176>
 8000ab6:	2f00      	cmp	r7, #0
 8000ab8:	dc00      	bgt.n	8000abc <__aeabi_dadd+0x44>
 8000aba:	e084      	b.n	8000bc6 <__aeabi_dadd+0x14e>
 8000abc:	2a00      	cmp	r2, #0
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_dadd+0x4a>
 8000ac0:	e0be      	b.n	8000c40 <__aeabi_dadd+0x1c8>
 8000ac2:	4ac8      	ldr	r2, [pc, #800]	; (8000de4 <__aeabi_dadd+0x36c>)
 8000ac4:	4296      	cmp	r6, r2
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dadd+0x52>
 8000ac8:	e124      	b.n	8000d14 <__aeabi_dadd+0x29c>
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	464c      	mov	r4, r9
 8000ace:	0412      	lsls	r2, r2, #16
 8000ad0:	4314      	orrs	r4, r2
 8000ad2:	46a1      	mov	r9, r4
 8000ad4:	2f38      	cmp	r7, #56	; 0x38
 8000ad6:	dd00      	ble.n	8000ada <__aeabi_dadd+0x62>
 8000ad8:	e167      	b.n	8000daa <__aeabi_dadd+0x332>
 8000ada:	2f1f      	cmp	r7, #31
 8000adc:	dd00      	ble.n	8000ae0 <__aeabi_dadd+0x68>
 8000ade:	e1d6      	b.n	8000e8e <__aeabi_dadd+0x416>
 8000ae0:	2220      	movs	r2, #32
 8000ae2:	464c      	mov	r4, r9
 8000ae4:	1bd2      	subs	r2, r2, r7
 8000ae6:	4094      	lsls	r4, r2
 8000ae8:	46a2      	mov	sl, r4
 8000aea:	4644      	mov	r4, r8
 8000aec:	40fc      	lsrs	r4, r7
 8000aee:	0020      	movs	r0, r4
 8000af0:	4654      	mov	r4, sl
 8000af2:	4304      	orrs	r4, r0
 8000af4:	4640      	mov	r0, r8
 8000af6:	4090      	lsls	r0, r2
 8000af8:	1e42      	subs	r2, r0, #1
 8000afa:	4190      	sbcs	r0, r2
 8000afc:	464a      	mov	r2, r9
 8000afe:	40fa      	lsrs	r2, r7
 8000b00:	4304      	orrs	r4, r0
 8000b02:	1a89      	subs	r1, r1, r2
 8000b04:	1b1c      	subs	r4, r3, r4
 8000b06:	42a3      	cmp	r3, r4
 8000b08:	4192      	sbcs	r2, r2
 8000b0a:	4252      	negs	r2, r2
 8000b0c:	1a8b      	subs	r3, r1, r2
 8000b0e:	469a      	mov	sl, r3
 8000b10:	4653      	mov	r3, sl
 8000b12:	021b      	lsls	r3, r3, #8
 8000b14:	d400      	bmi.n	8000b18 <__aeabi_dadd+0xa0>
 8000b16:	e0d4      	b.n	8000cc2 <__aeabi_dadd+0x24a>
 8000b18:	4653      	mov	r3, sl
 8000b1a:	025a      	lsls	r2, r3, #9
 8000b1c:	0a53      	lsrs	r3, r2, #9
 8000b1e:	469a      	mov	sl, r3
 8000b20:	4653      	mov	r3, sl
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0xb0>
 8000b26:	e104      	b.n	8000d32 <__aeabi_dadd+0x2ba>
 8000b28:	4650      	mov	r0, sl
 8000b2a:	f001 f96b 	bl	8001e04 <__clzsi2>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	3b08      	subs	r3, #8
 8000b32:	2220      	movs	r2, #32
 8000b34:	0020      	movs	r0, r4
 8000b36:	1ad2      	subs	r2, r2, r3
 8000b38:	4651      	mov	r1, sl
 8000b3a:	40d0      	lsrs	r0, r2
 8000b3c:	4099      	lsls	r1, r3
 8000b3e:	0002      	movs	r2, r0
 8000b40:	409c      	lsls	r4, r3
 8000b42:	430a      	orrs	r2, r1
 8000b44:	42b3      	cmp	r3, r6
 8000b46:	da00      	bge.n	8000b4a <__aeabi_dadd+0xd2>
 8000b48:	e102      	b.n	8000d50 <__aeabi_dadd+0x2d8>
 8000b4a:	1b9b      	subs	r3, r3, r6
 8000b4c:	1c59      	adds	r1, r3, #1
 8000b4e:	291f      	cmp	r1, #31
 8000b50:	dd00      	ble.n	8000b54 <__aeabi_dadd+0xdc>
 8000b52:	e0a7      	b.n	8000ca4 <__aeabi_dadd+0x22c>
 8000b54:	2320      	movs	r3, #32
 8000b56:	0010      	movs	r0, r2
 8000b58:	0026      	movs	r6, r4
 8000b5a:	1a5b      	subs	r3, r3, r1
 8000b5c:	409c      	lsls	r4, r3
 8000b5e:	4098      	lsls	r0, r3
 8000b60:	40ce      	lsrs	r6, r1
 8000b62:	40ca      	lsrs	r2, r1
 8000b64:	1e63      	subs	r3, r4, #1
 8000b66:	419c      	sbcs	r4, r3
 8000b68:	4330      	orrs	r0, r6
 8000b6a:	4692      	mov	sl, r2
 8000b6c:	2600      	movs	r6, #0
 8000b6e:	4304      	orrs	r4, r0
 8000b70:	0763      	lsls	r3, r4, #29
 8000b72:	d009      	beq.n	8000b88 <__aeabi_dadd+0x110>
 8000b74:	230f      	movs	r3, #15
 8000b76:	4023      	ands	r3, r4
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	d005      	beq.n	8000b88 <__aeabi_dadd+0x110>
 8000b7c:	1d23      	adds	r3, r4, #4
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	41a4      	sbcs	r4, r4
 8000b82:	4264      	negs	r4, r4
 8000b84:	44a2      	add	sl, r4
 8000b86:	001c      	movs	r4, r3
 8000b88:	4653      	mov	r3, sl
 8000b8a:	021b      	lsls	r3, r3, #8
 8000b8c:	d400      	bmi.n	8000b90 <__aeabi_dadd+0x118>
 8000b8e:	e09b      	b.n	8000cc8 <__aeabi_dadd+0x250>
 8000b90:	4b94      	ldr	r3, [pc, #592]	; (8000de4 <__aeabi_dadd+0x36c>)
 8000b92:	3601      	adds	r6, #1
 8000b94:	429e      	cmp	r6, r3
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dadd+0x122>
 8000b98:	e0b8      	b.n	8000d0c <__aeabi_dadd+0x294>
 8000b9a:	4653      	mov	r3, sl
 8000b9c:	4992      	ldr	r1, [pc, #584]	; (8000de8 <__aeabi_dadd+0x370>)
 8000b9e:	08e4      	lsrs	r4, r4, #3
 8000ba0:	400b      	ands	r3, r1
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	075b      	lsls	r3, r3, #29
 8000ba6:	4323      	orrs	r3, r4
 8000ba8:	0572      	lsls	r2, r6, #21
 8000baa:	024c      	lsls	r4, r1, #9
 8000bac:	0b24      	lsrs	r4, r4, #12
 8000bae:	0d52      	lsrs	r2, r2, #21
 8000bb0:	0512      	lsls	r2, r2, #20
 8000bb2:	07ed      	lsls	r5, r5, #31
 8000bb4:	4322      	orrs	r2, r4
 8000bb6:	432a      	orrs	r2, r5
 8000bb8:	0018      	movs	r0, r3
 8000bba:	0011      	movs	r1, r2
 8000bbc:	bce0      	pop	{r5, r6, r7}
 8000bbe:	46ba      	mov	sl, r7
 8000bc0:	46b1      	mov	r9, r6
 8000bc2:	46a8      	mov	r8, r5
 8000bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc6:	2f00      	cmp	r7, #0
 8000bc8:	d048      	beq.n	8000c5c <__aeabi_dadd+0x1e4>
 8000bca:	1b97      	subs	r7, r2, r6
 8000bcc:	2e00      	cmp	r6, #0
 8000bce:	d000      	beq.n	8000bd2 <__aeabi_dadd+0x15a>
 8000bd0:	e10e      	b.n	8000df0 <__aeabi_dadd+0x378>
 8000bd2:	000c      	movs	r4, r1
 8000bd4:	431c      	orrs	r4, r3
 8000bd6:	d100      	bne.n	8000bda <__aeabi_dadd+0x162>
 8000bd8:	e1b7      	b.n	8000f4a <__aeabi_dadd+0x4d2>
 8000bda:	1e7c      	subs	r4, r7, #1
 8000bdc:	2f01      	cmp	r7, #1
 8000bde:	d100      	bne.n	8000be2 <__aeabi_dadd+0x16a>
 8000be0:	e226      	b.n	8001030 <__aeabi_dadd+0x5b8>
 8000be2:	4d80      	ldr	r5, [pc, #512]	; (8000de4 <__aeabi_dadd+0x36c>)
 8000be4:	42af      	cmp	r7, r5
 8000be6:	d100      	bne.n	8000bea <__aeabi_dadd+0x172>
 8000be8:	e1d5      	b.n	8000f96 <__aeabi_dadd+0x51e>
 8000bea:	0027      	movs	r7, r4
 8000bec:	e107      	b.n	8000dfe <__aeabi_dadd+0x386>
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	dc00      	bgt.n	8000bf4 <__aeabi_dadd+0x17c>
 8000bf2:	e0b2      	b.n	8000d5a <__aeabi_dadd+0x2e2>
 8000bf4:	2a00      	cmp	r2, #0
 8000bf6:	d047      	beq.n	8000c88 <__aeabi_dadd+0x210>
 8000bf8:	4a7a      	ldr	r2, [pc, #488]	; (8000de4 <__aeabi_dadd+0x36c>)
 8000bfa:	4296      	cmp	r6, r2
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_dadd+0x188>
 8000bfe:	e089      	b.n	8000d14 <__aeabi_dadd+0x29c>
 8000c00:	2280      	movs	r2, #128	; 0x80
 8000c02:	464c      	mov	r4, r9
 8000c04:	0412      	lsls	r2, r2, #16
 8000c06:	4314      	orrs	r4, r2
 8000c08:	46a1      	mov	r9, r4
 8000c0a:	2f38      	cmp	r7, #56	; 0x38
 8000c0c:	dc6b      	bgt.n	8000ce6 <__aeabi_dadd+0x26e>
 8000c0e:	2f1f      	cmp	r7, #31
 8000c10:	dc00      	bgt.n	8000c14 <__aeabi_dadd+0x19c>
 8000c12:	e16e      	b.n	8000ef2 <__aeabi_dadd+0x47a>
 8000c14:	003a      	movs	r2, r7
 8000c16:	4648      	mov	r0, r9
 8000c18:	3a20      	subs	r2, #32
 8000c1a:	40d0      	lsrs	r0, r2
 8000c1c:	4684      	mov	ip, r0
 8000c1e:	2f20      	cmp	r7, #32
 8000c20:	d007      	beq.n	8000c32 <__aeabi_dadd+0x1ba>
 8000c22:	2240      	movs	r2, #64	; 0x40
 8000c24:	4648      	mov	r0, r9
 8000c26:	1bd2      	subs	r2, r2, r7
 8000c28:	4090      	lsls	r0, r2
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	4640      	mov	r0, r8
 8000c2e:	4310      	orrs	r0, r2
 8000c30:	4680      	mov	r8, r0
 8000c32:	4640      	mov	r0, r8
 8000c34:	1e42      	subs	r2, r0, #1
 8000c36:	4190      	sbcs	r0, r2
 8000c38:	4662      	mov	r2, ip
 8000c3a:	0004      	movs	r4, r0
 8000c3c:	4314      	orrs	r4, r2
 8000c3e:	e057      	b.n	8000cf0 <__aeabi_dadd+0x278>
 8000c40:	464a      	mov	r2, r9
 8000c42:	4302      	orrs	r2, r0
 8000c44:	d100      	bne.n	8000c48 <__aeabi_dadd+0x1d0>
 8000c46:	e103      	b.n	8000e50 <__aeabi_dadd+0x3d8>
 8000c48:	1e7a      	subs	r2, r7, #1
 8000c4a:	2f01      	cmp	r7, #1
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_dadd+0x1d8>
 8000c4e:	e193      	b.n	8000f78 <__aeabi_dadd+0x500>
 8000c50:	4c64      	ldr	r4, [pc, #400]	; (8000de4 <__aeabi_dadd+0x36c>)
 8000c52:	42a7      	cmp	r7, r4
 8000c54:	d100      	bne.n	8000c58 <__aeabi_dadd+0x1e0>
 8000c56:	e18a      	b.n	8000f6e <__aeabi_dadd+0x4f6>
 8000c58:	0017      	movs	r7, r2
 8000c5a:	e73b      	b.n	8000ad4 <__aeabi_dadd+0x5c>
 8000c5c:	4c63      	ldr	r4, [pc, #396]	; (8000dec <__aeabi_dadd+0x374>)
 8000c5e:	1c72      	adds	r2, r6, #1
 8000c60:	4222      	tst	r2, r4
 8000c62:	d000      	beq.n	8000c66 <__aeabi_dadd+0x1ee>
 8000c64:	e0e0      	b.n	8000e28 <__aeabi_dadd+0x3b0>
 8000c66:	000a      	movs	r2, r1
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d000      	beq.n	8000c70 <__aeabi_dadd+0x1f8>
 8000c6e:	e174      	b.n	8000f5a <__aeabi_dadd+0x4e2>
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	d100      	bne.n	8000c76 <__aeabi_dadd+0x1fe>
 8000c74:	e1d0      	b.n	8001018 <__aeabi_dadd+0x5a0>
 8000c76:	464a      	mov	r2, r9
 8000c78:	4302      	orrs	r2, r0
 8000c7a:	d000      	beq.n	8000c7e <__aeabi_dadd+0x206>
 8000c7c:	e1e3      	b.n	8001046 <__aeabi_dadd+0x5ce>
 8000c7e:	074a      	lsls	r2, r1, #29
 8000c80:	08db      	lsrs	r3, r3, #3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	08c9      	lsrs	r1, r1, #3
 8000c86:	e029      	b.n	8000cdc <__aeabi_dadd+0x264>
 8000c88:	464a      	mov	r2, r9
 8000c8a:	4302      	orrs	r2, r0
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dadd+0x218>
 8000c8e:	e17d      	b.n	8000f8c <__aeabi_dadd+0x514>
 8000c90:	1e7a      	subs	r2, r7, #1
 8000c92:	2f01      	cmp	r7, #1
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x220>
 8000c96:	e0e0      	b.n	8000e5a <__aeabi_dadd+0x3e2>
 8000c98:	4c52      	ldr	r4, [pc, #328]	; (8000de4 <__aeabi_dadd+0x36c>)
 8000c9a:	42a7      	cmp	r7, r4
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_dadd+0x228>
 8000c9e:	e166      	b.n	8000f6e <__aeabi_dadd+0x4f6>
 8000ca0:	0017      	movs	r7, r2
 8000ca2:	e7b2      	b.n	8000c0a <__aeabi_dadd+0x192>
 8000ca4:	0010      	movs	r0, r2
 8000ca6:	3b1f      	subs	r3, #31
 8000ca8:	40d8      	lsrs	r0, r3
 8000caa:	2920      	cmp	r1, #32
 8000cac:	d003      	beq.n	8000cb6 <__aeabi_dadd+0x23e>
 8000cae:	2340      	movs	r3, #64	; 0x40
 8000cb0:	1a5b      	subs	r3, r3, r1
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	4314      	orrs	r4, r2
 8000cb6:	1e63      	subs	r3, r4, #1
 8000cb8:	419c      	sbcs	r4, r3
 8000cba:	2300      	movs	r3, #0
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	469a      	mov	sl, r3
 8000cc0:	4304      	orrs	r4, r0
 8000cc2:	0763      	lsls	r3, r4, #29
 8000cc4:	d000      	beq.n	8000cc8 <__aeabi_dadd+0x250>
 8000cc6:	e755      	b.n	8000b74 <__aeabi_dadd+0xfc>
 8000cc8:	4652      	mov	r2, sl
 8000cca:	08e3      	lsrs	r3, r4, #3
 8000ccc:	0752      	lsls	r2, r2, #29
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	4652      	mov	r2, sl
 8000cd2:	0037      	movs	r7, r6
 8000cd4:	08d1      	lsrs	r1, r2, #3
 8000cd6:	4a43      	ldr	r2, [pc, #268]	; (8000de4 <__aeabi_dadd+0x36c>)
 8000cd8:	4297      	cmp	r7, r2
 8000cda:	d01f      	beq.n	8000d1c <__aeabi_dadd+0x2a4>
 8000cdc:	0309      	lsls	r1, r1, #12
 8000cde:	057a      	lsls	r2, r7, #21
 8000ce0:	0b0c      	lsrs	r4, r1, #12
 8000ce2:	0d52      	lsrs	r2, r2, #21
 8000ce4:	e764      	b.n	8000bb0 <__aeabi_dadd+0x138>
 8000ce6:	4642      	mov	r2, r8
 8000ce8:	464c      	mov	r4, r9
 8000cea:	4314      	orrs	r4, r2
 8000cec:	1e62      	subs	r2, r4, #1
 8000cee:	4194      	sbcs	r4, r2
 8000cf0:	18e4      	adds	r4, r4, r3
 8000cf2:	429c      	cmp	r4, r3
 8000cf4:	4192      	sbcs	r2, r2
 8000cf6:	4252      	negs	r2, r2
 8000cf8:	4692      	mov	sl, r2
 8000cfa:	448a      	add	sl, r1
 8000cfc:	4653      	mov	r3, sl
 8000cfe:	021b      	lsls	r3, r3, #8
 8000d00:	d5df      	bpl.n	8000cc2 <__aeabi_dadd+0x24a>
 8000d02:	4b38      	ldr	r3, [pc, #224]	; (8000de4 <__aeabi_dadd+0x36c>)
 8000d04:	3601      	adds	r6, #1
 8000d06:	429e      	cmp	r6, r3
 8000d08:	d000      	beq.n	8000d0c <__aeabi_dadd+0x294>
 8000d0a:	e0b3      	b.n	8000e74 <__aeabi_dadd+0x3fc>
 8000d0c:	0032      	movs	r2, r6
 8000d0e:	2400      	movs	r4, #0
 8000d10:	2300      	movs	r3, #0
 8000d12:	e74d      	b.n	8000bb0 <__aeabi_dadd+0x138>
 8000d14:	074a      	lsls	r2, r1, #29
 8000d16:	08db      	lsrs	r3, r3, #3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	08c9      	lsrs	r1, r1, #3
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	d100      	bne.n	8000d24 <__aeabi_dadd+0x2ac>
 8000d22:	e200      	b.n	8001126 <__aeabi_dadd+0x6ae>
 8000d24:	2480      	movs	r4, #128	; 0x80
 8000d26:	0324      	lsls	r4, r4, #12
 8000d28:	430c      	orrs	r4, r1
 8000d2a:	0324      	lsls	r4, r4, #12
 8000d2c:	4a2d      	ldr	r2, [pc, #180]	; (8000de4 <__aeabi_dadd+0x36c>)
 8000d2e:	0b24      	lsrs	r4, r4, #12
 8000d30:	e73e      	b.n	8000bb0 <__aeabi_dadd+0x138>
 8000d32:	0020      	movs	r0, r4
 8000d34:	f001 f866 	bl	8001e04 <__clzsi2>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	3318      	adds	r3, #24
 8000d3c:	2b1f      	cmp	r3, #31
 8000d3e:	dc00      	bgt.n	8000d42 <__aeabi_dadd+0x2ca>
 8000d40:	e6f7      	b.n	8000b32 <__aeabi_dadd+0xba>
 8000d42:	0022      	movs	r2, r4
 8000d44:	3808      	subs	r0, #8
 8000d46:	4082      	lsls	r2, r0
 8000d48:	2400      	movs	r4, #0
 8000d4a:	42b3      	cmp	r3, r6
 8000d4c:	db00      	blt.n	8000d50 <__aeabi_dadd+0x2d8>
 8000d4e:	e6fc      	b.n	8000b4a <__aeabi_dadd+0xd2>
 8000d50:	1af6      	subs	r6, r6, r3
 8000d52:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <__aeabi_dadd+0x370>)
 8000d54:	401a      	ands	r2, r3
 8000d56:	4692      	mov	sl, r2
 8000d58:	e70a      	b.n	8000b70 <__aeabi_dadd+0xf8>
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d02b      	beq.n	8000db6 <__aeabi_dadd+0x33e>
 8000d5e:	1b97      	subs	r7, r2, r6
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d100      	bne.n	8000d66 <__aeabi_dadd+0x2ee>
 8000d64:	e0b8      	b.n	8000ed8 <__aeabi_dadd+0x460>
 8000d66:	4c1f      	ldr	r4, [pc, #124]	; (8000de4 <__aeabi_dadd+0x36c>)
 8000d68:	42a2      	cmp	r2, r4
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_dadd+0x2f6>
 8000d6c:	e11c      	b.n	8000fa8 <__aeabi_dadd+0x530>
 8000d6e:	2480      	movs	r4, #128	; 0x80
 8000d70:	0424      	lsls	r4, r4, #16
 8000d72:	4321      	orrs	r1, r4
 8000d74:	2f38      	cmp	r7, #56	; 0x38
 8000d76:	dd00      	ble.n	8000d7a <__aeabi_dadd+0x302>
 8000d78:	e11e      	b.n	8000fb8 <__aeabi_dadd+0x540>
 8000d7a:	2f1f      	cmp	r7, #31
 8000d7c:	dd00      	ble.n	8000d80 <__aeabi_dadd+0x308>
 8000d7e:	e19e      	b.n	80010be <__aeabi_dadd+0x646>
 8000d80:	2620      	movs	r6, #32
 8000d82:	000c      	movs	r4, r1
 8000d84:	1bf6      	subs	r6, r6, r7
 8000d86:	0018      	movs	r0, r3
 8000d88:	40b3      	lsls	r3, r6
 8000d8a:	40b4      	lsls	r4, r6
 8000d8c:	40f8      	lsrs	r0, r7
 8000d8e:	1e5e      	subs	r6, r3, #1
 8000d90:	41b3      	sbcs	r3, r6
 8000d92:	40f9      	lsrs	r1, r7
 8000d94:	4304      	orrs	r4, r0
 8000d96:	431c      	orrs	r4, r3
 8000d98:	4489      	add	r9, r1
 8000d9a:	4444      	add	r4, r8
 8000d9c:	4544      	cmp	r4, r8
 8000d9e:	419b      	sbcs	r3, r3
 8000da0:	425b      	negs	r3, r3
 8000da2:	444b      	add	r3, r9
 8000da4:	469a      	mov	sl, r3
 8000da6:	0016      	movs	r6, r2
 8000da8:	e7a8      	b.n	8000cfc <__aeabi_dadd+0x284>
 8000daa:	4642      	mov	r2, r8
 8000dac:	464c      	mov	r4, r9
 8000dae:	4314      	orrs	r4, r2
 8000db0:	1e62      	subs	r2, r4, #1
 8000db2:	4194      	sbcs	r4, r2
 8000db4:	e6a6      	b.n	8000b04 <__aeabi_dadd+0x8c>
 8000db6:	4c0d      	ldr	r4, [pc, #52]	; (8000dec <__aeabi_dadd+0x374>)
 8000db8:	1c72      	adds	r2, r6, #1
 8000dba:	4222      	tst	r2, r4
 8000dbc:	d000      	beq.n	8000dc0 <__aeabi_dadd+0x348>
 8000dbe:	e0a8      	b.n	8000f12 <__aeabi_dadd+0x49a>
 8000dc0:	000a      	movs	r2, r1
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	2e00      	cmp	r6, #0
 8000dc6:	d000      	beq.n	8000dca <__aeabi_dadd+0x352>
 8000dc8:	e10a      	b.n	8000fe0 <__aeabi_dadd+0x568>
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_dadd+0x358>
 8000dce:	e15e      	b.n	800108e <__aeabi_dadd+0x616>
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	4302      	orrs	r2, r0
 8000dd4:	d000      	beq.n	8000dd8 <__aeabi_dadd+0x360>
 8000dd6:	e161      	b.n	800109c <__aeabi_dadd+0x624>
 8000dd8:	074a      	lsls	r2, r1, #29
 8000dda:	08db      	lsrs	r3, r3, #3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	08c9      	lsrs	r1, r1, #3
 8000de0:	e77c      	b.n	8000cdc <__aeabi_dadd+0x264>
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	000007ff 	.word	0x000007ff
 8000de8:	ff7fffff 	.word	0xff7fffff
 8000dec:	000007fe 	.word	0x000007fe
 8000df0:	4ccf      	ldr	r4, [pc, #828]	; (8001130 <__aeabi_dadd+0x6b8>)
 8000df2:	42a2      	cmp	r2, r4
 8000df4:	d100      	bne.n	8000df8 <__aeabi_dadd+0x380>
 8000df6:	e0ce      	b.n	8000f96 <__aeabi_dadd+0x51e>
 8000df8:	2480      	movs	r4, #128	; 0x80
 8000dfa:	0424      	lsls	r4, r4, #16
 8000dfc:	4321      	orrs	r1, r4
 8000dfe:	2f38      	cmp	r7, #56	; 0x38
 8000e00:	dc5b      	bgt.n	8000eba <__aeabi_dadd+0x442>
 8000e02:	2f1f      	cmp	r7, #31
 8000e04:	dd00      	ble.n	8000e08 <__aeabi_dadd+0x390>
 8000e06:	e0dc      	b.n	8000fc2 <__aeabi_dadd+0x54a>
 8000e08:	2520      	movs	r5, #32
 8000e0a:	000c      	movs	r4, r1
 8000e0c:	1bed      	subs	r5, r5, r7
 8000e0e:	001e      	movs	r6, r3
 8000e10:	40ab      	lsls	r3, r5
 8000e12:	40ac      	lsls	r4, r5
 8000e14:	40fe      	lsrs	r6, r7
 8000e16:	1e5d      	subs	r5, r3, #1
 8000e18:	41ab      	sbcs	r3, r5
 8000e1a:	4334      	orrs	r4, r6
 8000e1c:	40f9      	lsrs	r1, r7
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	464b      	mov	r3, r9
 8000e22:	1a5b      	subs	r3, r3, r1
 8000e24:	4699      	mov	r9, r3
 8000e26:	e04c      	b.n	8000ec2 <__aeabi_dadd+0x44a>
 8000e28:	464a      	mov	r2, r9
 8000e2a:	1a1c      	subs	r4, r3, r0
 8000e2c:	1a88      	subs	r0, r1, r2
 8000e2e:	42a3      	cmp	r3, r4
 8000e30:	4192      	sbcs	r2, r2
 8000e32:	4252      	negs	r2, r2
 8000e34:	4692      	mov	sl, r2
 8000e36:	0002      	movs	r2, r0
 8000e38:	4650      	mov	r0, sl
 8000e3a:	1a12      	subs	r2, r2, r0
 8000e3c:	4692      	mov	sl, r2
 8000e3e:	0212      	lsls	r2, r2, #8
 8000e40:	d478      	bmi.n	8000f34 <__aeabi_dadd+0x4bc>
 8000e42:	4653      	mov	r3, sl
 8000e44:	4323      	orrs	r3, r4
 8000e46:	d000      	beq.n	8000e4a <__aeabi_dadd+0x3d2>
 8000e48:	e66a      	b.n	8000b20 <__aeabi_dadd+0xa8>
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2500      	movs	r5, #0
 8000e4e:	e745      	b.n	8000cdc <__aeabi_dadd+0x264>
 8000e50:	074a      	lsls	r2, r1, #29
 8000e52:	08db      	lsrs	r3, r3, #3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	08c9      	lsrs	r1, r1, #3
 8000e58:	e73d      	b.n	8000cd6 <__aeabi_dadd+0x25e>
 8000e5a:	181c      	adds	r4, r3, r0
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	419b      	sbcs	r3, r3
 8000e60:	4449      	add	r1, r9
 8000e62:	468a      	mov	sl, r1
 8000e64:	425b      	negs	r3, r3
 8000e66:	449a      	add	sl, r3
 8000e68:	4653      	mov	r3, sl
 8000e6a:	2601      	movs	r6, #1
 8000e6c:	021b      	lsls	r3, r3, #8
 8000e6e:	d400      	bmi.n	8000e72 <__aeabi_dadd+0x3fa>
 8000e70:	e727      	b.n	8000cc2 <__aeabi_dadd+0x24a>
 8000e72:	2602      	movs	r6, #2
 8000e74:	4652      	mov	r2, sl
 8000e76:	4baf      	ldr	r3, [pc, #700]	; (8001134 <__aeabi_dadd+0x6bc>)
 8000e78:	2101      	movs	r1, #1
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	4021      	ands	r1, r4
 8000e80:	0862      	lsrs	r2, r4, #1
 8000e82:	430a      	orrs	r2, r1
 8000e84:	07dc      	lsls	r4, r3, #31
 8000e86:	085b      	lsrs	r3, r3, #1
 8000e88:	469a      	mov	sl, r3
 8000e8a:	4314      	orrs	r4, r2
 8000e8c:	e670      	b.n	8000b70 <__aeabi_dadd+0xf8>
 8000e8e:	003a      	movs	r2, r7
 8000e90:	464c      	mov	r4, r9
 8000e92:	3a20      	subs	r2, #32
 8000e94:	40d4      	lsrs	r4, r2
 8000e96:	46a4      	mov	ip, r4
 8000e98:	2f20      	cmp	r7, #32
 8000e9a:	d007      	beq.n	8000eac <__aeabi_dadd+0x434>
 8000e9c:	2240      	movs	r2, #64	; 0x40
 8000e9e:	4648      	mov	r0, r9
 8000ea0:	1bd2      	subs	r2, r2, r7
 8000ea2:	4090      	lsls	r0, r2
 8000ea4:	0002      	movs	r2, r0
 8000ea6:	4640      	mov	r0, r8
 8000ea8:	4310      	orrs	r0, r2
 8000eaa:	4680      	mov	r8, r0
 8000eac:	4640      	mov	r0, r8
 8000eae:	1e42      	subs	r2, r0, #1
 8000eb0:	4190      	sbcs	r0, r2
 8000eb2:	4662      	mov	r2, ip
 8000eb4:	0004      	movs	r4, r0
 8000eb6:	4314      	orrs	r4, r2
 8000eb8:	e624      	b.n	8000b04 <__aeabi_dadd+0x8c>
 8000eba:	4319      	orrs	r1, r3
 8000ebc:	000c      	movs	r4, r1
 8000ebe:	1e63      	subs	r3, r4, #1
 8000ec0:	419c      	sbcs	r4, r3
 8000ec2:	4643      	mov	r3, r8
 8000ec4:	1b1c      	subs	r4, r3, r4
 8000ec6:	45a0      	cmp	r8, r4
 8000ec8:	419b      	sbcs	r3, r3
 8000eca:	4649      	mov	r1, r9
 8000ecc:	425b      	negs	r3, r3
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	469a      	mov	sl, r3
 8000ed2:	4665      	mov	r5, ip
 8000ed4:	0016      	movs	r6, r2
 8000ed6:	e61b      	b.n	8000b10 <__aeabi_dadd+0x98>
 8000ed8:	000c      	movs	r4, r1
 8000eda:	431c      	orrs	r4, r3
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_dadd+0x468>
 8000ede:	e0c7      	b.n	8001070 <__aeabi_dadd+0x5f8>
 8000ee0:	1e7c      	subs	r4, r7, #1
 8000ee2:	2f01      	cmp	r7, #1
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_dadd+0x470>
 8000ee6:	e0f9      	b.n	80010dc <__aeabi_dadd+0x664>
 8000ee8:	4e91      	ldr	r6, [pc, #580]	; (8001130 <__aeabi_dadd+0x6b8>)
 8000eea:	42b7      	cmp	r7, r6
 8000eec:	d05c      	beq.n	8000fa8 <__aeabi_dadd+0x530>
 8000eee:	0027      	movs	r7, r4
 8000ef0:	e740      	b.n	8000d74 <__aeabi_dadd+0x2fc>
 8000ef2:	2220      	movs	r2, #32
 8000ef4:	464c      	mov	r4, r9
 8000ef6:	4640      	mov	r0, r8
 8000ef8:	1bd2      	subs	r2, r2, r7
 8000efa:	4094      	lsls	r4, r2
 8000efc:	40f8      	lsrs	r0, r7
 8000efe:	4304      	orrs	r4, r0
 8000f00:	4640      	mov	r0, r8
 8000f02:	4090      	lsls	r0, r2
 8000f04:	1e42      	subs	r2, r0, #1
 8000f06:	4190      	sbcs	r0, r2
 8000f08:	464a      	mov	r2, r9
 8000f0a:	40fa      	lsrs	r2, r7
 8000f0c:	4304      	orrs	r4, r0
 8000f0e:	1889      	adds	r1, r1, r2
 8000f10:	e6ee      	b.n	8000cf0 <__aeabi_dadd+0x278>
 8000f12:	4c87      	ldr	r4, [pc, #540]	; (8001130 <__aeabi_dadd+0x6b8>)
 8000f14:	42a2      	cmp	r2, r4
 8000f16:	d100      	bne.n	8000f1a <__aeabi_dadd+0x4a2>
 8000f18:	e6f9      	b.n	8000d0e <__aeabi_dadd+0x296>
 8000f1a:	1818      	adds	r0, r3, r0
 8000f1c:	4298      	cmp	r0, r3
 8000f1e:	419b      	sbcs	r3, r3
 8000f20:	4449      	add	r1, r9
 8000f22:	425b      	negs	r3, r3
 8000f24:	18cb      	adds	r3, r1, r3
 8000f26:	07dc      	lsls	r4, r3, #31
 8000f28:	0840      	lsrs	r0, r0, #1
 8000f2a:	085b      	lsrs	r3, r3, #1
 8000f2c:	469a      	mov	sl, r3
 8000f2e:	0016      	movs	r6, r2
 8000f30:	4304      	orrs	r4, r0
 8000f32:	e6c6      	b.n	8000cc2 <__aeabi_dadd+0x24a>
 8000f34:	4642      	mov	r2, r8
 8000f36:	1ad4      	subs	r4, r2, r3
 8000f38:	45a0      	cmp	r8, r4
 8000f3a:	4180      	sbcs	r0, r0
 8000f3c:	464b      	mov	r3, r9
 8000f3e:	4240      	negs	r0, r0
 8000f40:	1a59      	subs	r1, r3, r1
 8000f42:	1a0b      	subs	r3, r1, r0
 8000f44:	469a      	mov	sl, r3
 8000f46:	4665      	mov	r5, ip
 8000f48:	e5ea      	b.n	8000b20 <__aeabi_dadd+0xa8>
 8000f4a:	464b      	mov	r3, r9
 8000f4c:	464a      	mov	r2, r9
 8000f4e:	08c0      	lsrs	r0, r0, #3
 8000f50:	075b      	lsls	r3, r3, #29
 8000f52:	4665      	mov	r5, ip
 8000f54:	4303      	orrs	r3, r0
 8000f56:	08d1      	lsrs	r1, r2, #3
 8000f58:	e6bd      	b.n	8000cd6 <__aeabi_dadd+0x25e>
 8000f5a:	2a00      	cmp	r2, #0
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_dadd+0x4e8>
 8000f5e:	e08e      	b.n	800107e <__aeabi_dadd+0x606>
 8000f60:	464b      	mov	r3, r9
 8000f62:	4303      	orrs	r3, r0
 8000f64:	d117      	bne.n	8000f96 <__aeabi_dadd+0x51e>
 8000f66:	2180      	movs	r1, #128	; 0x80
 8000f68:	2500      	movs	r5, #0
 8000f6a:	0309      	lsls	r1, r1, #12
 8000f6c:	e6da      	b.n	8000d24 <__aeabi_dadd+0x2ac>
 8000f6e:	074a      	lsls	r2, r1, #29
 8000f70:	08db      	lsrs	r3, r3, #3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	08c9      	lsrs	r1, r1, #3
 8000f76:	e6d1      	b.n	8000d1c <__aeabi_dadd+0x2a4>
 8000f78:	1a1c      	subs	r4, r3, r0
 8000f7a:	464a      	mov	r2, r9
 8000f7c:	42a3      	cmp	r3, r4
 8000f7e:	419b      	sbcs	r3, r3
 8000f80:	1a89      	subs	r1, r1, r2
 8000f82:	425b      	negs	r3, r3
 8000f84:	1acb      	subs	r3, r1, r3
 8000f86:	469a      	mov	sl, r3
 8000f88:	2601      	movs	r6, #1
 8000f8a:	e5c1      	b.n	8000b10 <__aeabi_dadd+0x98>
 8000f8c:	074a      	lsls	r2, r1, #29
 8000f8e:	08db      	lsrs	r3, r3, #3
 8000f90:	4313      	orrs	r3, r2
 8000f92:	08c9      	lsrs	r1, r1, #3
 8000f94:	e69f      	b.n	8000cd6 <__aeabi_dadd+0x25e>
 8000f96:	4643      	mov	r3, r8
 8000f98:	08d8      	lsrs	r0, r3, #3
 8000f9a:	464b      	mov	r3, r9
 8000f9c:	464a      	mov	r2, r9
 8000f9e:	075b      	lsls	r3, r3, #29
 8000fa0:	4665      	mov	r5, ip
 8000fa2:	4303      	orrs	r3, r0
 8000fa4:	08d1      	lsrs	r1, r2, #3
 8000fa6:	e6b9      	b.n	8000d1c <__aeabi_dadd+0x2a4>
 8000fa8:	4643      	mov	r3, r8
 8000faa:	08d8      	lsrs	r0, r3, #3
 8000fac:	464b      	mov	r3, r9
 8000fae:	464a      	mov	r2, r9
 8000fb0:	075b      	lsls	r3, r3, #29
 8000fb2:	4303      	orrs	r3, r0
 8000fb4:	08d1      	lsrs	r1, r2, #3
 8000fb6:	e6b1      	b.n	8000d1c <__aeabi_dadd+0x2a4>
 8000fb8:	4319      	orrs	r1, r3
 8000fba:	000c      	movs	r4, r1
 8000fbc:	1e63      	subs	r3, r4, #1
 8000fbe:	419c      	sbcs	r4, r3
 8000fc0:	e6eb      	b.n	8000d9a <__aeabi_dadd+0x322>
 8000fc2:	003c      	movs	r4, r7
 8000fc4:	000d      	movs	r5, r1
 8000fc6:	3c20      	subs	r4, #32
 8000fc8:	40e5      	lsrs	r5, r4
 8000fca:	2f20      	cmp	r7, #32
 8000fcc:	d003      	beq.n	8000fd6 <__aeabi_dadd+0x55e>
 8000fce:	2440      	movs	r4, #64	; 0x40
 8000fd0:	1be4      	subs	r4, r4, r7
 8000fd2:	40a1      	lsls	r1, r4
 8000fd4:	430b      	orrs	r3, r1
 8000fd6:	001c      	movs	r4, r3
 8000fd8:	1e63      	subs	r3, r4, #1
 8000fda:	419c      	sbcs	r4, r3
 8000fdc:	432c      	orrs	r4, r5
 8000fde:	e770      	b.n	8000ec2 <__aeabi_dadd+0x44a>
 8000fe0:	2a00      	cmp	r2, #0
 8000fe2:	d0e1      	beq.n	8000fa8 <__aeabi_dadd+0x530>
 8000fe4:	464a      	mov	r2, r9
 8000fe6:	4302      	orrs	r2, r0
 8000fe8:	d0c1      	beq.n	8000f6e <__aeabi_dadd+0x4f6>
 8000fea:	074a      	lsls	r2, r1, #29
 8000fec:	08db      	lsrs	r3, r3, #3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	08c9      	lsrs	r1, r1, #3
 8000ff4:	0312      	lsls	r2, r2, #12
 8000ff6:	4211      	tst	r1, r2
 8000ff8:	d008      	beq.n	800100c <__aeabi_dadd+0x594>
 8000ffa:	4648      	mov	r0, r9
 8000ffc:	08c4      	lsrs	r4, r0, #3
 8000ffe:	4214      	tst	r4, r2
 8001000:	d104      	bne.n	800100c <__aeabi_dadd+0x594>
 8001002:	4643      	mov	r3, r8
 8001004:	0021      	movs	r1, r4
 8001006:	08db      	lsrs	r3, r3, #3
 8001008:	0742      	lsls	r2, r0, #29
 800100a:	4313      	orrs	r3, r2
 800100c:	0f5a      	lsrs	r2, r3, #29
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	0752      	lsls	r2, r2, #29
 8001012:	08db      	lsrs	r3, r3, #3
 8001014:	4313      	orrs	r3, r2
 8001016:	e681      	b.n	8000d1c <__aeabi_dadd+0x2a4>
 8001018:	464b      	mov	r3, r9
 800101a:	4303      	orrs	r3, r0
 800101c:	d100      	bne.n	8001020 <__aeabi_dadd+0x5a8>
 800101e:	e714      	b.n	8000e4a <__aeabi_dadd+0x3d2>
 8001020:	464b      	mov	r3, r9
 8001022:	464a      	mov	r2, r9
 8001024:	08c0      	lsrs	r0, r0, #3
 8001026:	075b      	lsls	r3, r3, #29
 8001028:	4665      	mov	r5, ip
 800102a:	4303      	orrs	r3, r0
 800102c:	08d1      	lsrs	r1, r2, #3
 800102e:	e655      	b.n	8000cdc <__aeabi_dadd+0x264>
 8001030:	1ac4      	subs	r4, r0, r3
 8001032:	45a0      	cmp	r8, r4
 8001034:	4180      	sbcs	r0, r0
 8001036:	464b      	mov	r3, r9
 8001038:	4240      	negs	r0, r0
 800103a:	1a59      	subs	r1, r3, r1
 800103c:	1a0b      	subs	r3, r1, r0
 800103e:	469a      	mov	sl, r3
 8001040:	4665      	mov	r5, ip
 8001042:	2601      	movs	r6, #1
 8001044:	e564      	b.n	8000b10 <__aeabi_dadd+0x98>
 8001046:	1a1c      	subs	r4, r3, r0
 8001048:	464a      	mov	r2, r9
 800104a:	42a3      	cmp	r3, r4
 800104c:	4180      	sbcs	r0, r0
 800104e:	1a8a      	subs	r2, r1, r2
 8001050:	4240      	negs	r0, r0
 8001052:	1a12      	subs	r2, r2, r0
 8001054:	4692      	mov	sl, r2
 8001056:	0212      	lsls	r2, r2, #8
 8001058:	d549      	bpl.n	80010ee <__aeabi_dadd+0x676>
 800105a:	4642      	mov	r2, r8
 800105c:	1ad4      	subs	r4, r2, r3
 800105e:	45a0      	cmp	r8, r4
 8001060:	4180      	sbcs	r0, r0
 8001062:	464b      	mov	r3, r9
 8001064:	4240      	negs	r0, r0
 8001066:	1a59      	subs	r1, r3, r1
 8001068:	1a0b      	subs	r3, r1, r0
 800106a:	469a      	mov	sl, r3
 800106c:	4665      	mov	r5, ip
 800106e:	e57f      	b.n	8000b70 <__aeabi_dadd+0xf8>
 8001070:	464b      	mov	r3, r9
 8001072:	464a      	mov	r2, r9
 8001074:	08c0      	lsrs	r0, r0, #3
 8001076:	075b      	lsls	r3, r3, #29
 8001078:	4303      	orrs	r3, r0
 800107a:	08d1      	lsrs	r1, r2, #3
 800107c:	e62b      	b.n	8000cd6 <__aeabi_dadd+0x25e>
 800107e:	464a      	mov	r2, r9
 8001080:	08db      	lsrs	r3, r3, #3
 8001082:	4302      	orrs	r2, r0
 8001084:	d138      	bne.n	80010f8 <__aeabi_dadd+0x680>
 8001086:	074a      	lsls	r2, r1, #29
 8001088:	4313      	orrs	r3, r2
 800108a:	08c9      	lsrs	r1, r1, #3
 800108c:	e646      	b.n	8000d1c <__aeabi_dadd+0x2a4>
 800108e:	464b      	mov	r3, r9
 8001090:	464a      	mov	r2, r9
 8001092:	08c0      	lsrs	r0, r0, #3
 8001094:	075b      	lsls	r3, r3, #29
 8001096:	4303      	orrs	r3, r0
 8001098:	08d1      	lsrs	r1, r2, #3
 800109a:	e61f      	b.n	8000cdc <__aeabi_dadd+0x264>
 800109c:	181c      	adds	r4, r3, r0
 800109e:	429c      	cmp	r4, r3
 80010a0:	419b      	sbcs	r3, r3
 80010a2:	4449      	add	r1, r9
 80010a4:	468a      	mov	sl, r1
 80010a6:	425b      	negs	r3, r3
 80010a8:	449a      	add	sl, r3
 80010aa:	4653      	mov	r3, sl
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	d400      	bmi.n	80010b2 <__aeabi_dadd+0x63a>
 80010b0:	e607      	b.n	8000cc2 <__aeabi_dadd+0x24a>
 80010b2:	4652      	mov	r2, sl
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <__aeabi_dadd+0x6bc>)
 80010b6:	2601      	movs	r6, #1
 80010b8:	401a      	ands	r2, r3
 80010ba:	4692      	mov	sl, r2
 80010bc:	e601      	b.n	8000cc2 <__aeabi_dadd+0x24a>
 80010be:	003c      	movs	r4, r7
 80010c0:	000e      	movs	r6, r1
 80010c2:	3c20      	subs	r4, #32
 80010c4:	40e6      	lsrs	r6, r4
 80010c6:	2f20      	cmp	r7, #32
 80010c8:	d003      	beq.n	80010d2 <__aeabi_dadd+0x65a>
 80010ca:	2440      	movs	r4, #64	; 0x40
 80010cc:	1be4      	subs	r4, r4, r7
 80010ce:	40a1      	lsls	r1, r4
 80010d0:	430b      	orrs	r3, r1
 80010d2:	001c      	movs	r4, r3
 80010d4:	1e63      	subs	r3, r4, #1
 80010d6:	419c      	sbcs	r4, r3
 80010d8:	4334      	orrs	r4, r6
 80010da:	e65e      	b.n	8000d9a <__aeabi_dadd+0x322>
 80010dc:	4443      	add	r3, r8
 80010de:	4283      	cmp	r3, r0
 80010e0:	4180      	sbcs	r0, r0
 80010e2:	4449      	add	r1, r9
 80010e4:	468a      	mov	sl, r1
 80010e6:	4240      	negs	r0, r0
 80010e8:	001c      	movs	r4, r3
 80010ea:	4482      	add	sl, r0
 80010ec:	e6bc      	b.n	8000e68 <__aeabi_dadd+0x3f0>
 80010ee:	4653      	mov	r3, sl
 80010f0:	4323      	orrs	r3, r4
 80010f2:	d100      	bne.n	80010f6 <__aeabi_dadd+0x67e>
 80010f4:	e6a9      	b.n	8000e4a <__aeabi_dadd+0x3d2>
 80010f6:	e5e4      	b.n	8000cc2 <__aeabi_dadd+0x24a>
 80010f8:	074a      	lsls	r2, r1, #29
 80010fa:	4313      	orrs	r3, r2
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	08c9      	lsrs	r1, r1, #3
 8001100:	0312      	lsls	r2, r2, #12
 8001102:	4211      	tst	r1, r2
 8001104:	d009      	beq.n	800111a <__aeabi_dadd+0x6a2>
 8001106:	4648      	mov	r0, r9
 8001108:	08c4      	lsrs	r4, r0, #3
 800110a:	4214      	tst	r4, r2
 800110c:	d105      	bne.n	800111a <__aeabi_dadd+0x6a2>
 800110e:	4643      	mov	r3, r8
 8001110:	4665      	mov	r5, ip
 8001112:	0021      	movs	r1, r4
 8001114:	08db      	lsrs	r3, r3, #3
 8001116:	0742      	lsls	r2, r0, #29
 8001118:	4313      	orrs	r3, r2
 800111a:	0f5a      	lsrs	r2, r3, #29
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	08db      	lsrs	r3, r3, #3
 8001120:	0752      	lsls	r2, r2, #29
 8001122:	4313      	orrs	r3, r2
 8001124:	e5fa      	b.n	8000d1c <__aeabi_dadd+0x2a4>
 8001126:	2300      	movs	r3, #0
 8001128:	4a01      	ldr	r2, [pc, #4]	; (8001130 <__aeabi_dadd+0x6b8>)
 800112a:	001c      	movs	r4, r3
 800112c:	e540      	b.n	8000bb0 <__aeabi_dadd+0x138>
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	000007ff 	.word	0x000007ff
 8001134:	ff7fffff 	.word	0xff7fffff

08001138 <__aeabi_ddiv>:
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	4657      	mov	r7, sl
 800113c:	464e      	mov	r6, r9
 800113e:	4645      	mov	r5, r8
 8001140:	46de      	mov	lr, fp
 8001142:	b5e0      	push	{r5, r6, r7, lr}
 8001144:	030c      	lsls	r4, r1, #12
 8001146:	001f      	movs	r7, r3
 8001148:	004b      	lsls	r3, r1, #1
 800114a:	4681      	mov	r9, r0
 800114c:	4692      	mov	sl, r2
 800114e:	0005      	movs	r5, r0
 8001150:	b085      	sub	sp, #20
 8001152:	0b24      	lsrs	r4, r4, #12
 8001154:	0d5b      	lsrs	r3, r3, #21
 8001156:	0fce      	lsrs	r6, r1, #31
 8001158:	2b00      	cmp	r3, #0
 800115a:	d100      	bne.n	800115e <__aeabi_ddiv+0x26>
 800115c:	e152      	b.n	8001404 <__aeabi_ddiv+0x2cc>
 800115e:	4ad2      	ldr	r2, [pc, #840]	; (80014a8 <__aeabi_ddiv+0x370>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d100      	bne.n	8001166 <__aeabi_ddiv+0x2e>
 8001164:	e16e      	b.n	8001444 <__aeabi_ddiv+0x30c>
 8001166:	0f42      	lsrs	r2, r0, #29
 8001168:	00e4      	lsls	r4, r4, #3
 800116a:	4314      	orrs	r4, r2
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	0412      	lsls	r2, r2, #16
 8001170:	4322      	orrs	r2, r4
 8001172:	4690      	mov	r8, r2
 8001174:	4acd      	ldr	r2, [pc, #820]	; (80014ac <__aeabi_ddiv+0x374>)
 8001176:	00c5      	lsls	r5, r0, #3
 8001178:	4693      	mov	fp, r2
 800117a:	449b      	add	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	033c      	lsls	r4, r7, #12
 8001184:	007b      	lsls	r3, r7, #1
 8001186:	4650      	mov	r0, sl
 8001188:	0b24      	lsrs	r4, r4, #12
 800118a:	0d5b      	lsrs	r3, r3, #21
 800118c:	0fff      	lsrs	r7, r7, #31
 800118e:	2b00      	cmp	r3, #0
 8001190:	d100      	bne.n	8001194 <__aeabi_ddiv+0x5c>
 8001192:	e11a      	b.n	80013ca <__aeabi_ddiv+0x292>
 8001194:	4ac4      	ldr	r2, [pc, #784]	; (80014a8 <__aeabi_ddiv+0x370>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d100      	bne.n	800119c <__aeabi_ddiv+0x64>
 800119a:	e15e      	b.n	800145a <__aeabi_ddiv+0x322>
 800119c:	0f42      	lsrs	r2, r0, #29
 800119e:	00e4      	lsls	r4, r4, #3
 80011a0:	4322      	orrs	r2, r4
 80011a2:	2480      	movs	r4, #128	; 0x80
 80011a4:	0424      	lsls	r4, r4, #16
 80011a6:	4314      	orrs	r4, r2
 80011a8:	4ac0      	ldr	r2, [pc, #768]	; (80014ac <__aeabi_ddiv+0x374>)
 80011aa:	00c1      	lsls	r1, r0, #3
 80011ac:	4694      	mov	ip, r2
 80011ae:	465a      	mov	r2, fp
 80011b0:	4463      	add	r3, ip
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	469b      	mov	fp, r3
 80011b6:	2000      	movs	r0, #0
 80011b8:	0033      	movs	r3, r6
 80011ba:	407b      	eors	r3, r7
 80011bc:	469a      	mov	sl, r3
 80011be:	464b      	mov	r3, r9
 80011c0:	2b0f      	cmp	r3, #15
 80011c2:	d827      	bhi.n	8001214 <__aeabi_ddiv+0xdc>
 80011c4:	4aba      	ldr	r2, [pc, #744]	; (80014b0 <__aeabi_ddiv+0x378>)
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	58d3      	ldr	r3, [r2, r3]
 80011ca:	469f      	mov	pc, r3
 80011cc:	46b2      	mov	sl, r6
 80011ce:	9b00      	ldr	r3, [sp, #0]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d016      	beq.n	8001202 <__aeabi_ddiv+0xca>
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d100      	bne.n	80011da <__aeabi_ddiv+0xa2>
 80011d8:	e287      	b.n	80016ea <__aeabi_ddiv+0x5b2>
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d000      	beq.n	80011e0 <__aeabi_ddiv+0xa8>
 80011de:	e0d5      	b.n	800138c <__aeabi_ddiv+0x254>
 80011e0:	2300      	movs	r3, #0
 80011e2:	2200      	movs	r2, #0
 80011e4:	2500      	movs	r5, #0
 80011e6:	051b      	lsls	r3, r3, #20
 80011e8:	4313      	orrs	r3, r2
 80011ea:	4652      	mov	r2, sl
 80011ec:	07d2      	lsls	r2, r2, #31
 80011ee:	4313      	orrs	r3, r2
 80011f0:	0028      	movs	r0, r5
 80011f2:	0019      	movs	r1, r3
 80011f4:	b005      	add	sp, #20
 80011f6:	bcf0      	pop	{r4, r5, r6, r7}
 80011f8:	46bb      	mov	fp, r7
 80011fa:	46b2      	mov	sl, r6
 80011fc:	46a9      	mov	r9, r5
 80011fe:	46a0      	mov	r8, r4
 8001200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001202:	2200      	movs	r2, #0
 8001204:	2500      	movs	r5, #0
 8001206:	4ba8      	ldr	r3, [pc, #672]	; (80014a8 <__aeabi_ddiv+0x370>)
 8001208:	e7ed      	b.n	80011e6 <__aeabi_ddiv+0xae>
 800120a:	46ba      	mov	sl, r7
 800120c:	46a0      	mov	r8, r4
 800120e:	000d      	movs	r5, r1
 8001210:	9000      	str	r0, [sp, #0]
 8001212:	e7dc      	b.n	80011ce <__aeabi_ddiv+0x96>
 8001214:	4544      	cmp	r4, r8
 8001216:	d200      	bcs.n	800121a <__aeabi_ddiv+0xe2>
 8001218:	e1c4      	b.n	80015a4 <__aeabi_ddiv+0x46c>
 800121a:	d100      	bne.n	800121e <__aeabi_ddiv+0xe6>
 800121c:	e1bf      	b.n	800159e <__aeabi_ddiv+0x466>
 800121e:	2301      	movs	r3, #1
 8001220:	425b      	negs	r3, r3
 8001222:	469c      	mov	ip, r3
 8001224:	002e      	movs	r6, r5
 8001226:	4640      	mov	r0, r8
 8001228:	2500      	movs	r5, #0
 800122a:	44e3      	add	fp, ip
 800122c:	0223      	lsls	r3, r4, #8
 800122e:	0e0c      	lsrs	r4, r1, #24
 8001230:	431c      	orrs	r4, r3
 8001232:	0c1b      	lsrs	r3, r3, #16
 8001234:	4699      	mov	r9, r3
 8001236:	0423      	lsls	r3, r4, #16
 8001238:	020a      	lsls	r2, r1, #8
 800123a:	0c1f      	lsrs	r7, r3, #16
 800123c:	4649      	mov	r1, r9
 800123e:	9200      	str	r2, [sp, #0]
 8001240:	9701      	str	r7, [sp, #4]
 8001242:	f7ff f803 	bl	800024c <__aeabi_uidivmod>
 8001246:	0002      	movs	r2, r0
 8001248:	437a      	muls	r2, r7
 800124a:	040b      	lsls	r3, r1, #16
 800124c:	0c31      	lsrs	r1, r6, #16
 800124e:	4680      	mov	r8, r0
 8001250:	4319      	orrs	r1, r3
 8001252:	428a      	cmp	r2, r1
 8001254:	d907      	bls.n	8001266 <__aeabi_ddiv+0x12e>
 8001256:	2301      	movs	r3, #1
 8001258:	425b      	negs	r3, r3
 800125a:	469c      	mov	ip, r3
 800125c:	1909      	adds	r1, r1, r4
 800125e:	44e0      	add	r8, ip
 8001260:	428c      	cmp	r4, r1
 8001262:	d800      	bhi.n	8001266 <__aeabi_ddiv+0x12e>
 8001264:	e201      	b.n	800166a <__aeabi_ddiv+0x532>
 8001266:	1a88      	subs	r0, r1, r2
 8001268:	4649      	mov	r1, r9
 800126a:	f7fe ffef 	bl	800024c <__aeabi_uidivmod>
 800126e:	9a01      	ldr	r2, [sp, #4]
 8001270:	0436      	lsls	r6, r6, #16
 8001272:	4342      	muls	r2, r0
 8001274:	0409      	lsls	r1, r1, #16
 8001276:	0c36      	lsrs	r6, r6, #16
 8001278:	0003      	movs	r3, r0
 800127a:	430e      	orrs	r6, r1
 800127c:	42b2      	cmp	r2, r6
 800127e:	d904      	bls.n	800128a <__aeabi_ddiv+0x152>
 8001280:	1936      	adds	r6, r6, r4
 8001282:	3b01      	subs	r3, #1
 8001284:	42b4      	cmp	r4, r6
 8001286:	d800      	bhi.n	800128a <__aeabi_ddiv+0x152>
 8001288:	e1e9      	b.n	800165e <__aeabi_ddiv+0x526>
 800128a:	1ab0      	subs	r0, r6, r2
 800128c:	4642      	mov	r2, r8
 800128e:	9e00      	ldr	r6, [sp, #0]
 8001290:	0412      	lsls	r2, r2, #16
 8001292:	431a      	orrs	r2, r3
 8001294:	0c33      	lsrs	r3, r6, #16
 8001296:	001f      	movs	r7, r3
 8001298:	0c11      	lsrs	r1, r2, #16
 800129a:	4690      	mov	r8, r2
 800129c:	9302      	str	r3, [sp, #8]
 800129e:	0413      	lsls	r3, r2, #16
 80012a0:	0432      	lsls	r2, r6, #16
 80012a2:	0c16      	lsrs	r6, r2, #16
 80012a4:	0032      	movs	r2, r6
 80012a6:	0c1b      	lsrs	r3, r3, #16
 80012a8:	435a      	muls	r2, r3
 80012aa:	9603      	str	r6, [sp, #12]
 80012ac:	437b      	muls	r3, r7
 80012ae:	434e      	muls	r6, r1
 80012b0:	4379      	muls	r1, r7
 80012b2:	0c17      	lsrs	r7, r2, #16
 80012b4:	46bc      	mov	ip, r7
 80012b6:	199b      	adds	r3, r3, r6
 80012b8:	4463      	add	r3, ip
 80012ba:	429e      	cmp	r6, r3
 80012bc:	d903      	bls.n	80012c6 <__aeabi_ddiv+0x18e>
 80012be:	2680      	movs	r6, #128	; 0x80
 80012c0:	0276      	lsls	r6, r6, #9
 80012c2:	46b4      	mov	ip, r6
 80012c4:	4461      	add	r1, ip
 80012c6:	0c1e      	lsrs	r6, r3, #16
 80012c8:	1871      	adds	r1, r6, r1
 80012ca:	0416      	lsls	r6, r2, #16
 80012cc:	041b      	lsls	r3, r3, #16
 80012ce:	0c36      	lsrs	r6, r6, #16
 80012d0:	199e      	adds	r6, r3, r6
 80012d2:	4288      	cmp	r0, r1
 80012d4:	d302      	bcc.n	80012dc <__aeabi_ddiv+0x1a4>
 80012d6:	d112      	bne.n	80012fe <__aeabi_ddiv+0x1c6>
 80012d8:	42b5      	cmp	r5, r6
 80012da:	d210      	bcs.n	80012fe <__aeabi_ddiv+0x1c6>
 80012dc:	4643      	mov	r3, r8
 80012de:	1e5a      	subs	r2, r3, #1
 80012e0:	9b00      	ldr	r3, [sp, #0]
 80012e2:	469c      	mov	ip, r3
 80012e4:	4465      	add	r5, ip
 80012e6:	001f      	movs	r7, r3
 80012e8:	429d      	cmp	r5, r3
 80012ea:	419b      	sbcs	r3, r3
 80012ec:	425b      	negs	r3, r3
 80012ee:	191b      	adds	r3, r3, r4
 80012f0:	18c0      	adds	r0, r0, r3
 80012f2:	4284      	cmp	r4, r0
 80012f4:	d200      	bcs.n	80012f8 <__aeabi_ddiv+0x1c0>
 80012f6:	e19e      	b.n	8001636 <__aeabi_ddiv+0x4fe>
 80012f8:	d100      	bne.n	80012fc <__aeabi_ddiv+0x1c4>
 80012fa:	e199      	b.n	8001630 <__aeabi_ddiv+0x4f8>
 80012fc:	4690      	mov	r8, r2
 80012fe:	1bae      	subs	r6, r5, r6
 8001300:	42b5      	cmp	r5, r6
 8001302:	41ad      	sbcs	r5, r5
 8001304:	1a40      	subs	r0, r0, r1
 8001306:	426d      	negs	r5, r5
 8001308:	1b40      	subs	r0, r0, r5
 800130a:	4284      	cmp	r4, r0
 800130c:	d100      	bne.n	8001310 <__aeabi_ddiv+0x1d8>
 800130e:	e1d2      	b.n	80016b6 <__aeabi_ddiv+0x57e>
 8001310:	4649      	mov	r1, r9
 8001312:	f7fe ff9b 	bl	800024c <__aeabi_uidivmod>
 8001316:	9a01      	ldr	r2, [sp, #4]
 8001318:	040b      	lsls	r3, r1, #16
 800131a:	4342      	muls	r2, r0
 800131c:	0c31      	lsrs	r1, r6, #16
 800131e:	0005      	movs	r5, r0
 8001320:	4319      	orrs	r1, r3
 8001322:	428a      	cmp	r2, r1
 8001324:	d900      	bls.n	8001328 <__aeabi_ddiv+0x1f0>
 8001326:	e16c      	b.n	8001602 <__aeabi_ddiv+0x4ca>
 8001328:	1a88      	subs	r0, r1, r2
 800132a:	4649      	mov	r1, r9
 800132c:	f7fe ff8e 	bl	800024c <__aeabi_uidivmod>
 8001330:	9a01      	ldr	r2, [sp, #4]
 8001332:	0436      	lsls	r6, r6, #16
 8001334:	4342      	muls	r2, r0
 8001336:	0409      	lsls	r1, r1, #16
 8001338:	0c36      	lsrs	r6, r6, #16
 800133a:	0003      	movs	r3, r0
 800133c:	430e      	orrs	r6, r1
 800133e:	42b2      	cmp	r2, r6
 8001340:	d900      	bls.n	8001344 <__aeabi_ddiv+0x20c>
 8001342:	e153      	b.n	80015ec <__aeabi_ddiv+0x4b4>
 8001344:	9803      	ldr	r0, [sp, #12]
 8001346:	1ab6      	subs	r6, r6, r2
 8001348:	0002      	movs	r2, r0
 800134a:	042d      	lsls	r5, r5, #16
 800134c:	431d      	orrs	r5, r3
 800134e:	9f02      	ldr	r7, [sp, #8]
 8001350:	042b      	lsls	r3, r5, #16
 8001352:	0c1b      	lsrs	r3, r3, #16
 8001354:	435a      	muls	r2, r3
 8001356:	437b      	muls	r3, r7
 8001358:	469c      	mov	ip, r3
 800135a:	0c29      	lsrs	r1, r5, #16
 800135c:	4348      	muls	r0, r1
 800135e:	0c13      	lsrs	r3, r2, #16
 8001360:	4484      	add	ip, r0
 8001362:	4463      	add	r3, ip
 8001364:	4379      	muls	r1, r7
 8001366:	4298      	cmp	r0, r3
 8001368:	d903      	bls.n	8001372 <__aeabi_ddiv+0x23a>
 800136a:	2080      	movs	r0, #128	; 0x80
 800136c:	0240      	lsls	r0, r0, #9
 800136e:	4684      	mov	ip, r0
 8001370:	4461      	add	r1, ip
 8001372:	0c18      	lsrs	r0, r3, #16
 8001374:	0412      	lsls	r2, r2, #16
 8001376:	041b      	lsls	r3, r3, #16
 8001378:	0c12      	lsrs	r2, r2, #16
 800137a:	1840      	adds	r0, r0, r1
 800137c:	189b      	adds	r3, r3, r2
 800137e:	4286      	cmp	r6, r0
 8001380:	d200      	bcs.n	8001384 <__aeabi_ddiv+0x24c>
 8001382:	e100      	b.n	8001586 <__aeabi_ddiv+0x44e>
 8001384:	d100      	bne.n	8001388 <__aeabi_ddiv+0x250>
 8001386:	e0fb      	b.n	8001580 <__aeabi_ddiv+0x448>
 8001388:	2301      	movs	r3, #1
 800138a:	431d      	orrs	r5, r3
 800138c:	4b49      	ldr	r3, [pc, #292]	; (80014b4 <__aeabi_ddiv+0x37c>)
 800138e:	445b      	add	r3, fp
 8001390:	2b00      	cmp	r3, #0
 8001392:	dc00      	bgt.n	8001396 <__aeabi_ddiv+0x25e>
 8001394:	e0aa      	b.n	80014ec <__aeabi_ddiv+0x3b4>
 8001396:	076a      	lsls	r2, r5, #29
 8001398:	d000      	beq.n	800139c <__aeabi_ddiv+0x264>
 800139a:	e13d      	b.n	8001618 <__aeabi_ddiv+0x4e0>
 800139c:	08e9      	lsrs	r1, r5, #3
 800139e:	4642      	mov	r2, r8
 80013a0:	01d2      	lsls	r2, r2, #7
 80013a2:	d506      	bpl.n	80013b2 <__aeabi_ddiv+0x27a>
 80013a4:	4642      	mov	r2, r8
 80013a6:	4b44      	ldr	r3, [pc, #272]	; (80014b8 <__aeabi_ddiv+0x380>)
 80013a8:	401a      	ands	r2, r3
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	4690      	mov	r8, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	445b      	add	r3, fp
 80013b2:	4a42      	ldr	r2, [pc, #264]	; (80014bc <__aeabi_ddiv+0x384>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	dd00      	ble.n	80013ba <__aeabi_ddiv+0x282>
 80013b8:	e723      	b.n	8001202 <__aeabi_ddiv+0xca>
 80013ba:	4642      	mov	r2, r8
 80013bc:	055b      	lsls	r3, r3, #21
 80013be:	0755      	lsls	r5, r2, #29
 80013c0:	0252      	lsls	r2, r2, #9
 80013c2:	430d      	orrs	r5, r1
 80013c4:	0b12      	lsrs	r2, r2, #12
 80013c6:	0d5b      	lsrs	r3, r3, #21
 80013c8:	e70d      	b.n	80011e6 <__aeabi_ddiv+0xae>
 80013ca:	4651      	mov	r1, sl
 80013cc:	4321      	orrs	r1, r4
 80013ce:	d100      	bne.n	80013d2 <__aeabi_ddiv+0x29a>
 80013d0:	e07c      	b.n	80014cc <__aeabi_ddiv+0x394>
 80013d2:	2c00      	cmp	r4, #0
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x2a0>
 80013d6:	e0fb      	b.n	80015d0 <__aeabi_ddiv+0x498>
 80013d8:	0020      	movs	r0, r4
 80013da:	f000 fd13 	bl	8001e04 <__clzsi2>
 80013de:	0002      	movs	r2, r0
 80013e0:	3a0b      	subs	r2, #11
 80013e2:	231d      	movs	r3, #29
 80013e4:	1a9b      	subs	r3, r3, r2
 80013e6:	4652      	mov	r2, sl
 80013e8:	0001      	movs	r1, r0
 80013ea:	40da      	lsrs	r2, r3
 80013ec:	4653      	mov	r3, sl
 80013ee:	3908      	subs	r1, #8
 80013f0:	408b      	lsls	r3, r1
 80013f2:	408c      	lsls	r4, r1
 80013f4:	0019      	movs	r1, r3
 80013f6:	4314      	orrs	r4, r2
 80013f8:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <__aeabi_ddiv+0x388>)
 80013fa:	4458      	add	r0, fp
 80013fc:	469b      	mov	fp, r3
 80013fe:	4483      	add	fp, r0
 8001400:	2000      	movs	r0, #0
 8001402:	e6d9      	b.n	80011b8 <__aeabi_ddiv+0x80>
 8001404:	0003      	movs	r3, r0
 8001406:	4323      	orrs	r3, r4
 8001408:	4698      	mov	r8, r3
 800140a:	d044      	beq.n	8001496 <__aeabi_ddiv+0x35e>
 800140c:	2c00      	cmp	r4, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_ddiv+0x2da>
 8001410:	e0cf      	b.n	80015b2 <__aeabi_ddiv+0x47a>
 8001412:	0020      	movs	r0, r4
 8001414:	f000 fcf6 	bl	8001e04 <__clzsi2>
 8001418:	0001      	movs	r1, r0
 800141a:	0002      	movs	r2, r0
 800141c:	390b      	subs	r1, #11
 800141e:	231d      	movs	r3, #29
 8001420:	1a5b      	subs	r3, r3, r1
 8001422:	4649      	mov	r1, r9
 8001424:	0010      	movs	r0, r2
 8001426:	40d9      	lsrs	r1, r3
 8001428:	3808      	subs	r0, #8
 800142a:	4084      	lsls	r4, r0
 800142c:	000b      	movs	r3, r1
 800142e:	464d      	mov	r5, r9
 8001430:	4323      	orrs	r3, r4
 8001432:	4698      	mov	r8, r3
 8001434:	4085      	lsls	r5, r0
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <__aeabi_ddiv+0x38c>)
 8001438:	1a9b      	subs	r3, r3, r2
 800143a:	469b      	mov	fp, r3
 800143c:	2300      	movs	r3, #0
 800143e:	4699      	mov	r9, r3
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	e69e      	b.n	8001182 <__aeabi_ddiv+0x4a>
 8001444:	0002      	movs	r2, r0
 8001446:	4322      	orrs	r2, r4
 8001448:	4690      	mov	r8, r2
 800144a:	d11d      	bne.n	8001488 <__aeabi_ddiv+0x350>
 800144c:	2208      	movs	r2, #8
 800144e:	469b      	mov	fp, r3
 8001450:	2302      	movs	r3, #2
 8001452:	2500      	movs	r5, #0
 8001454:	4691      	mov	r9, r2
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	e693      	b.n	8001182 <__aeabi_ddiv+0x4a>
 800145a:	4651      	mov	r1, sl
 800145c:	4321      	orrs	r1, r4
 800145e:	d109      	bne.n	8001474 <__aeabi_ddiv+0x33c>
 8001460:	2302      	movs	r3, #2
 8001462:	464a      	mov	r2, r9
 8001464:	431a      	orrs	r2, r3
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <__aeabi_ddiv+0x390>)
 8001468:	4691      	mov	r9, r2
 800146a:	469c      	mov	ip, r3
 800146c:	2400      	movs	r4, #0
 800146e:	2002      	movs	r0, #2
 8001470:	44e3      	add	fp, ip
 8001472:	e6a1      	b.n	80011b8 <__aeabi_ddiv+0x80>
 8001474:	2303      	movs	r3, #3
 8001476:	464a      	mov	r2, r9
 8001478:	431a      	orrs	r2, r3
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <__aeabi_ddiv+0x390>)
 800147c:	4691      	mov	r9, r2
 800147e:	469c      	mov	ip, r3
 8001480:	4651      	mov	r1, sl
 8001482:	2003      	movs	r0, #3
 8001484:	44e3      	add	fp, ip
 8001486:	e697      	b.n	80011b8 <__aeabi_ddiv+0x80>
 8001488:	220c      	movs	r2, #12
 800148a:	469b      	mov	fp, r3
 800148c:	2303      	movs	r3, #3
 800148e:	46a0      	mov	r8, r4
 8001490:	4691      	mov	r9, r2
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	e675      	b.n	8001182 <__aeabi_ddiv+0x4a>
 8001496:	2304      	movs	r3, #4
 8001498:	4699      	mov	r9, r3
 800149a:	2300      	movs	r3, #0
 800149c:	469b      	mov	fp, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	2500      	movs	r5, #0
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	e66d      	b.n	8001182 <__aeabi_ddiv+0x4a>
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	000007ff 	.word	0x000007ff
 80014ac:	fffffc01 	.word	0xfffffc01
 80014b0:	08007468 	.word	0x08007468
 80014b4:	000003ff 	.word	0x000003ff
 80014b8:	feffffff 	.word	0xfeffffff
 80014bc:	000007fe 	.word	0x000007fe
 80014c0:	000003f3 	.word	0x000003f3
 80014c4:	fffffc0d 	.word	0xfffffc0d
 80014c8:	fffff801 	.word	0xfffff801
 80014cc:	464a      	mov	r2, r9
 80014ce:	2301      	movs	r3, #1
 80014d0:	431a      	orrs	r2, r3
 80014d2:	4691      	mov	r9, r2
 80014d4:	2400      	movs	r4, #0
 80014d6:	2001      	movs	r0, #1
 80014d8:	e66e      	b.n	80011b8 <__aeabi_ddiv+0x80>
 80014da:	2300      	movs	r3, #0
 80014dc:	2280      	movs	r2, #128	; 0x80
 80014de:	469a      	mov	sl, r3
 80014e0:	2500      	movs	r5, #0
 80014e2:	4b88      	ldr	r3, [pc, #544]	; (8001704 <__aeabi_ddiv+0x5cc>)
 80014e4:	0312      	lsls	r2, r2, #12
 80014e6:	e67e      	b.n	80011e6 <__aeabi_ddiv+0xae>
 80014e8:	2501      	movs	r5, #1
 80014ea:	426d      	negs	r5, r5
 80014ec:	2201      	movs	r2, #1
 80014ee:	1ad2      	subs	r2, r2, r3
 80014f0:	2a38      	cmp	r2, #56	; 0x38
 80014f2:	dd00      	ble.n	80014f6 <__aeabi_ddiv+0x3be>
 80014f4:	e674      	b.n	80011e0 <__aeabi_ddiv+0xa8>
 80014f6:	2a1f      	cmp	r2, #31
 80014f8:	dc00      	bgt.n	80014fc <__aeabi_ddiv+0x3c4>
 80014fa:	e0bd      	b.n	8001678 <__aeabi_ddiv+0x540>
 80014fc:	211f      	movs	r1, #31
 80014fe:	4249      	negs	r1, r1
 8001500:	1acb      	subs	r3, r1, r3
 8001502:	4641      	mov	r1, r8
 8001504:	40d9      	lsrs	r1, r3
 8001506:	000b      	movs	r3, r1
 8001508:	2a20      	cmp	r2, #32
 800150a:	d004      	beq.n	8001516 <__aeabi_ddiv+0x3de>
 800150c:	4641      	mov	r1, r8
 800150e:	4a7e      	ldr	r2, [pc, #504]	; (8001708 <__aeabi_ddiv+0x5d0>)
 8001510:	445a      	add	r2, fp
 8001512:	4091      	lsls	r1, r2
 8001514:	430d      	orrs	r5, r1
 8001516:	0029      	movs	r1, r5
 8001518:	1e4a      	subs	r2, r1, #1
 800151a:	4191      	sbcs	r1, r2
 800151c:	4319      	orrs	r1, r3
 800151e:	2307      	movs	r3, #7
 8001520:	001d      	movs	r5, r3
 8001522:	2200      	movs	r2, #0
 8001524:	400d      	ands	r5, r1
 8001526:	420b      	tst	r3, r1
 8001528:	d100      	bne.n	800152c <__aeabi_ddiv+0x3f4>
 800152a:	e0d0      	b.n	80016ce <__aeabi_ddiv+0x596>
 800152c:	220f      	movs	r2, #15
 800152e:	2300      	movs	r3, #0
 8001530:	400a      	ands	r2, r1
 8001532:	2a04      	cmp	r2, #4
 8001534:	d100      	bne.n	8001538 <__aeabi_ddiv+0x400>
 8001536:	e0c7      	b.n	80016c8 <__aeabi_ddiv+0x590>
 8001538:	1d0a      	adds	r2, r1, #4
 800153a:	428a      	cmp	r2, r1
 800153c:	4189      	sbcs	r1, r1
 800153e:	4249      	negs	r1, r1
 8001540:	185b      	adds	r3, r3, r1
 8001542:	0011      	movs	r1, r2
 8001544:	021a      	lsls	r2, r3, #8
 8001546:	d400      	bmi.n	800154a <__aeabi_ddiv+0x412>
 8001548:	e0be      	b.n	80016c8 <__aeabi_ddiv+0x590>
 800154a:	2301      	movs	r3, #1
 800154c:	2200      	movs	r2, #0
 800154e:	2500      	movs	r5, #0
 8001550:	e649      	b.n	80011e6 <__aeabi_ddiv+0xae>
 8001552:	2280      	movs	r2, #128	; 0x80
 8001554:	4643      	mov	r3, r8
 8001556:	0312      	lsls	r2, r2, #12
 8001558:	4213      	tst	r3, r2
 800155a:	d008      	beq.n	800156e <__aeabi_ddiv+0x436>
 800155c:	4214      	tst	r4, r2
 800155e:	d106      	bne.n	800156e <__aeabi_ddiv+0x436>
 8001560:	4322      	orrs	r2, r4
 8001562:	0312      	lsls	r2, r2, #12
 8001564:	46ba      	mov	sl, r7
 8001566:	000d      	movs	r5, r1
 8001568:	4b66      	ldr	r3, [pc, #408]	; (8001704 <__aeabi_ddiv+0x5cc>)
 800156a:	0b12      	lsrs	r2, r2, #12
 800156c:	e63b      	b.n	80011e6 <__aeabi_ddiv+0xae>
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	4643      	mov	r3, r8
 8001572:	0312      	lsls	r2, r2, #12
 8001574:	431a      	orrs	r2, r3
 8001576:	0312      	lsls	r2, r2, #12
 8001578:	46b2      	mov	sl, r6
 800157a:	4b62      	ldr	r3, [pc, #392]	; (8001704 <__aeabi_ddiv+0x5cc>)
 800157c:	0b12      	lsrs	r2, r2, #12
 800157e:	e632      	b.n	80011e6 <__aeabi_ddiv+0xae>
 8001580:	2b00      	cmp	r3, #0
 8001582:	d100      	bne.n	8001586 <__aeabi_ddiv+0x44e>
 8001584:	e702      	b.n	800138c <__aeabi_ddiv+0x254>
 8001586:	19a6      	adds	r6, r4, r6
 8001588:	1e6a      	subs	r2, r5, #1
 800158a:	42a6      	cmp	r6, r4
 800158c:	d200      	bcs.n	8001590 <__aeabi_ddiv+0x458>
 800158e:	e089      	b.n	80016a4 <__aeabi_ddiv+0x56c>
 8001590:	4286      	cmp	r6, r0
 8001592:	d200      	bcs.n	8001596 <__aeabi_ddiv+0x45e>
 8001594:	e09f      	b.n	80016d6 <__aeabi_ddiv+0x59e>
 8001596:	d100      	bne.n	800159a <__aeabi_ddiv+0x462>
 8001598:	e0af      	b.n	80016fa <__aeabi_ddiv+0x5c2>
 800159a:	0015      	movs	r5, r2
 800159c:	e6f4      	b.n	8001388 <__aeabi_ddiv+0x250>
 800159e:	42a9      	cmp	r1, r5
 80015a0:	d900      	bls.n	80015a4 <__aeabi_ddiv+0x46c>
 80015a2:	e63c      	b.n	800121e <__aeabi_ddiv+0xe6>
 80015a4:	4643      	mov	r3, r8
 80015a6:	07de      	lsls	r6, r3, #31
 80015a8:	0858      	lsrs	r0, r3, #1
 80015aa:	086b      	lsrs	r3, r5, #1
 80015ac:	431e      	orrs	r6, r3
 80015ae:	07ed      	lsls	r5, r5, #31
 80015b0:	e63c      	b.n	800122c <__aeabi_ddiv+0xf4>
 80015b2:	f000 fc27 	bl	8001e04 <__clzsi2>
 80015b6:	0001      	movs	r1, r0
 80015b8:	0002      	movs	r2, r0
 80015ba:	3115      	adds	r1, #21
 80015bc:	3220      	adds	r2, #32
 80015be:	291c      	cmp	r1, #28
 80015c0:	dc00      	bgt.n	80015c4 <__aeabi_ddiv+0x48c>
 80015c2:	e72c      	b.n	800141e <__aeabi_ddiv+0x2e6>
 80015c4:	464b      	mov	r3, r9
 80015c6:	3808      	subs	r0, #8
 80015c8:	4083      	lsls	r3, r0
 80015ca:	2500      	movs	r5, #0
 80015cc:	4698      	mov	r8, r3
 80015ce:	e732      	b.n	8001436 <__aeabi_ddiv+0x2fe>
 80015d0:	f000 fc18 	bl	8001e04 <__clzsi2>
 80015d4:	0003      	movs	r3, r0
 80015d6:	001a      	movs	r2, r3
 80015d8:	3215      	adds	r2, #21
 80015da:	3020      	adds	r0, #32
 80015dc:	2a1c      	cmp	r2, #28
 80015de:	dc00      	bgt.n	80015e2 <__aeabi_ddiv+0x4aa>
 80015e0:	e6ff      	b.n	80013e2 <__aeabi_ddiv+0x2aa>
 80015e2:	4654      	mov	r4, sl
 80015e4:	3b08      	subs	r3, #8
 80015e6:	2100      	movs	r1, #0
 80015e8:	409c      	lsls	r4, r3
 80015ea:	e705      	b.n	80013f8 <__aeabi_ddiv+0x2c0>
 80015ec:	1936      	adds	r6, r6, r4
 80015ee:	3b01      	subs	r3, #1
 80015f0:	42b4      	cmp	r4, r6
 80015f2:	d900      	bls.n	80015f6 <__aeabi_ddiv+0x4be>
 80015f4:	e6a6      	b.n	8001344 <__aeabi_ddiv+0x20c>
 80015f6:	42b2      	cmp	r2, r6
 80015f8:	d800      	bhi.n	80015fc <__aeabi_ddiv+0x4c4>
 80015fa:	e6a3      	b.n	8001344 <__aeabi_ddiv+0x20c>
 80015fc:	1e83      	subs	r3, r0, #2
 80015fe:	1936      	adds	r6, r6, r4
 8001600:	e6a0      	b.n	8001344 <__aeabi_ddiv+0x20c>
 8001602:	1909      	adds	r1, r1, r4
 8001604:	3d01      	subs	r5, #1
 8001606:	428c      	cmp	r4, r1
 8001608:	d900      	bls.n	800160c <__aeabi_ddiv+0x4d4>
 800160a:	e68d      	b.n	8001328 <__aeabi_ddiv+0x1f0>
 800160c:	428a      	cmp	r2, r1
 800160e:	d800      	bhi.n	8001612 <__aeabi_ddiv+0x4da>
 8001610:	e68a      	b.n	8001328 <__aeabi_ddiv+0x1f0>
 8001612:	1e85      	subs	r5, r0, #2
 8001614:	1909      	adds	r1, r1, r4
 8001616:	e687      	b.n	8001328 <__aeabi_ddiv+0x1f0>
 8001618:	220f      	movs	r2, #15
 800161a:	402a      	ands	r2, r5
 800161c:	2a04      	cmp	r2, #4
 800161e:	d100      	bne.n	8001622 <__aeabi_ddiv+0x4ea>
 8001620:	e6bc      	b.n	800139c <__aeabi_ddiv+0x264>
 8001622:	1d29      	adds	r1, r5, #4
 8001624:	42a9      	cmp	r1, r5
 8001626:	41ad      	sbcs	r5, r5
 8001628:	426d      	negs	r5, r5
 800162a:	08c9      	lsrs	r1, r1, #3
 800162c:	44a8      	add	r8, r5
 800162e:	e6b6      	b.n	800139e <__aeabi_ddiv+0x266>
 8001630:	42af      	cmp	r7, r5
 8001632:	d900      	bls.n	8001636 <__aeabi_ddiv+0x4fe>
 8001634:	e662      	b.n	80012fc <__aeabi_ddiv+0x1c4>
 8001636:	4281      	cmp	r1, r0
 8001638:	d804      	bhi.n	8001644 <__aeabi_ddiv+0x50c>
 800163a:	d000      	beq.n	800163e <__aeabi_ddiv+0x506>
 800163c:	e65e      	b.n	80012fc <__aeabi_ddiv+0x1c4>
 800163e:	42ae      	cmp	r6, r5
 8001640:	d800      	bhi.n	8001644 <__aeabi_ddiv+0x50c>
 8001642:	e65b      	b.n	80012fc <__aeabi_ddiv+0x1c4>
 8001644:	2302      	movs	r3, #2
 8001646:	425b      	negs	r3, r3
 8001648:	469c      	mov	ip, r3
 800164a:	9b00      	ldr	r3, [sp, #0]
 800164c:	44e0      	add	r8, ip
 800164e:	469c      	mov	ip, r3
 8001650:	4465      	add	r5, ip
 8001652:	429d      	cmp	r5, r3
 8001654:	419b      	sbcs	r3, r3
 8001656:	425b      	negs	r3, r3
 8001658:	191b      	adds	r3, r3, r4
 800165a:	18c0      	adds	r0, r0, r3
 800165c:	e64f      	b.n	80012fe <__aeabi_ddiv+0x1c6>
 800165e:	42b2      	cmp	r2, r6
 8001660:	d800      	bhi.n	8001664 <__aeabi_ddiv+0x52c>
 8001662:	e612      	b.n	800128a <__aeabi_ddiv+0x152>
 8001664:	1e83      	subs	r3, r0, #2
 8001666:	1936      	adds	r6, r6, r4
 8001668:	e60f      	b.n	800128a <__aeabi_ddiv+0x152>
 800166a:	428a      	cmp	r2, r1
 800166c:	d800      	bhi.n	8001670 <__aeabi_ddiv+0x538>
 800166e:	e5fa      	b.n	8001266 <__aeabi_ddiv+0x12e>
 8001670:	1e83      	subs	r3, r0, #2
 8001672:	4698      	mov	r8, r3
 8001674:	1909      	adds	r1, r1, r4
 8001676:	e5f6      	b.n	8001266 <__aeabi_ddiv+0x12e>
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <__aeabi_ddiv+0x5d4>)
 800167a:	0028      	movs	r0, r5
 800167c:	445b      	add	r3, fp
 800167e:	4641      	mov	r1, r8
 8001680:	409d      	lsls	r5, r3
 8001682:	4099      	lsls	r1, r3
 8001684:	40d0      	lsrs	r0, r2
 8001686:	1e6b      	subs	r3, r5, #1
 8001688:	419d      	sbcs	r5, r3
 800168a:	4643      	mov	r3, r8
 800168c:	4301      	orrs	r1, r0
 800168e:	4329      	orrs	r1, r5
 8001690:	40d3      	lsrs	r3, r2
 8001692:	074a      	lsls	r2, r1, #29
 8001694:	d100      	bne.n	8001698 <__aeabi_ddiv+0x560>
 8001696:	e755      	b.n	8001544 <__aeabi_ddiv+0x40c>
 8001698:	220f      	movs	r2, #15
 800169a:	400a      	ands	r2, r1
 800169c:	2a04      	cmp	r2, #4
 800169e:	d000      	beq.n	80016a2 <__aeabi_ddiv+0x56a>
 80016a0:	e74a      	b.n	8001538 <__aeabi_ddiv+0x400>
 80016a2:	e74f      	b.n	8001544 <__aeabi_ddiv+0x40c>
 80016a4:	0015      	movs	r5, r2
 80016a6:	4286      	cmp	r6, r0
 80016a8:	d000      	beq.n	80016ac <__aeabi_ddiv+0x574>
 80016aa:	e66d      	b.n	8001388 <__aeabi_ddiv+0x250>
 80016ac:	9a00      	ldr	r2, [sp, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d000      	beq.n	80016b4 <__aeabi_ddiv+0x57c>
 80016b2:	e669      	b.n	8001388 <__aeabi_ddiv+0x250>
 80016b4:	e66a      	b.n	800138c <__aeabi_ddiv+0x254>
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <__aeabi_ddiv+0x5d8>)
 80016b8:	445b      	add	r3, fp
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	dc00      	bgt.n	80016c0 <__aeabi_ddiv+0x588>
 80016be:	e713      	b.n	80014e8 <__aeabi_ddiv+0x3b0>
 80016c0:	2501      	movs	r5, #1
 80016c2:	2100      	movs	r1, #0
 80016c4:	44a8      	add	r8, r5
 80016c6:	e66a      	b.n	800139e <__aeabi_ddiv+0x266>
 80016c8:	075d      	lsls	r5, r3, #29
 80016ca:	025b      	lsls	r3, r3, #9
 80016cc:	0b1a      	lsrs	r2, r3, #12
 80016ce:	08c9      	lsrs	r1, r1, #3
 80016d0:	2300      	movs	r3, #0
 80016d2:	430d      	orrs	r5, r1
 80016d4:	e587      	b.n	80011e6 <__aeabi_ddiv+0xae>
 80016d6:	9900      	ldr	r1, [sp, #0]
 80016d8:	3d02      	subs	r5, #2
 80016da:	004a      	lsls	r2, r1, #1
 80016dc:	428a      	cmp	r2, r1
 80016de:	41bf      	sbcs	r7, r7
 80016e0:	427f      	negs	r7, r7
 80016e2:	193f      	adds	r7, r7, r4
 80016e4:	19f6      	adds	r6, r6, r7
 80016e6:	9200      	str	r2, [sp, #0]
 80016e8:	e7dd      	b.n	80016a6 <__aeabi_ddiv+0x56e>
 80016ea:	2280      	movs	r2, #128	; 0x80
 80016ec:	4643      	mov	r3, r8
 80016ee:	0312      	lsls	r2, r2, #12
 80016f0:	431a      	orrs	r2, r3
 80016f2:	0312      	lsls	r2, r2, #12
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <__aeabi_ddiv+0x5cc>)
 80016f6:	0b12      	lsrs	r2, r2, #12
 80016f8:	e575      	b.n	80011e6 <__aeabi_ddiv+0xae>
 80016fa:	9900      	ldr	r1, [sp, #0]
 80016fc:	4299      	cmp	r1, r3
 80016fe:	d3ea      	bcc.n	80016d6 <__aeabi_ddiv+0x59e>
 8001700:	0015      	movs	r5, r2
 8001702:	e7d3      	b.n	80016ac <__aeabi_ddiv+0x574>
 8001704:	000007ff 	.word	0x000007ff
 8001708:	0000043e 	.word	0x0000043e
 800170c:	0000041e 	.word	0x0000041e
 8001710:	000003ff 	.word	0x000003ff

08001714 <__aeabi_dmul>:
 8001714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001716:	4645      	mov	r5, r8
 8001718:	46de      	mov	lr, fp
 800171a:	4657      	mov	r7, sl
 800171c:	464e      	mov	r6, r9
 800171e:	b5e0      	push	{r5, r6, r7, lr}
 8001720:	001f      	movs	r7, r3
 8001722:	030b      	lsls	r3, r1, #12
 8001724:	0b1b      	lsrs	r3, r3, #12
 8001726:	469b      	mov	fp, r3
 8001728:	004d      	lsls	r5, r1, #1
 800172a:	0fcb      	lsrs	r3, r1, #31
 800172c:	0004      	movs	r4, r0
 800172e:	4691      	mov	r9, r2
 8001730:	4698      	mov	r8, r3
 8001732:	b087      	sub	sp, #28
 8001734:	0d6d      	lsrs	r5, r5, #21
 8001736:	d100      	bne.n	800173a <__aeabi_dmul+0x26>
 8001738:	e1cd      	b.n	8001ad6 <__aeabi_dmul+0x3c2>
 800173a:	4bce      	ldr	r3, [pc, #824]	; (8001a74 <__aeabi_dmul+0x360>)
 800173c:	429d      	cmp	r5, r3
 800173e:	d100      	bne.n	8001742 <__aeabi_dmul+0x2e>
 8001740:	e1e9      	b.n	8001b16 <__aeabi_dmul+0x402>
 8001742:	465a      	mov	r2, fp
 8001744:	0f43      	lsrs	r3, r0, #29
 8001746:	00d2      	lsls	r2, r2, #3
 8001748:	4313      	orrs	r3, r2
 800174a:	2280      	movs	r2, #128	; 0x80
 800174c:	0412      	lsls	r2, r2, #16
 800174e:	431a      	orrs	r2, r3
 8001750:	00c3      	lsls	r3, r0, #3
 8001752:	469a      	mov	sl, r3
 8001754:	4bc8      	ldr	r3, [pc, #800]	; (8001a78 <__aeabi_dmul+0x364>)
 8001756:	4693      	mov	fp, r2
 8001758:	469c      	mov	ip, r3
 800175a:	2300      	movs	r3, #0
 800175c:	2600      	movs	r6, #0
 800175e:	4465      	add	r5, ip
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	033c      	lsls	r4, r7, #12
 8001764:	007b      	lsls	r3, r7, #1
 8001766:	4648      	mov	r0, r9
 8001768:	0b24      	lsrs	r4, r4, #12
 800176a:	0d5b      	lsrs	r3, r3, #21
 800176c:	0fff      	lsrs	r7, r7, #31
 800176e:	2b00      	cmp	r3, #0
 8001770:	d100      	bne.n	8001774 <__aeabi_dmul+0x60>
 8001772:	e189      	b.n	8001a88 <__aeabi_dmul+0x374>
 8001774:	4abf      	ldr	r2, [pc, #764]	; (8001a74 <__aeabi_dmul+0x360>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d019      	beq.n	80017ae <__aeabi_dmul+0x9a>
 800177a:	0f42      	lsrs	r2, r0, #29
 800177c:	00e4      	lsls	r4, r4, #3
 800177e:	4322      	orrs	r2, r4
 8001780:	2480      	movs	r4, #128	; 0x80
 8001782:	0424      	lsls	r4, r4, #16
 8001784:	4314      	orrs	r4, r2
 8001786:	4abc      	ldr	r2, [pc, #752]	; (8001a78 <__aeabi_dmul+0x364>)
 8001788:	2100      	movs	r1, #0
 800178a:	4694      	mov	ip, r2
 800178c:	4642      	mov	r2, r8
 800178e:	4463      	add	r3, ip
 8001790:	195b      	adds	r3, r3, r5
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	9b01      	ldr	r3, [sp, #4]
 8001796:	407a      	eors	r2, r7
 8001798:	3301      	adds	r3, #1
 800179a:	00c0      	lsls	r0, r0, #3
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	9302      	str	r3, [sp, #8]
 80017a0:	2e0a      	cmp	r6, #10
 80017a2:	dd1c      	ble.n	80017de <__aeabi_dmul+0xca>
 80017a4:	003a      	movs	r2, r7
 80017a6:	2e0b      	cmp	r6, #11
 80017a8:	d05e      	beq.n	8001868 <__aeabi_dmul+0x154>
 80017aa:	4647      	mov	r7, r8
 80017ac:	e056      	b.n	800185c <__aeabi_dmul+0x148>
 80017ae:	4649      	mov	r1, r9
 80017b0:	4bb0      	ldr	r3, [pc, #704]	; (8001a74 <__aeabi_dmul+0x360>)
 80017b2:	4321      	orrs	r1, r4
 80017b4:	18eb      	adds	r3, r5, r3
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	2900      	cmp	r1, #0
 80017ba:	d12a      	bne.n	8001812 <__aeabi_dmul+0xfe>
 80017bc:	2080      	movs	r0, #128	; 0x80
 80017be:	2202      	movs	r2, #2
 80017c0:	0100      	lsls	r0, r0, #4
 80017c2:	002b      	movs	r3, r5
 80017c4:	4684      	mov	ip, r0
 80017c6:	4316      	orrs	r6, r2
 80017c8:	4642      	mov	r2, r8
 80017ca:	4463      	add	r3, ip
 80017cc:	407a      	eors	r2, r7
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	9302      	str	r3, [sp, #8]
 80017d2:	2e0a      	cmp	r6, #10
 80017d4:	dd00      	ble.n	80017d8 <__aeabi_dmul+0xc4>
 80017d6:	e231      	b.n	8001c3c <__aeabi_dmul+0x528>
 80017d8:	2000      	movs	r0, #0
 80017da:	2400      	movs	r4, #0
 80017dc:	2102      	movs	r1, #2
 80017de:	2e02      	cmp	r6, #2
 80017e0:	dc26      	bgt.n	8001830 <__aeabi_dmul+0x11c>
 80017e2:	3e01      	subs	r6, #1
 80017e4:	2e01      	cmp	r6, #1
 80017e6:	d852      	bhi.n	800188e <__aeabi_dmul+0x17a>
 80017e8:	2902      	cmp	r1, #2
 80017ea:	d04c      	beq.n	8001886 <__aeabi_dmul+0x172>
 80017ec:	2901      	cmp	r1, #1
 80017ee:	d000      	beq.n	80017f2 <__aeabi_dmul+0xde>
 80017f0:	e118      	b.n	8001a24 <__aeabi_dmul+0x310>
 80017f2:	2300      	movs	r3, #0
 80017f4:	2400      	movs	r4, #0
 80017f6:	2500      	movs	r5, #0
 80017f8:	051b      	lsls	r3, r3, #20
 80017fa:	4323      	orrs	r3, r4
 80017fc:	07d2      	lsls	r2, r2, #31
 80017fe:	4313      	orrs	r3, r2
 8001800:	0028      	movs	r0, r5
 8001802:	0019      	movs	r1, r3
 8001804:	b007      	add	sp, #28
 8001806:	bcf0      	pop	{r4, r5, r6, r7}
 8001808:	46bb      	mov	fp, r7
 800180a:	46b2      	mov	sl, r6
 800180c:	46a9      	mov	r9, r5
 800180e:	46a0      	mov	r8, r4
 8001810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001812:	2180      	movs	r1, #128	; 0x80
 8001814:	2203      	movs	r2, #3
 8001816:	0109      	lsls	r1, r1, #4
 8001818:	002b      	movs	r3, r5
 800181a:	468c      	mov	ip, r1
 800181c:	4316      	orrs	r6, r2
 800181e:	4642      	mov	r2, r8
 8001820:	4463      	add	r3, ip
 8001822:	407a      	eors	r2, r7
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	9302      	str	r3, [sp, #8]
 8001828:	2e0a      	cmp	r6, #10
 800182a:	dd00      	ble.n	800182e <__aeabi_dmul+0x11a>
 800182c:	e228      	b.n	8001c80 <__aeabi_dmul+0x56c>
 800182e:	2103      	movs	r1, #3
 8001830:	2501      	movs	r5, #1
 8001832:	40b5      	lsls	r5, r6
 8001834:	46ac      	mov	ip, r5
 8001836:	26a6      	movs	r6, #166	; 0xa6
 8001838:	4663      	mov	r3, ip
 800183a:	00f6      	lsls	r6, r6, #3
 800183c:	4035      	ands	r5, r6
 800183e:	4233      	tst	r3, r6
 8001840:	d10b      	bne.n	800185a <__aeabi_dmul+0x146>
 8001842:	2690      	movs	r6, #144	; 0x90
 8001844:	00b6      	lsls	r6, r6, #2
 8001846:	4233      	tst	r3, r6
 8001848:	d118      	bne.n	800187c <__aeabi_dmul+0x168>
 800184a:	3eb9      	subs	r6, #185	; 0xb9
 800184c:	3eff      	subs	r6, #255	; 0xff
 800184e:	421e      	tst	r6, r3
 8001850:	d01d      	beq.n	800188e <__aeabi_dmul+0x17a>
 8001852:	46a3      	mov	fp, r4
 8001854:	4682      	mov	sl, r0
 8001856:	9100      	str	r1, [sp, #0]
 8001858:	e000      	b.n	800185c <__aeabi_dmul+0x148>
 800185a:	0017      	movs	r7, r2
 800185c:	9900      	ldr	r1, [sp, #0]
 800185e:	003a      	movs	r2, r7
 8001860:	2902      	cmp	r1, #2
 8001862:	d010      	beq.n	8001886 <__aeabi_dmul+0x172>
 8001864:	465c      	mov	r4, fp
 8001866:	4650      	mov	r0, sl
 8001868:	2903      	cmp	r1, #3
 800186a:	d1bf      	bne.n	80017ec <__aeabi_dmul+0xd8>
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	031b      	lsls	r3, r3, #12
 8001870:	431c      	orrs	r4, r3
 8001872:	0324      	lsls	r4, r4, #12
 8001874:	0005      	movs	r5, r0
 8001876:	4b7f      	ldr	r3, [pc, #508]	; (8001a74 <__aeabi_dmul+0x360>)
 8001878:	0b24      	lsrs	r4, r4, #12
 800187a:	e7bd      	b.n	80017f8 <__aeabi_dmul+0xe4>
 800187c:	2480      	movs	r4, #128	; 0x80
 800187e:	2200      	movs	r2, #0
 8001880:	4b7c      	ldr	r3, [pc, #496]	; (8001a74 <__aeabi_dmul+0x360>)
 8001882:	0324      	lsls	r4, r4, #12
 8001884:	e7b8      	b.n	80017f8 <__aeabi_dmul+0xe4>
 8001886:	2400      	movs	r4, #0
 8001888:	2500      	movs	r5, #0
 800188a:	4b7a      	ldr	r3, [pc, #488]	; (8001a74 <__aeabi_dmul+0x360>)
 800188c:	e7b4      	b.n	80017f8 <__aeabi_dmul+0xe4>
 800188e:	4653      	mov	r3, sl
 8001890:	041e      	lsls	r6, r3, #16
 8001892:	0c36      	lsrs	r6, r6, #16
 8001894:	0c1f      	lsrs	r7, r3, #16
 8001896:	0033      	movs	r3, r6
 8001898:	0c01      	lsrs	r1, r0, #16
 800189a:	0400      	lsls	r0, r0, #16
 800189c:	0c00      	lsrs	r0, r0, #16
 800189e:	4343      	muls	r3, r0
 80018a0:	4698      	mov	r8, r3
 80018a2:	0003      	movs	r3, r0
 80018a4:	437b      	muls	r3, r7
 80018a6:	4699      	mov	r9, r3
 80018a8:	0033      	movs	r3, r6
 80018aa:	434b      	muls	r3, r1
 80018ac:	469c      	mov	ip, r3
 80018ae:	4643      	mov	r3, r8
 80018b0:	000d      	movs	r5, r1
 80018b2:	0c1b      	lsrs	r3, r3, #16
 80018b4:	469a      	mov	sl, r3
 80018b6:	437d      	muls	r5, r7
 80018b8:	44cc      	add	ip, r9
 80018ba:	44d4      	add	ip, sl
 80018bc:	9500      	str	r5, [sp, #0]
 80018be:	45e1      	cmp	r9, ip
 80018c0:	d904      	bls.n	80018cc <__aeabi_dmul+0x1b8>
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	025b      	lsls	r3, r3, #9
 80018c6:	4699      	mov	r9, r3
 80018c8:	444d      	add	r5, r9
 80018ca:	9500      	str	r5, [sp, #0]
 80018cc:	4663      	mov	r3, ip
 80018ce:	0c1b      	lsrs	r3, r3, #16
 80018d0:	001d      	movs	r5, r3
 80018d2:	4663      	mov	r3, ip
 80018d4:	041b      	lsls	r3, r3, #16
 80018d6:	469c      	mov	ip, r3
 80018d8:	4643      	mov	r3, r8
 80018da:	041b      	lsls	r3, r3, #16
 80018dc:	0c1b      	lsrs	r3, r3, #16
 80018de:	4698      	mov	r8, r3
 80018e0:	4663      	mov	r3, ip
 80018e2:	4443      	add	r3, r8
 80018e4:	9303      	str	r3, [sp, #12]
 80018e6:	0c23      	lsrs	r3, r4, #16
 80018e8:	4698      	mov	r8, r3
 80018ea:	0033      	movs	r3, r6
 80018ec:	0424      	lsls	r4, r4, #16
 80018ee:	0c24      	lsrs	r4, r4, #16
 80018f0:	4363      	muls	r3, r4
 80018f2:	469c      	mov	ip, r3
 80018f4:	0023      	movs	r3, r4
 80018f6:	437b      	muls	r3, r7
 80018f8:	4699      	mov	r9, r3
 80018fa:	4643      	mov	r3, r8
 80018fc:	435e      	muls	r6, r3
 80018fe:	435f      	muls	r7, r3
 8001900:	444e      	add	r6, r9
 8001902:	4663      	mov	r3, ip
 8001904:	46b2      	mov	sl, r6
 8001906:	0c1e      	lsrs	r6, r3, #16
 8001908:	4456      	add	r6, sl
 800190a:	45b1      	cmp	r9, r6
 800190c:	d903      	bls.n	8001916 <__aeabi_dmul+0x202>
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	025b      	lsls	r3, r3, #9
 8001912:	4699      	mov	r9, r3
 8001914:	444f      	add	r7, r9
 8001916:	0c33      	lsrs	r3, r6, #16
 8001918:	4699      	mov	r9, r3
 800191a:	003b      	movs	r3, r7
 800191c:	444b      	add	r3, r9
 800191e:	9305      	str	r3, [sp, #20]
 8001920:	4663      	mov	r3, ip
 8001922:	46ac      	mov	ip, r5
 8001924:	041f      	lsls	r7, r3, #16
 8001926:	0c3f      	lsrs	r7, r7, #16
 8001928:	0436      	lsls	r6, r6, #16
 800192a:	19f6      	adds	r6, r6, r7
 800192c:	44b4      	add	ip, r6
 800192e:	4663      	mov	r3, ip
 8001930:	9304      	str	r3, [sp, #16]
 8001932:	465b      	mov	r3, fp
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	469c      	mov	ip, r3
 8001938:	465b      	mov	r3, fp
 800193a:	041f      	lsls	r7, r3, #16
 800193c:	0c3f      	lsrs	r7, r7, #16
 800193e:	003b      	movs	r3, r7
 8001940:	4343      	muls	r3, r0
 8001942:	4699      	mov	r9, r3
 8001944:	4663      	mov	r3, ip
 8001946:	4343      	muls	r3, r0
 8001948:	469a      	mov	sl, r3
 800194a:	464b      	mov	r3, r9
 800194c:	4660      	mov	r0, ip
 800194e:	0c1b      	lsrs	r3, r3, #16
 8001950:	469b      	mov	fp, r3
 8001952:	4348      	muls	r0, r1
 8001954:	4379      	muls	r1, r7
 8001956:	4451      	add	r1, sl
 8001958:	4459      	add	r1, fp
 800195a:	458a      	cmp	sl, r1
 800195c:	d903      	bls.n	8001966 <__aeabi_dmul+0x252>
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	025b      	lsls	r3, r3, #9
 8001962:	469a      	mov	sl, r3
 8001964:	4450      	add	r0, sl
 8001966:	0c0b      	lsrs	r3, r1, #16
 8001968:	469a      	mov	sl, r3
 800196a:	464b      	mov	r3, r9
 800196c:	041b      	lsls	r3, r3, #16
 800196e:	0c1b      	lsrs	r3, r3, #16
 8001970:	4699      	mov	r9, r3
 8001972:	003b      	movs	r3, r7
 8001974:	4363      	muls	r3, r4
 8001976:	0409      	lsls	r1, r1, #16
 8001978:	4645      	mov	r5, r8
 800197a:	4449      	add	r1, r9
 800197c:	4699      	mov	r9, r3
 800197e:	4663      	mov	r3, ip
 8001980:	435c      	muls	r4, r3
 8001982:	436b      	muls	r3, r5
 8001984:	469c      	mov	ip, r3
 8001986:	464b      	mov	r3, r9
 8001988:	0c1b      	lsrs	r3, r3, #16
 800198a:	4698      	mov	r8, r3
 800198c:	436f      	muls	r7, r5
 800198e:	193f      	adds	r7, r7, r4
 8001990:	4447      	add	r7, r8
 8001992:	4450      	add	r0, sl
 8001994:	42bc      	cmp	r4, r7
 8001996:	d903      	bls.n	80019a0 <__aeabi_dmul+0x28c>
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	025b      	lsls	r3, r3, #9
 800199c:	4698      	mov	r8, r3
 800199e:	44c4      	add	ip, r8
 80019a0:	9b04      	ldr	r3, [sp, #16]
 80019a2:	9d00      	ldr	r5, [sp, #0]
 80019a4:	4698      	mov	r8, r3
 80019a6:	4445      	add	r5, r8
 80019a8:	42b5      	cmp	r5, r6
 80019aa:	41b6      	sbcs	r6, r6
 80019ac:	4273      	negs	r3, r6
 80019ae:	4698      	mov	r8, r3
 80019b0:	464b      	mov	r3, r9
 80019b2:	041e      	lsls	r6, r3, #16
 80019b4:	9b05      	ldr	r3, [sp, #20]
 80019b6:	043c      	lsls	r4, r7, #16
 80019b8:	4699      	mov	r9, r3
 80019ba:	0c36      	lsrs	r6, r6, #16
 80019bc:	19a4      	adds	r4, r4, r6
 80019be:	444c      	add	r4, r9
 80019c0:	46a1      	mov	r9, r4
 80019c2:	4683      	mov	fp, r0
 80019c4:	186e      	adds	r6, r5, r1
 80019c6:	44c1      	add	r9, r8
 80019c8:	428e      	cmp	r6, r1
 80019ca:	4189      	sbcs	r1, r1
 80019cc:	44cb      	add	fp, r9
 80019ce:	465d      	mov	r5, fp
 80019d0:	4249      	negs	r1, r1
 80019d2:	186d      	adds	r5, r5, r1
 80019d4:	429c      	cmp	r4, r3
 80019d6:	41a4      	sbcs	r4, r4
 80019d8:	45c1      	cmp	r9, r8
 80019da:	419b      	sbcs	r3, r3
 80019dc:	4583      	cmp	fp, r0
 80019de:	4180      	sbcs	r0, r0
 80019e0:	428d      	cmp	r5, r1
 80019e2:	4189      	sbcs	r1, r1
 80019e4:	425b      	negs	r3, r3
 80019e6:	4264      	negs	r4, r4
 80019e8:	431c      	orrs	r4, r3
 80019ea:	4240      	negs	r0, r0
 80019ec:	9b03      	ldr	r3, [sp, #12]
 80019ee:	4249      	negs	r1, r1
 80019f0:	4301      	orrs	r1, r0
 80019f2:	0270      	lsls	r0, r6, #9
 80019f4:	0c3f      	lsrs	r7, r7, #16
 80019f6:	4318      	orrs	r0, r3
 80019f8:	19e4      	adds	r4, r4, r7
 80019fa:	1e47      	subs	r7, r0, #1
 80019fc:	41b8      	sbcs	r0, r7
 80019fe:	1864      	adds	r4, r4, r1
 8001a00:	4464      	add	r4, ip
 8001a02:	0df6      	lsrs	r6, r6, #23
 8001a04:	0261      	lsls	r1, r4, #9
 8001a06:	4330      	orrs	r0, r6
 8001a08:	0dec      	lsrs	r4, r5, #23
 8001a0a:	026e      	lsls	r6, r5, #9
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4330      	orrs	r0, r6
 8001a10:	01c9      	lsls	r1, r1, #7
 8001a12:	d400      	bmi.n	8001a16 <__aeabi_dmul+0x302>
 8001a14:	e0f1      	b.n	8001bfa <__aeabi_dmul+0x4e6>
 8001a16:	2101      	movs	r1, #1
 8001a18:	0843      	lsrs	r3, r0, #1
 8001a1a:	4001      	ands	r1, r0
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	07e0      	lsls	r0, r4, #31
 8001a20:	4318      	orrs	r0, r3
 8001a22:	0864      	lsrs	r4, r4, #1
 8001a24:	4915      	ldr	r1, [pc, #84]	; (8001a7c <__aeabi_dmul+0x368>)
 8001a26:	9b02      	ldr	r3, [sp, #8]
 8001a28:	468c      	mov	ip, r1
 8001a2a:	4463      	add	r3, ip
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	dc00      	bgt.n	8001a32 <__aeabi_dmul+0x31e>
 8001a30:	e097      	b.n	8001b62 <__aeabi_dmul+0x44e>
 8001a32:	0741      	lsls	r1, r0, #29
 8001a34:	d009      	beq.n	8001a4a <__aeabi_dmul+0x336>
 8001a36:	210f      	movs	r1, #15
 8001a38:	4001      	ands	r1, r0
 8001a3a:	2904      	cmp	r1, #4
 8001a3c:	d005      	beq.n	8001a4a <__aeabi_dmul+0x336>
 8001a3e:	1d01      	adds	r1, r0, #4
 8001a40:	4281      	cmp	r1, r0
 8001a42:	4180      	sbcs	r0, r0
 8001a44:	4240      	negs	r0, r0
 8001a46:	1824      	adds	r4, r4, r0
 8001a48:	0008      	movs	r0, r1
 8001a4a:	01e1      	lsls	r1, r4, #7
 8001a4c:	d506      	bpl.n	8001a5c <__aeabi_dmul+0x348>
 8001a4e:	2180      	movs	r1, #128	; 0x80
 8001a50:	00c9      	lsls	r1, r1, #3
 8001a52:	468c      	mov	ip, r1
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <__aeabi_dmul+0x36c>)
 8001a56:	401c      	ands	r4, r3
 8001a58:	9b02      	ldr	r3, [sp, #8]
 8001a5a:	4463      	add	r3, ip
 8001a5c:	4909      	ldr	r1, [pc, #36]	; (8001a84 <__aeabi_dmul+0x370>)
 8001a5e:	428b      	cmp	r3, r1
 8001a60:	dd00      	ble.n	8001a64 <__aeabi_dmul+0x350>
 8001a62:	e710      	b.n	8001886 <__aeabi_dmul+0x172>
 8001a64:	0761      	lsls	r1, r4, #29
 8001a66:	08c5      	lsrs	r5, r0, #3
 8001a68:	0264      	lsls	r4, r4, #9
 8001a6a:	055b      	lsls	r3, r3, #21
 8001a6c:	430d      	orrs	r5, r1
 8001a6e:	0b24      	lsrs	r4, r4, #12
 8001a70:	0d5b      	lsrs	r3, r3, #21
 8001a72:	e6c1      	b.n	80017f8 <__aeabi_dmul+0xe4>
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	fffffc01 	.word	0xfffffc01
 8001a7c:	000003ff 	.word	0x000003ff
 8001a80:	feffffff 	.word	0xfeffffff
 8001a84:	000007fe 	.word	0x000007fe
 8001a88:	464b      	mov	r3, r9
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d059      	beq.n	8001b42 <__aeabi_dmul+0x42e>
 8001a8e:	2c00      	cmp	r4, #0
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dmul+0x380>
 8001a92:	e0a3      	b.n	8001bdc <__aeabi_dmul+0x4c8>
 8001a94:	0020      	movs	r0, r4
 8001a96:	f000 f9b5 	bl	8001e04 <__clzsi2>
 8001a9a:	0001      	movs	r1, r0
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	390b      	subs	r1, #11
 8001aa0:	221d      	movs	r2, #29
 8001aa2:	1a52      	subs	r2, r2, r1
 8001aa4:	4649      	mov	r1, r9
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	40d1      	lsrs	r1, r2
 8001aaa:	464a      	mov	r2, r9
 8001aac:	3808      	subs	r0, #8
 8001aae:	4082      	lsls	r2, r0
 8001ab0:	4084      	lsls	r4, r0
 8001ab2:	0010      	movs	r0, r2
 8001ab4:	430c      	orrs	r4, r1
 8001ab6:	4a74      	ldr	r2, [pc, #464]	; (8001c88 <__aeabi_dmul+0x574>)
 8001ab8:	1aeb      	subs	r3, r5, r3
 8001aba:	4694      	mov	ip, r2
 8001abc:	4642      	mov	r2, r8
 8001abe:	4463      	add	r3, ip
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	9b01      	ldr	r3, [sp, #4]
 8001ac4:	407a      	eors	r2, r7
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	2100      	movs	r1, #0
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	9302      	str	r3, [sp, #8]
 8001ace:	2e0a      	cmp	r6, #10
 8001ad0:	dd00      	ble.n	8001ad4 <__aeabi_dmul+0x3c0>
 8001ad2:	e667      	b.n	80017a4 <__aeabi_dmul+0x90>
 8001ad4:	e683      	b.n	80017de <__aeabi_dmul+0xca>
 8001ad6:	465b      	mov	r3, fp
 8001ad8:	4303      	orrs	r3, r0
 8001ada:	469a      	mov	sl, r3
 8001adc:	d02a      	beq.n	8001b34 <__aeabi_dmul+0x420>
 8001ade:	465b      	mov	r3, fp
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d06d      	beq.n	8001bc0 <__aeabi_dmul+0x4ac>
 8001ae4:	4658      	mov	r0, fp
 8001ae6:	f000 f98d 	bl	8001e04 <__clzsi2>
 8001aea:	0001      	movs	r1, r0
 8001aec:	0003      	movs	r3, r0
 8001aee:	390b      	subs	r1, #11
 8001af0:	221d      	movs	r2, #29
 8001af2:	1a52      	subs	r2, r2, r1
 8001af4:	0021      	movs	r1, r4
 8001af6:	0018      	movs	r0, r3
 8001af8:	465d      	mov	r5, fp
 8001afa:	40d1      	lsrs	r1, r2
 8001afc:	3808      	subs	r0, #8
 8001afe:	4085      	lsls	r5, r0
 8001b00:	000a      	movs	r2, r1
 8001b02:	4084      	lsls	r4, r0
 8001b04:	432a      	orrs	r2, r5
 8001b06:	4693      	mov	fp, r2
 8001b08:	46a2      	mov	sl, r4
 8001b0a:	4d5f      	ldr	r5, [pc, #380]	; (8001c88 <__aeabi_dmul+0x574>)
 8001b0c:	2600      	movs	r6, #0
 8001b0e:	1aed      	subs	r5, r5, r3
 8001b10:	2300      	movs	r3, #0
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	e625      	b.n	8001762 <__aeabi_dmul+0x4e>
 8001b16:	465b      	mov	r3, fp
 8001b18:	4303      	orrs	r3, r0
 8001b1a:	469a      	mov	sl, r3
 8001b1c:	d105      	bne.n	8001b2a <__aeabi_dmul+0x416>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	469b      	mov	fp, r3
 8001b22:	3302      	adds	r3, #2
 8001b24:	2608      	movs	r6, #8
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	e61b      	b.n	8001762 <__aeabi_dmul+0x4e>
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	4682      	mov	sl, r0
 8001b2e:	260c      	movs	r6, #12
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	e616      	b.n	8001762 <__aeabi_dmul+0x4e>
 8001b34:	2300      	movs	r3, #0
 8001b36:	469b      	mov	fp, r3
 8001b38:	3301      	adds	r3, #1
 8001b3a:	2604      	movs	r6, #4
 8001b3c:	2500      	movs	r5, #0
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	e60f      	b.n	8001762 <__aeabi_dmul+0x4e>
 8001b42:	4642      	mov	r2, r8
 8001b44:	3301      	adds	r3, #1
 8001b46:	9501      	str	r5, [sp, #4]
 8001b48:	431e      	orrs	r6, r3
 8001b4a:	9b01      	ldr	r3, [sp, #4]
 8001b4c:	407a      	eors	r2, r7
 8001b4e:	3301      	adds	r3, #1
 8001b50:	2400      	movs	r4, #0
 8001b52:	2000      	movs	r0, #0
 8001b54:	2101      	movs	r1, #1
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	9302      	str	r3, [sp, #8]
 8001b5a:	2e0a      	cmp	r6, #10
 8001b5c:	dd00      	ble.n	8001b60 <__aeabi_dmul+0x44c>
 8001b5e:	e621      	b.n	80017a4 <__aeabi_dmul+0x90>
 8001b60:	e63d      	b.n	80017de <__aeabi_dmul+0xca>
 8001b62:	2101      	movs	r1, #1
 8001b64:	1ac9      	subs	r1, r1, r3
 8001b66:	2938      	cmp	r1, #56	; 0x38
 8001b68:	dd00      	ble.n	8001b6c <__aeabi_dmul+0x458>
 8001b6a:	e642      	b.n	80017f2 <__aeabi_dmul+0xde>
 8001b6c:	291f      	cmp	r1, #31
 8001b6e:	dd47      	ble.n	8001c00 <__aeabi_dmul+0x4ec>
 8001b70:	261f      	movs	r6, #31
 8001b72:	0025      	movs	r5, r4
 8001b74:	4276      	negs	r6, r6
 8001b76:	1af3      	subs	r3, r6, r3
 8001b78:	40dd      	lsrs	r5, r3
 8001b7a:	002b      	movs	r3, r5
 8001b7c:	2920      	cmp	r1, #32
 8001b7e:	d005      	beq.n	8001b8c <__aeabi_dmul+0x478>
 8001b80:	4942      	ldr	r1, [pc, #264]	; (8001c8c <__aeabi_dmul+0x578>)
 8001b82:	9d02      	ldr	r5, [sp, #8]
 8001b84:	468c      	mov	ip, r1
 8001b86:	4465      	add	r5, ip
 8001b88:	40ac      	lsls	r4, r5
 8001b8a:	4320      	orrs	r0, r4
 8001b8c:	1e41      	subs	r1, r0, #1
 8001b8e:	4188      	sbcs	r0, r1
 8001b90:	4318      	orrs	r0, r3
 8001b92:	2307      	movs	r3, #7
 8001b94:	001d      	movs	r5, r3
 8001b96:	2400      	movs	r4, #0
 8001b98:	4005      	ands	r5, r0
 8001b9a:	4203      	tst	r3, r0
 8001b9c:	d04a      	beq.n	8001c34 <__aeabi_dmul+0x520>
 8001b9e:	230f      	movs	r3, #15
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	4003      	ands	r3, r0
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d042      	beq.n	8001c2e <__aeabi_dmul+0x51a>
 8001ba8:	1d03      	adds	r3, r0, #4
 8001baa:	4283      	cmp	r3, r0
 8001bac:	4180      	sbcs	r0, r0
 8001bae:	4240      	negs	r0, r0
 8001bb0:	1824      	adds	r4, r4, r0
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	0223      	lsls	r3, r4, #8
 8001bb6:	d53a      	bpl.n	8001c2e <__aeabi_dmul+0x51a>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	2400      	movs	r4, #0
 8001bbc:	2500      	movs	r5, #0
 8001bbe:	e61b      	b.n	80017f8 <__aeabi_dmul+0xe4>
 8001bc0:	f000 f920 	bl	8001e04 <__clzsi2>
 8001bc4:	0001      	movs	r1, r0
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	3115      	adds	r1, #21
 8001bca:	3320      	adds	r3, #32
 8001bcc:	291c      	cmp	r1, #28
 8001bce:	dd8f      	ble.n	8001af0 <__aeabi_dmul+0x3dc>
 8001bd0:	3808      	subs	r0, #8
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	4084      	lsls	r4, r0
 8001bd6:	4692      	mov	sl, r2
 8001bd8:	46a3      	mov	fp, r4
 8001bda:	e796      	b.n	8001b0a <__aeabi_dmul+0x3f6>
 8001bdc:	f000 f912 	bl	8001e04 <__clzsi2>
 8001be0:	0001      	movs	r1, r0
 8001be2:	0003      	movs	r3, r0
 8001be4:	3115      	adds	r1, #21
 8001be6:	3320      	adds	r3, #32
 8001be8:	291c      	cmp	r1, #28
 8001bea:	dc00      	bgt.n	8001bee <__aeabi_dmul+0x4da>
 8001bec:	e758      	b.n	8001aa0 <__aeabi_dmul+0x38c>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	464c      	mov	r4, r9
 8001bf2:	3a08      	subs	r2, #8
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	4094      	lsls	r4, r2
 8001bf8:	e75d      	b.n	8001ab6 <__aeabi_dmul+0x3a2>
 8001bfa:	9b01      	ldr	r3, [sp, #4]
 8001bfc:	9302      	str	r3, [sp, #8]
 8001bfe:	e711      	b.n	8001a24 <__aeabi_dmul+0x310>
 8001c00:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <__aeabi_dmul+0x57c>)
 8001c02:	0026      	movs	r6, r4
 8001c04:	469c      	mov	ip, r3
 8001c06:	0003      	movs	r3, r0
 8001c08:	9d02      	ldr	r5, [sp, #8]
 8001c0a:	40cb      	lsrs	r3, r1
 8001c0c:	4465      	add	r5, ip
 8001c0e:	40ae      	lsls	r6, r5
 8001c10:	431e      	orrs	r6, r3
 8001c12:	0003      	movs	r3, r0
 8001c14:	40ab      	lsls	r3, r5
 8001c16:	1e58      	subs	r0, r3, #1
 8001c18:	4183      	sbcs	r3, r0
 8001c1a:	0030      	movs	r0, r6
 8001c1c:	4318      	orrs	r0, r3
 8001c1e:	40cc      	lsrs	r4, r1
 8001c20:	0743      	lsls	r3, r0, #29
 8001c22:	d0c7      	beq.n	8001bb4 <__aeabi_dmul+0x4a0>
 8001c24:	230f      	movs	r3, #15
 8001c26:	4003      	ands	r3, r0
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d1bd      	bne.n	8001ba8 <__aeabi_dmul+0x494>
 8001c2c:	e7c2      	b.n	8001bb4 <__aeabi_dmul+0x4a0>
 8001c2e:	0765      	lsls	r5, r4, #29
 8001c30:	0264      	lsls	r4, r4, #9
 8001c32:	0b24      	lsrs	r4, r4, #12
 8001c34:	08c0      	lsrs	r0, r0, #3
 8001c36:	2300      	movs	r3, #0
 8001c38:	4305      	orrs	r5, r0
 8001c3a:	e5dd      	b.n	80017f8 <__aeabi_dmul+0xe4>
 8001c3c:	2500      	movs	r5, #0
 8001c3e:	2302      	movs	r3, #2
 8001c40:	2e0f      	cmp	r6, #15
 8001c42:	d10c      	bne.n	8001c5e <__aeabi_dmul+0x54a>
 8001c44:	2480      	movs	r4, #128	; 0x80
 8001c46:	465b      	mov	r3, fp
 8001c48:	0324      	lsls	r4, r4, #12
 8001c4a:	4223      	tst	r3, r4
 8001c4c:	d00e      	beq.n	8001c6c <__aeabi_dmul+0x558>
 8001c4e:	4221      	tst	r1, r4
 8001c50:	d10c      	bne.n	8001c6c <__aeabi_dmul+0x558>
 8001c52:	430c      	orrs	r4, r1
 8001c54:	0324      	lsls	r4, r4, #12
 8001c56:	003a      	movs	r2, r7
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <__aeabi_dmul+0x580>)
 8001c5a:	0b24      	lsrs	r4, r4, #12
 8001c5c:	e5cc      	b.n	80017f8 <__aeabi_dmul+0xe4>
 8001c5e:	2e0b      	cmp	r6, #11
 8001c60:	d000      	beq.n	8001c64 <__aeabi_dmul+0x550>
 8001c62:	e5a2      	b.n	80017aa <__aeabi_dmul+0x96>
 8001c64:	468b      	mov	fp, r1
 8001c66:	46aa      	mov	sl, r5
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	e5f7      	b.n	800185c <__aeabi_dmul+0x148>
 8001c6c:	2480      	movs	r4, #128	; 0x80
 8001c6e:	465b      	mov	r3, fp
 8001c70:	0324      	lsls	r4, r4, #12
 8001c72:	431c      	orrs	r4, r3
 8001c74:	0324      	lsls	r4, r4, #12
 8001c76:	4642      	mov	r2, r8
 8001c78:	4655      	mov	r5, sl
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <__aeabi_dmul+0x580>)
 8001c7c:	0b24      	lsrs	r4, r4, #12
 8001c7e:	e5bb      	b.n	80017f8 <__aeabi_dmul+0xe4>
 8001c80:	464d      	mov	r5, r9
 8001c82:	0021      	movs	r1, r4
 8001c84:	2303      	movs	r3, #3
 8001c86:	e7db      	b.n	8001c40 <__aeabi_dmul+0x52c>
 8001c88:	fffffc0d 	.word	0xfffffc0d
 8001c8c:	0000043e 	.word	0x0000043e
 8001c90:	0000041e 	.word	0x0000041e
 8001c94:	000007ff 	.word	0x000007ff

08001c98 <__aeabi_i2d>:
 8001c98:	b570      	push	{r4, r5, r6, lr}
 8001c9a:	2800      	cmp	r0, #0
 8001c9c:	d016      	beq.n	8001ccc <__aeabi_i2d+0x34>
 8001c9e:	17c3      	asrs	r3, r0, #31
 8001ca0:	18c5      	adds	r5, r0, r3
 8001ca2:	405d      	eors	r5, r3
 8001ca4:	0fc4      	lsrs	r4, r0, #31
 8001ca6:	0028      	movs	r0, r5
 8001ca8:	f000 f8ac 	bl	8001e04 <__clzsi2>
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <__aeabi_i2d+0x5c>)
 8001cae:	1a1b      	subs	r3, r3, r0
 8001cb0:	280a      	cmp	r0, #10
 8001cb2:	dc16      	bgt.n	8001ce2 <__aeabi_i2d+0x4a>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	002e      	movs	r6, r5
 8001cb8:	3215      	adds	r2, #21
 8001cba:	4096      	lsls	r6, r2
 8001cbc:	220b      	movs	r2, #11
 8001cbe:	1a12      	subs	r2, r2, r0
 8001cc0:	40d5      	lsrs	r5, r2
 8001cc2:	055b      	lsls	r3, r3, #21
 8001cc4:	032d      	lsls	r5, r5, #12
 8001cc6:	0b2d      	lsrs	r5, r5, #12
 8001cc8:	0d5b      	lsrs	r3, r3, #21
 8001cca:	e003      	b.n	8001cd4 <__aeabi_i2d+0x3c>
 8001ccc:	2400      	movs	r4, #0
 8001cce:	2300      	movs	r3, #0
 8001cd0:	2500      	movs	r5, #0
 8001cd2:	2600      	movs	r6, #0
 8001cd4:	051b      	lsls	r3, r3, #20
 8001cd6:	432b      	orrs	r3, r5
 8001cd8:	07e4      	lsls	r4, r4, #31
 8001cda:	4323      	orrs	r3, r4
 8001cdc:	0030      	movs	r0, r6
 8001cde:	0019      	movs	r1, r3
 8001ce0:	bd70      	pop	{r4, r5, r6, pc}
 8001ce2:	380b      	subs	r0, #11
 8001ce4:	4085      	lsls	r5, r0
 8001ce6:	055b      	lsls	r3, r3, #21
 8001ce8:	032d      	lsls	r5, r5, #12
 8001cea:	2600      	movs	r6, #0
 8001cec:	0b2d      	lsrs	r5, r5, #12
 8001cee:	0d5b      	lsrs	r3, r3, #21
 8001cf0:	e7f0      	b.n	8001cd4 <__aeabi_i2d+0x3c>
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	0000041e 	.word	0x0000041e

08001cf8 <__aeabi_d2f>:
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfc:	004b      	lsls	r3, r1, #1
 8001cfe:	030d      	lsls	r5, r1, #12
 8001d00:	0f40      	lsrs	r0, r0, #29
 8001d02:	0d5b      	lsrs	r3, r3, #21
 8001d04:	0fcc      	lsrs	r4, r1, #31
 8001d06:	0a6d      	lsrs	r5, r5, #9
 8001d08:	493a      	ldr	r1, [pc, #232]	; (8001df4 <__aeabi_d2f+0xfc>)
 8001d0a:	4305      	orrs	r5, r0
 8001d0c:	1c58      	adds	r0, r3, #1
 8001d0e:	00d7      	lsls	r7, r2, #3
 8001d10:	4208      	tst	r0, r1
 8001d12:	d00a      	beq.n	8001d2a <__aeabi_d2f+0x32>
 8001d14:	4938      	ldr	r1, [pc, #224]	; (8001df8 <__aeabi_d2f+0x100>)
 8001d16:	1859      	adds	r1, r3, r1
 8001d18:	29fe      	cmp	r1, #254	; 0xfe
 8001d1a:	dd16      	ble.n	8001d4a <__aeabi_d2f+0x52>
 8001d1c:	20ff      	movs	r0, #255	; 0xff
 8001d1e:	2200      	movs	r2, #0
 8001d20:	05c0      	lsls	r0, r0, #23
 8001d22:	4310      	orrs	r0, r2
 8001d24:	07e4      	lsls	r4, r4, #31
 8001d26:	4320      	orrs	r0, r4
 8001d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d106      	bne.n	8001d3c <__aeabi_d2f+0x44>
 8001d2e:	433d      	orrs	r5, r7
 8001d30:	d026      	beq.n	8001d80 <__aeabi_d2f+0x88>
 8001d32:	2205      	movs	r2, #5
 8001d34:	0192      	lsls	r2, r2, #6
 8001d36:	0a52      	lsrs	r2, r2, #9
 8001d38:	b2d8      	uxtb	r0, r3
 8001d3a:	e7f1      	b.n	8001d20 <__aeabi_d2f+0x28>
 8001d3c:	432f      	orrs	r7, r5
 8001d3e:	d0ed      	beq.n	8001d1c <__aeabi_d2f+0x24>
 8001d40:	2280      	movs	r2, #128	; 0x80
 8001d42:	03d2      	lsls	r2, r2, #15
 8001d44:	20ff      	movs	r0, #255	; 0xff
 8001d46:	432a      	orrs	r2, r5
 8001d48:	e7ea      	b.n	8001d20 <__aeabi_d2f+0x28>
 8001d4a:	2900      	cmp	r1, #0
 8001d4c:	dd1b      	ble.n	8001d86 <__aeabi_d2f+0x8e>
 8001d4e:	0192      	lsls	r2, r2, #6
 8001d50:	1e50      	subs	r0, r2, #1
 8001d52:	4182      	sbcs	r2, r0
 8001d54:	00ed      	lsls	r5, r5, #3
 8001d56:	0f7f      	lsrs	r7, r7, #29
 8001d58:	432a      	orrs	r2, r5
 8001d5a:	433a      	orrs	r2, r7
 8001d5c:	0753      	lsls	r3, r2, #29
 8001d5e:	d047      	beq.n	8001df0 <__aeabi_d2f+0xf8>
 8001d60:	230f      	movs	r3, #15
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d000      	beq.n	8001d6a <__aeabi_d2f+0x72>
 8001d68:	3204      	adds	r2, #4
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	04db      	lsls	r3, r3, #19
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d03e      	beq.n	8001df0 <__aeabi_d2f+0xf8>
 8001d72:	1c48      	adds	r0, r1, #1
 8001d74:	29fe      	cmp	r1, #254	; 0xfe
 8001d76:	d0d1      	beq.n	8001d1c <__aeabi_d2f+0x24>
 8001d78:	0192      	lsls	r2, r2, #6
 8001d7a:	0a52      	lsrs	r2, r2, #9
 8001d7c:	b2c0      	uxtb	r0, r0
 8001d7e:	e7cf      	b.n	8001d20 <__aeabi_d2f+0x28>
 8001d80:	2000      	movs	r0, #0
 8001d82:	2200      	movs	r2, #0
 8001d84:	e7cc      	b.n	8001d20 <__aeabi_d2f+0x28>
 8001d86:	000a      	movs	r2, r1
 8001d88:	3217      	adds	r2, #23
 8001d8a:	db2f      	blt.n	8001dec <__aeabi_d2f+0xf4>
 8001d8c:	2680      	movs	r6, #128	; 0x80
 8001d8e:	0436      	lsls	r6, r6, #16
 8001d90:	432e      	orrs	r6, r5
 8001d92:	251e      	movs	r5, #30
 8001d94:	1a6d      	subs	r5, r5, r1
 8001d96:	2d1f      	cmp	r5, #31
 8001d98:	dd11      	ble.n	8001dbe <__aeabi_d2f+0xc6>
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	4252      	negs	r2, r2
 8001d9e:	1a52      	subs	r2, r2, r1
 8001da0:	0031      	movs	r1, r6
 8001da2:	40d1      	lsrs	r1, r2
 8001da4:	2d20      	cmp	r5, #32
 8001da6:	d004      	beq.n	8001db2 <__aeabi_d2f+0xba>
 8001da8:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <__aeabi_d2f+0x104>)
 8001daa:	4694      	mov	ip, r2
 8001dac:	4463      	add	r3, ip
 8001dae:	409e      	lsls	r6, r3
 8001db0:	4337      	orrs	r7, r6
 8001db2:	003a      	movs	r2, r7
 8001db4:	1e53      	subs	r3, r2, #1
 8001db6:	419a      	sbcs	r2, r3
 8001db8:	430a      	orrs	r2, r1
 8001dba:	2100      	movs	r1, #0
 8001dbc:	e7ce      	b.n	8001d5c <__aeabi_d2f+0x64>
 8001dbe:	4a10      	ldr	r2, [pc, #64]	; (8001e00 <__aeabi_d2f+0x108>)
 8001dc0:	0038      	movs	r0, r7
 8001dc2:	4694      	mov	ip, r2
 8001dc4:	4463      	add	r3, ip
 8001dc6:	4098      	lsls	r0, r3
 8001dc8:	003a      	movs	r2, r7
 8001dca:	1e41      	subs	r1, r0, #1
 8001dcc:	4188      	sbcs	r0, r1
 8001dce:	409e      	lsls	r6, r3
 8001dd0:	40ea      	lsrs	r2, r5
 8001dd2:	4330      	orrs	r0, r6
 8001dd4:	4302      	orrs	r2, r0
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	0753      	lsls	r3, r2, #29
 8001dda:	d1c1      	bne.n	8001d60 <__aeabi_d2f+0x68>
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	0013      	movs	r3, r2
 8001de0:	04c9      	lsls	r1, r1, #19
 8001de2:	2001      	movs	r0, #1
 8001de4:	400b      	ands	r3, r1
 8001de6:	420a      	tst	r2, r1
 8001de8:	d1c6      	bne.n	8001d78 <__aeabi_d2f+0x80>
 8001dea:	e7a3      	b.n	8001d34 <__aeabi_d2f+0x3c>
 8001dec:	2300      	movs	r3, #0
 8001dee:	e7a0      	b.n	8001d32 <__aeabi_d2f+0x3a>
 8001df0:	000b      	movs	r3, r1
 8001df2:	e79f      	b.n	8001d34 <__aeabi_d2f+0x3c>
 8001df4:	000007fe 	.word	0x000007fe
 8001df8:	fffffc80 	.word	0xfffffc80
 8001dfc:	fffffca2 	.word	0xfffffca2
 8001e00:	fffffc82 	.word	0xfffffc82

08001e04 <__clzsi2>:
 8001e04:	211c      	movs	r1, #28
 8001e06:	2301      	movs	r3, #1
 8001e08:	041b      	lsls	r3, r3, #16
 8001e0a:	4298      	cmp	r0, r3
 8001e0c:	d301      	bcc.n	8001e12 <__clzsi2+0xe>
 8001e0e:	0c00      	lsrs	r0, r0, #16
 8001e10:	3910      	subs	r1, #16
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	4298      	cmp	r0, r3
 8001e16:	d301      	bcc.n	8001e1c <__clzsi2+0x18>
 8001e18:	0a00      	lsrs	r0, r0, #8
 8001e1a:	3908      	subs	r1, #8
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	4298      	cmp	r0, r3
 8001e20:	d301      	bcc.n	8001e26 <__clzsi2+0x22>
 8001e22:	0900      	lsrs	r0, r0, #4
 8001e24:	3904      	subs	r1, #4
 8001e26:	a202      	add	r2, pc, #8	; (adr r2, 8001e30 <__clzsi2+0x2c>)
 8001e28:	5c10      	ldrb	r0, [r2, r0]
 8001e2a:	1840      	adds	r0, r0, r1
 8001e2c:	4770      	bx	lr
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	02020304 	.word	0x02020304
 8001e34:	01010101 	.word	0x01010101
	...

08001e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e40:	b5b0      	push	{r4, r5, r7, lr}
 8001e42:	b08c      	sub	sp, #48	; 0x30
 8001e44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e46:	f000 fce5 	bl	8002814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e4a:	f000 f8c9 	bl	8001fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e4e:	f000 fa67 	bl	8002320 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e52:	f000 f91f 	bl	8002094 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001e56:	f000 f95d 	bl	8002114 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e5a:	f000 f9af 	bl	80021bc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001e5e:	f000 fa2f 	bl	80022c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Start Timer 2 and call ISR on every 1 ms.
  HAL_TIM_Base_Start_IT(&htim2);
 8001e62:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <main+0x170>)
 8001e64:	0018      	movs	r0, r3
 8001e66:	f002 fc65 	bl	8004734 <HAL_TIM_Base_Start_IT>

  // Enable UARt2 Received interrupt on received of 1 byte.
  HAL_UART_Receive_IT(&huart2,uartReceivedData,1);
 8001e6a:	4952      	ldr	r1, [pc, #328]	; (8001fb4 <main+0x174>)
 8001e6c:	4b52      	ldr	r3, [pc, #328]	; (8001fb8 <main+0x178>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	0018      	movs	r0, r3
 8001e72:	f003 fc59 	bl	8005728 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  buffer[0] = Register_Address;
 8001e76:	2200      	movs	r2, #0
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	701a      	strb	r2, [r3, #0]

	  // Inform to sensor that we want to make communication.
	  ret = HAL_I2C_Master_Transmit(&hi2c1,TMP1075_Address,buffer,1/*size of byte need to write*/, 1000);
 8001e7c:	2390      	movs	r3, #144	; 0x90
 8001e7e:	b299      	uxth	r1, r3
 8001e80:	2525      	movs	r5, #37	; 0x25
 8001e82:	197c      	adds	r4, r7, r5
 8001e84:	1d3a      	adds	r2, r7, #4
 8001e86:	484d      	ldr	r0, [pc, #308]	; (8001fbc <main+0x17c>)
 8001e88:	23fa      	movs	r3, #250	; 0xfa
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f001 f8b2 	bl	8002ff8 <HAL_I2C_Master_Transmit>
 8001e94:	0003      	movs	r3, r0
 8001e96:	7023      	strb	r3, [r4, #0]

	  if (ret != HAL_OK){
 8001e98:	197b      	adds	r3, r7, r5
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d012      	beq.n	8001ec6 <main+0x86>
		  // Error is generated
		  strcpy((char*)buffer, "Error on Transmit\r\n");
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	4a47      	ldr	r2, [pc, #284]	; (8001fc0 <main+0x180>)
 8001ea4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ea6:	c313      	stmia	r3!, {r0, r1, r4}
 8001ea8:	ca03      	ldmia	r2!, {r0, r1}
 8001eaa:	c303      	stmia	r3!, {r0, r1}
		  HAL_UART_Transmit(&huart2, buffer,strlen((char*)buffer),1000);
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f7fe f934 	bl	800011c <strlen>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	23fa      	movs	r3, #250	; 0xfa
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	1d39      	adds	r1, r7, #4
 8001ebe:	483e      	ldr	r0, [pc, #248]	; (8001fb8 <main+0x178>)
 8001ec0:	f003 fb92 	bl	80055e8 <HAL_UART_Transmit>
 8001ec4:	e06d      	b.n	8001fa2 <main+0x162>
	  }
	  else{

		  // Read 2 bytes of raw data from temperature register
		  ret = HAL_I2C_Master_Receive(&hi2c1,TMP1075_Address,buffer,2 /*size of byte need to read*/, 1000);
 8001ec6:	2390      	movs	r3, #144	; 0x90
 8001ec8:	b299      	uxth	r1, r3
 8001eca:	2525      	movs	r5, #37	; 0x25
 8001ecc:	197c      	adds	r4, r7, r5
 8001ece:	1d3a      	adds	r2, r7, #4
 8001ed0:	483a      	ldr	r0, [pc, #232]	; (8001fbc <main+0x17c>)
 8001ed2:	23fa      	movs	r3, #250	; 0xfa
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f001 f995 	bl	8003208 <HAL_I2C_Master_Receive>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	7023      	strb	r3, [r4, #0]
		  if (ret != HAL_OK){
 8001ee2:	197b      	adds	r3, r7, r5
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d012      	beq.n	8001f10 <main+0xd0>
				  // Error is generated
			  	 strcpy((char*)buffer, "Error on Read\r\n");
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	4a35      	ldr	r2, [pc, #212]	; (8001fc4 <main+0x184>)
 8001eee:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ef0:	c313      	stmia	r3!, {r0, r1, r4}
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	601a      	str	r2, [r3, #0]
			  	 HAL_UART_Transmit(&huart2, buffer,strlen((char*)buffer),1000);
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7fe f90f 	bl	800011c <strlen>
 8001efe:	0003      	movs	r3, r0
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	23fa      	movs	r3, #250	; 0xfa
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	1d39      	adds	r1, r7, #4
 8001f08:	482b      	ldr	r0, [pc, #172]	; (8001fb8 <main+0x178>)
 8001f0a:	f003 fb6d 	bl	80055e8 <HAL_UART_Transmit>
 8001f0e:	e048      	b.n	8001fa2 <main+0x162>
		  }
		  else {
			  rawTemperatureValue = ((int16_t)buffer[0] << 4) | (buffer[1] >> 4);
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	b219      	sxth	r1, r3
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	785b      	ldrb	r3, [r3, #1]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	2026      	movs	r0, #38	; 0x26
 8001f24:	183b      	adds	r3, r7, r0
 8001f26:	430a      	orrs	r2, r1
 8001f28:	801a      	strh	r2, [r3, #0]

			  // Make sure temperature if negative then convert in negative.
			  // maximum 12 bit value 0x7FF
			  if (rawTemperatureValue > 0x7FF) {
 8001f2a:	0001      	movs	r1, r0
 8001f2c:	187b      	adds	r3, r7, r1
 8001f2e:	2200      	movs	r2, #0
 8001f30:	5e9a      	ldrsh	r2, [r3, r2]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	429a      	cmp	r2, r3
 8001f38:	db05      	blt.n	8001f46 <main+0x106>
				  rawTemperatureValue |= 0xF000;
 8001f3a:	187b      	adds	r3, r7, r1
 8001f3c:	187a      	adds	r2, r7, r1
 8001f3e:	8812      	ldrh	r2, [r2, #0]
 8001f40:	4921      	ldr	r1, [pc, #132]	; (8001fc8 <main+0x188>)
 8001f42:	430a      	orrs	r2, r1
 8001f44:	801a      	strh	r2, [r3, #0]
			  }

			  // get floating point temperature
			  readableTempreature =  (rawTemperatureValue * 0.0625) * 9/5 + 32  ;
 8001f46:	2326      	movs	r3, #38	; 0x26
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	5e9b      	ldrsh	r3, [r3, r2]
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f7ff fea2 	bl	8001c98 <__aeabi_i2d>
 8001f54:	2200      	movs	r2, #0
 8001f56:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <main+0x18c>)
 8001f58:	f7ff fbdc 	bl	8001714 <__aeabi_dmul>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	000b      	movs	r3, r1
 8001f60:	0010      	movs	r0, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	2200      	movs	r2, #0
 8001f66:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <main+0x190>)
 8001f68:	f7ff fbd4 	bl	8001714 <__aeabi_dmul>
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	000b      	movs	r3, r1
 8001f70:	0010      	movs	r0, r2
 8001f72:	0019      	movs	r1, r3
 8001f74:	2200      	movs	r2, #0
 8001f76:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <main+0x194>)
 8001f78:	f7ff f8de 	bl	8001138 <__aeabi_ddiv>
 8001f7c:	0002      	movs	r2, r0
 8001f7e:	000b      	movs	r3, r1
 8001f80:	0010      	movs	r0, r2
 8001f82:	0019      	movs	r1, r3
 8001f84:	2200      	movs	r2, #0
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <main+0x198>)
 8001f88:	f7fe fd76 	bl	8000a78 <__aeabi_dadd>
 8001f8c:	0002      	movs	r2, r0
 8001f8e:	000b      	movs	r3, r1
 8001f90:	0010      	movs	r0, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	f7ff feb0 	bl	8001cf8 <__aeabi_d2f>
 8001f98:	1c03      	adds	r3, r0, #0
 8001f9a:	623b      	str	r3, [r7, #32]

			  currentTemperature = readableTempreature;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <main+0x19c>)
 8001f9e:	6a3a      	ldr	r2, [r7, #32]
 8001fa0:	601a      	str	r2, [r3, #0]
		  }
	  }

	  HAL_Delay(500);
 8001fa2:	23fa      	movs	r3, #250	; 0xfa
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f000 fc98 	bl	80028dc <HAL_Delay>
	  buffer[0] = Register_Address;
 8001fac:	e763      	b.n	8001e76 <main+0x36>
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	200000cc 	.word	0x200000cc
 8001fb4:	200001ec 	.word	0x200001ec
 8001fb8:	2000015c 	.word	0x2000015c
 8001fbc:	20000078 	.word	0x20000078
 8001fc0:	08007430 	.word	0x08007430
 8001fc4:	08007444 	.word	0x08007444
 8001fc8:	fffff000 	.word	0xfffff000
 8001fcc:	3fb00000 	.word	0x3fb00000
 8001fd0:	40220000 	.word	0x40220000
 8001fd4:	40140000 	.word	0x40140000
 8001fd8:	40400000 	.word	0x40400000
 8001fdc:	200001e4 	.word	0x200001e4

08001fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b099      	sub	sp, #100	; 0x64
 8001fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fe6:	242c      	movs	r4, #44	; 0x2c
 8001fe8:	193b      	adds	r3, r7, r4
 8001fea:	0018      	movs	r0, r3
 8001fec:	2334      	movs	r3, #52	; 0x34
 8001fee:	001a      	movs	r2, r3
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	f004 fd8b 	bl	8006b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff6:	231c      	movs	r3, #28
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	2310      	movs	r3, #16
 8001ffe:	001a      	movs	r2, r3
 8002000:	2100      	movs	r1, #0
 8002002:	f004 fd83 	bl	8006b0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002006:	003b      	movs	r3, r7
 8002008:	0018      	movs	r0, r3
 800200a:	231c      	movs	r3, #28
 800200c:	001a      	movs	r2, r3
 800200e:	2100      	movs	r1, #0
 8002010:	f004 fd7c 	bl	8006b0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002014:	0021      	movs	r1, r4
 8002016:	187b      	adds	r3, r7, r1
 8002018:	2202      	movs	r2, #2
 800201a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800201c:	187b      	adds	r3, r7, r1
 800201e:	2201      	movs	r2, #1
 8002020:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002022:	187b      	adds	r3, r7, r1
 8002024:	2210      	movs	r2, #16
 8002026:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002028:	187b      	adds	r3, r7, r1
 800202a:	2200      	movs	r2, #0
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800202e:	187b      	adds	r3, r7, r1
 8002030:	0018      	movs	r0, r3
 8002032:	f001 fd3f 	bl	8003ab4 <HAL_RCC_OscConfig>
 8002036:	1e03      	subs	r3, r0, #0
 8002038:	d001      	beq.n	800203e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800203a:	f000 fa13 	bl	8002464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203e:	211c      	movs	r1, #28
 8002040:	187b      	adds	r3, r7, r1
 8002042:	2207      	movs	r2, #7
 8002044:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002046:	187b      	adds	r3, r7, r1
 8002048:	2200      	movs	r2, #0
 800204a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800204c:	187b      	adds	r3, r7, r1
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002052:	187b      	adds	r3, r7, r1
 8002054:	2200      	movs	r2, #0
 8002056:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002058:	187b      	adds	r3, r7, r1
 800205a:	2100      	movs	r1, #0
 800205c:	0018      	movs	r0, r3
 800205e:	f002 f8af 	bl	80041c0 <HAL_RCC_ClockConfig>
 8002062:	1e03      	subs	r3, r0, #0
 8002064:	d001      	beq.n	800206a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002066:	f000 f9fd 	bl	8002464 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800206a:	003b      	movs	r3, r7
 800206c:	2222      	movs	r2, #34	; 0x22
 800206e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002070:	003b      	movs	r3, r7
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002076:	003b      	movs	r3, r7
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800207c:	003b      	movs	r3, r7
 800207e:	0018      	movs	r0, r3
 8002080:	f002 fa0a 	bl	8004498 <HAL_RCCEx_PeriphCLKConfig>
 8002084:	1e03      	subs	r3, r0, #0
 8002086:	d001      	beq.n	800208c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002088:	f000 f9ec 	bl	8002464 <Error_Handler>
  }
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b019      	add	sp, #100	; 0x64
 8002092:	bd90      	pop	{r4, r7, pc}

08002094 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <MX_I2C1_Init+0x74>)
 800209a:	4a1c      	ldr	r2, [pc, #112]	; (800210c <MX_I2C1_Init+0x78>)
 800209c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <MX_I2C1_Init+0x74>)
 80020a0:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <MX_I2C1_Init+0x7c>)
 80020a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <MX_I2C1_Init+0x74>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <MX_I2C1_Init+0x74>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <MX_I2C1_Init+0x74>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020b6:	4b14      	ldr	r3, [pc, #80]	; (8002108 <MX_I2C1_Init+0x74>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <MX_I2C1_Init+0x74>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_I2C1_Init+0x74>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <MX_I2C1_Init+0x74>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <MX_I2C1_Init+0x74>)
 80020d0:	0018      	movs	r0, r3
 80020d2:	f000 fefb 	bl	8002ecc <HAL_I2C_Init>
 80020d6:	1e03      	subs	r3, r0, #0
 80020d8:	d001      	beq.n	80020de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020da:	f000 f9c3 	bl	8002464 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <MX_I2C1_Init+0x74>)
 80020e0:	2100      	movs	r1, #0
 80020e2:	0018      	movs	r0, r3
 80020e4:	f001 fc4e 	bl	8003984 <HAL_I2CEx_ConfigAnalogFilter>
 80020e8:	1e03      	subs	r3, r0, #0
 80020ea:	d001      	beq.n	80020f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80020ec:	f000 f9ba 	bl	8002464 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <MX_I2C1_Init+0x74>)
 80020f2:	2100      	movs	r1, #0
 80020f4:	0018      	movs	r0, r3
 80020f6:	f001 fc91 	bl	8003a1c <HAL_I2CEx_ConfigDigitalFilter>
 80020fa:	1e03      	subs	r3, r0, #0
 80020fc:	d001      	beq.n	8002102 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80020fe:	f000 f9b1 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000078 	.word	0x20000078
 800210c:	40005400 	.word	0x40005400
 8002110:	2000090e 	.word	0x2000090e

08002114 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800211a:	2308      	movs	r3, #8
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	0018      	movs	r0, r3
 8002120:	2310      	movs	r3, #16
 8002122:	001a      	movs	r2, r3
 8002124:	2100      	movs	r1, #0
 8002126:	f004 fcf1 	bl	8006b0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212a:	003b      	movs	r3, r7
 800212c:	0018      	movs	r0, r3
 800212e:	2308      	movs	r3, #8
 8002130:	001a      	movs	r2, r3
 8002132:	2100      	movs	r1, #0
 8002134:	f004 fcea 	bl	8006b0c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002138:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <MX_TIM2_Init+0xa0>)
 800213a:	2280      	movs	r2, #128	; 0x80
 800213c:	05d2      	lsls	r2, r2, #23
 800213e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8002140:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <MX_TIM2_Init+0xa0>)
 8002142:	2207      	movs	r2, #7
 8002144:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002146:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <MX_TIM2_Init+0xa0>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <MX_TIM2_Init+0xa0>)
 800214e:	4a1a      	ldr	r2, [pc, #104]	; (80021b8 <MX_TIM2_Init+0xa4>)
 8002150:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <MX_TIM2_Init+0xa0>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002158:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <MX_TIM2_Init+0xa0>)
 800215a:	2200      	movs	r2, #0
 800215c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <MX_TIM2_Init+0xa0>)
 8002160:	0018      	movs	r0, r3
 8002162:	f002 fa97 	bl	8004694 <HAL_TIM_Base_Init>
 8002166:	1e03      	subs	r3, r0, #0
 8002168:	d001      	beq.n	800216e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800216a:	f000 f97b 	bl	8002464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800216e:	2108      	movs	r1, #8
 8002170:	187b      	adds	r3, r7, r1
 8002172:	2280      	movs	r2, #128	; 0x80
 8002174:	0152      	lsls	r2, r2, #5
 8002176:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002178:	187a      	adds	r2, r7, r1
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <MX_TIM2_Init+0xa0>)
 800217c:	0011      	movs	r1, r2
 800217e:	0018      	movs	r0, r3
 8002180:	f002 fd5e 	bl	8004c40 <HAL_TIM_ConfigClockSource>
 8002184:	1e03      	subs	r3, r0, #0
 8002186:	d001      	beq.n	800218c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002188:	f000 f96c 	bl	8002464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218c:	003b      	movs	r3, r7
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002192:	003b      	movs	r3, r7
 8002194:	2200      	movs	r2, #0
 8002196:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002198:	003a      	movs	r2, r7
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <MX_TIM2_Init+0xa0>)
 800219c:	0011      	movs	r1, r2
 800219e:	0018      	movs	r0, r3
 80021a0:	f003 f960 	bl	8005464 <HAL_TIMEx_MasterConfigSynchronization>
 80021a4:	1e03      	subs	r3, r0, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80021a8:	f000 f95c 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b006      	add	sp, #24
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	200000cc 	.word	0x200000cc
 80021b8:	000003e7 	.word	0x000003e7

080021bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08e      	sub	sp, #56	; 0x38
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c2:	2328      	movs	r3, #40	; 0x28
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	0018      	movs	r0, r3
 80021c8:	2310      	movs	r3, #16
 80021ca:	001a      	movs	r2, r3
 80021cc:	2100      	movs	r1, #0
 80021ce:	f004 fc9d 	bl	8006b0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d2:	2320      	movs	r3, #32
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	0018      	movs	r0, r3
 80021d8:	2308      	movs	r3, #8
 80021da:	001a      	movs	r2, r3
 80021dc:	2100      	movs	r1, #0
 80021de:	f004 fc95 	bl	8006b0c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	0018      	movs	r0, r3
 80021e6:	231c      	movs	r3, #28
 80021e8:	001a      	movs	r2, r3
 80021ea:	2100      	movs	r1, #0
 80021ec:	f004 fc8e 	bl	8006b0c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021f0:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <MX_TIM3_Init+0xf4>)
 80021f2:	4a30      	ldr	r2, [pc, #192]	; (80022b4 <MX_TIM3_Init+0xf8>)
 80021f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 80021f6:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <MX_TIM3_Init+0xf4>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fc:	4b2c      	ldr	r3, [pc, #176]	; (80022b0 <MX_TIM3_Init+0xf4>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002202:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <MX_TIM3_Init+0xf4>)
 8002204:	4a2c      	ldr	r2, [pc, #176]	; (80022b8 <MX_TIM3_Init+0xfc>)
 8002206:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002208:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <MX_TIM3_Init+0xf4>)
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800220e:	4b28      	ldr	r3, [pc, #160]	; (80022b0 <MX_TIM3_Init+0xf4>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002214:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <MX_TIM3_Init+0xf4>)
 8002216:	0018      	movs	r0, r3
 8002218:	f002 fa3c 	bl	8004694 <HAL_TIM_Base_Init>
 800221c:	1e03      	subs	r3, r0, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002220:	f000 f920 	bl	8002464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002224:	2128      	movs	r1, #40	; 0x28
 8002226:	187b      	adds	r3, r7, r1
 8002228:	2280      	movs	r2, #128	; 0x80
 800222a:	0152      	lsls	r2, r2, #5
 800222c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800222e:	187a      	adds	r2, r7, r1
 8002230:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <MX_TIM3_Init+0xf4>)
 8002232:	0011      	movs	r1, r2
 8002234:	0018      	movs	r0, r3
 8002236:	f002 fd03 	bl	8004c40 <HAL_TIM_ConfigClockSource>
 800223a:	1e03      	subs	r3, r0, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800223e:	f000 f911 	bl	8002464 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002242:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <MX_TIM3_Init+0xf4>)
 8002244:	0018      	movs	r0, r3
 8002246:	f002 fac7 	bl	80047d8 <HAL_TIM_PWM_Init>
 800224a:	1e03      	subs	r3, r0, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800224e:	f000 f909 	bl	8002464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002252:	2120      	movs	r1, #32
 8002254:	187b      	adds	r3, r7, r1
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225a:	187b      	adds	r3, r7, r1
 800225c:	2200      	movs	r2, #0
 800225e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002260:	187a      	adds	r2, r7, r1
 8002262:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <MX_TIM3_Init+0xf4>)
 8002264:	0011      	movs	r1, r2
 8002266:	0018      	movs	r0, r3
 8002268:	f003 f8fc 	bl	8005464 <HAL_TIMEx_MasterConfigSynchronization>
 800226c:	1e03      	subs	r3, r0, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8002270:	f000 f8f8 	bl	8002464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	2260      	movs	r2, #96	; 0x60
 8002278:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 5000;
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	4a0f      	ldr	r2, [pc, #60]	; (80022bc <MX_TIM3_Init+0x100>)
 800227e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800228c:	1d39      	adds	r1, r7, #4
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <MX_TIM3_Init+0xf4>)
 8002290:	2204      	movs	r2, #4
 8002292:	0018      	movs	r0, r3
 8002294:	f002 fc0e 	bl	8004ab4 <HAL_TIM_PWM_ConfigChannel>
 8002298:	1e03      	subs	r3, r0, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800229c:	f000 f8e2 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <MX_TIM3_Init+0xf4>)
 80022a2:	0018      	movs	r0, r3
 80022a4:	f000 f98e 	bl	80025c4 <HAL_TIM_MspPostInit>

}
 80022a8:	46c0      	nop			; (mov r8, r8)
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b00e      	add	sp, #56	; 0x38
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000114 	.word	0x20000114
 80022b4:	40000400 	.word	0x40000400
 80022b8:	0000270f 	.word	0x0000270f
 80022bc:	00001388 	.word	0x00001388

080022c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <MX_USART2_UART_Init+0x58>)
 80022c6:	4a15      	ldr	r2, [pc, #84]	; (800231c <MX_USART2_UART_Init+0x5c>)
 80022c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <MX_USART2_UART_Init+0x58>)
 80022cc:	2296      	movs	r2, #150	; 0x96
 80022ce:	0212      	lsls	r2, r2, #8
 80022d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <MX_USART2_UART_Init+0x58>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <MX_USART2_UART_Init+0x58>)
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <MX_USART2_UART_Init+0x58>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <MX_USART2_UART_Init+0x58>)
 80022e6:	220c      	movs	r2, #12
 80022e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <MX_USART2_UART_Init+0x58>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <MX_USART2_UART_Init+0x58>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <MX_USART2_UART_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <MX_USART2_UART_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <MX_USART2_UART_Init+0x58>)
 8002304:	0018      	movs	r0, r3
 8002306:	f003 f91b 	bl	8005540 <HAL_UART_Init>
 800230a:	1e03      	subs	r3, r0, #0
 800230c:	d001      	beq.n	8002312 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800230e:	f000 f8a9 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	2000015c 	.word	0x2000015c
 800231c:	40004400 	.word	0x40004400

08002320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <MX_GPIO_Init+0x48>)
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <MX_GPIO_Init+0x48>)
 800232c:	2180      	movs	r1, #128	; 0x80
 800232e:	0289      	lsls	r1, r1, #10
 8002330:	430a      	orrs	r2, r1
 8002332:	615a      	str	r2, [r3, #20]
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <MX_GPIO_Init+0x48>)
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	029b      	lsls	r3, r3, #10
 800233c:	4013      	ands	r3, r2
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <MX_GPIO_Init+0x48>)
 8002344:	695a      	ldr	r2, [r3, #20]
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <MX_GPIO_Init+0x48>)
 8002348:	2180      	movs	r1, #128	; 0x80
 800234a:	02c9      	lsls	r1, r1, #11
 800234c:	430a      	orrs	r2, r1
 800234e:	615a      	str	r2, [r3, #20]
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <MX_GPIO_Init+0x48>)
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	02db      	lsls	r3, r3, #11
 8002358:	4013      	ands	r3, r2
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	46bd      	mov	sp, r7
 8002362:	b002      	add	sp, #8
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	40021000 	.word	0x40021000

0800236c <HAL_UART_RxCpltCallback>:
		timer2CallBackCount = timer2CallBackCountReload;
	}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2) {
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a30      	ldr	r2, [pc, #192]	; (800243c <HAL_UART_RxCpltCallback+0xd0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d15a      	bne.n	8002434 <HAL_UART_RxCpltCallback+0xc8>

		if (uartReceivedIndex == 0){
 800237e:	4b30      	ldr	r3, [pc, #192]	; (8002440 <HAL_UART_RxCpltCallback+0xd4>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d105      	bne.n	8002392 <HAL_UART_RxCpltCallback+0x26>
			memset(&uartReceivedBuffer,0,50);
 8002386:	4b2f      	ldr	r3, [pc, #188]	; (8002444 <HAL_UART_RxCpltCallback+0xd8>)
 8002388:	2232      	movs	r2, #50	; 0x32
 800238a:	2100      	movs	r1, #0
 800238c:	0018      	movs	r0, r3
 800238e:	f004 fbbd 	bl	8006b0c <memset>
		}

		char asciiOfCR = 13;
 8002392:	210f      	movs	r1, #15
 8002394:	187b      	adds	r3, r7, r1
 8002396:	220d      	movs	r2, #13
 8002398:	701a      	strb	r2, [r3, #0]

		if (uartReceivedBuffer[0] != asciiOfCR){
 800239a:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <HAL_UART_RxCpltCallback+0xd8>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	187a      	adds	r2, r7, r1
 80023a0:	7812      	ldrb	r2, [r2, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d00b      	beq.n	80023be <HAL_UART_RxCpltCallback+0x52>
			uartReceivedBuffer[uartReceivedIndex++] = uartReceivedBuffer[0];
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_UART_RxCpltCallback+0xd4>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	b2d1      	uxtb	r1, r2
 80023ae:	4a24      	ldr	r2, [pc, #144]	; (8002440 <HAL_UART_RxCpltCallback+0xd4>)
 80023b0:	7011      	strb	r1, [r2, #0]
 80023b2:	001a      	movs	r2, r3
 80023b4:	4b23      	ldr	r3, [pc, #140]	; (8002444 <HAL_UART_RxCpltCallback+0xd8>)
 80023b6:	7819      	ldrb	r1, [r3, #0]
 80023b8:	4b22      	ldr	r3, [pc, #136]	; (8002444 <HAL_UART_RxCpltCallback+0xd8>)
 80023ba:	5499      	strb	r1, [r3, r2]
 80023bc:	e034      	b.n	8002428 <HAL_UART_RxCpltCallback+0xbc>
		}
		else {
			uartReceivedIndex = 0;
 80023be:	4b20      	ldr	r3, [pc, #128]	; (8002440 <HAL_UART_RxCpltCallback+0xd4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]

			// On Received of read command from USER
			if (!strcmp((char*)uartReceivedBuffer, "read")){
 80023c4:	4a20      	ldr	r2, [pc, #128]	; (8002448 <HAL_UART_RxCpltCallback+0xdc>)
 80023c6:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <HAL_UART_RxCpltCallback+0xd8>)
 80023c8:	0011      	movs	r1, r2
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7fd fe9c 	bl	8000108 <strcmp>
 80023d0:	1e03      	subs	r3, r0, #0
 80023d2:	d129      	bne.n	8002428 <HAL_UART_RxCpltCallback+0xbc>
				unsigned int tempVal = currentTemperature * 100;
 80023d4:	4b1d      	ldr	r3, [pc, #116]	; (800244c <HAL_UART_RxCpltCallback+0xe0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	491d      	ldr	r1, [pc, #116]	; (8002450 <HAL_UART_RxCpltCallback+0xe4>)
 80023da:	1c18      	adds	r0, r3, #0
 80023dc:	f7fe f83e 	bl	800045c <__aeabi_fmul>
 80023e0:	1c03      	adds	r3, r0, #0
 80023e2:	1c18      	adds	r0, r3, #0
 80023e4:	f7fd ff72 	bl	80002cc <__aeabi_f2uiz>
 80023e8:	0003      	movs	r3, r0
 80023ea:	60bb      	str	r3, [r7, #8]
				sprintf((char*) uartTransmitBuffer,"%u.%02u F\r\n",(unsigned int)tempVal/100 , (unsigned int)tempVal%100);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2164      	movs	r1, #100	; 0x64
 80023f0:	0018      	movs	r0, r3
 80023f2:	f7fd fea5 	bl	8000140 <__udivsi3>
 80023f6:	0003      	movs	r3, r0
 80023f8:	001c      	movs	r4, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2164      	movs	r1, #100	; 0x64
 80023fe:	0018      	movs	r0, r3
 8002400:	f7fd ff24 	bl	800024c <__aeabi_uidivmod>
 8002404:	000b      	movs	r3, r1
 8002406:	4913      	ldr	r1, [pc, #76]	; (8002454 <HAL_UART_RxCpltCallback+0xe8>)
 8002408:	4813      	ldr	r0, [pc, #76]	; (8002458 <HAL_UART_RxCpltCallback+0xec>)
 800240a:	0022      	movs	r2, r4
 800240c:	f004 fb5e 	bl	8006acc <siprintf>
				HAL_UART_Transmit(&huart2, uartTransmitBuffer,strlen((char*)uartTransmitBuffer),1000);
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_UART_RxCpltCallback+0xec>)
 8002412:	0018      	movs	r0, r3
 8002414:	f7fd fe82 	bl	800011c <strlen>
 8002418:	0003      	movs	r3, r0
 800241a:	b29a      	uxth	r2, r3
 800241c:	23fa      	movs	r3, #250	; 0xfa
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	490d      	ldr	r1, [pc, #52]	; (8002458 <HAL_UART_RxCpltCallback+0xec>)
 8002422:	480e      	ldr	r0, [pc, #56]	; (800245c <HAL_UART_RxCpltCallback+0xf0>)
 8002424:	f003 f8e0 	bl	80055e8 <HAL_UART_Transmit>
			}
		}

		// enable again ISR
		HAL_UART_Receive_IT(&huart2,uartReceivedData,1);
 8002428:	490d      	ldr	r1, [pc, #52]	; (8002460 <HAL_UART_RxCpltCallback+0xf4>)
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_UART_RxCpltCallback+0xf0>)
 800242c:	2201      	movs	r2, #1
 800242e:	0018      	movs	r0, r3
 8002430:	f003 f97a 	bl	8005728 <HAL_UART_Receive_IT>
	}


}
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	b005      	add	sp, #20
 800243a:	bd90      	pop	{r4, r7, pc}
 800243c:	40004400 	.word	0x40004400
 8002440:	200001e8 	.word	0x200001e8
 8002444:	200001f0 	.word	0x200001f0
 8002448:	08007454 	.word	0x08007454
 800244c:	200001e4 	.word	0x200001e4
 8002450:	42c80000 	.word	0x42c80000
 8002454:	0800745c 	.word	0x0800745c
 8002458:	20000224 	.word	0x20000224
 800245c:	2000015c 	.word	0x2000015c
 8002460:	200001ec 	.word	0x200001ec

08002464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002468:	b672      	cpsid	i
}
 800246a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800246c:	e7fe      	b.n	800246c <Error_Handler+0x8>
	...

08002470 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002476:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <HAL_MspInit+0x44>)
 8002478:	699a      	ldr	r2, [r3, #24]
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <HAL_MspInit+0x44>)
 800247c:	2101      	movs	r1, #1
 800247e:	430a      	orrs	r2, r1
 8002480:	619a      	str	r2, [r3, #24]
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <HAL_MspInit+0x44>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2201      	movs	r2, #1
 8002488:	4013      	ands	r3, r2
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <HAL_MspInit+0x44>)
 8002490:	69da      	ldr	r2, [r3, #28]
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <HAL_MspInit+0x44>)
 8002494:	2180      	movs	r1, #128	; 0x80
 8002496:	0549      	lsls	r1, r1, #21
 8002498:	430a      	orrs	r2, r1
 800249a:	61da      	str	r2, [r3, #28]
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_MspInit+0x44>)
 800249e:	69da      	ldr	r2, [r3, #28]
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	055b      	lsls	r3, r3, #21
 80024a4:	4013      	ands	r3, r2
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b002      	add	sp, #8
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	40021000 	.word	0x40021000

080024b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b08b      	sub	sp, #44	; 0x2c
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	2414      	movs	r4, #20
 80024c2:	193b      	adds	r3, r7, r4
 80024c4:	0018      	movs	r0, r3
 80024c6:	2314      	movs	r3, #20
 80024c8:	001a      	movs	r2, r3
 80024ca:	2100      	movs	r1, #0
 80024cc:	f004 fb1e 	bl	8006b0c <memset>
  if(hi2c->Instance==I2C1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <HAL_I2C_MspInit+0x90>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d131      	bne.n	800253e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024da:	4b1c      	ldr	r3, [pc, #112]	; (800254c <HAL_I2C_MspInit+0x94>)
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	4b1b      	ldr	r3, [pc, #108]	; (800254c <HAL_I2C_MspInit+0x94>)
 80024e0:	2180      	movs	r1, #128	; 0x80
 80024e2:	02c9      	lsls	r1, r1, #11
 80024e4:	430a      	orrs	r2, r1
 80024e6:	615a      	str	r2, [r3, #20]
 80024e8:	4b18      	ldr	r3, [pc, #96]	; (800254c <HAL_I2C_MspInit+0x94>)
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	02db      	lsls	r3, r3, #11
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024f6:	0021      	movs	r1, r4
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	22c0      	movs	r2, #192	; 0xc0
 80024fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2212      	movs	r2, #18
 8002502:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	187b      	adds	r3, r7, r1
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800250a:	187b      	adds	r3, r7, r1
 800250c:	2203      	movs	r2, #3
 800250e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002510:	187b      	adds	r3, r7, r1
 8002512:	2201      	movs	r2, #1
 8002514:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002516:	187b      	adds	r3, r7, r1
 8002518:	4a0d      	ldr	r2, [pc, #52]	; (8002550 <HAL_I2C_MspInit+0x98>)
 800251a:	0019      	movs	r1, r3
 800251c:	0010      	movs	r0, r2
 800251e:	f000 fb5d 	bl	8002bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_I2C_MspInit+0x94>)
 8002524:	69da      	ldr	r2, [r3, #28]
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_I2C_MspInit+0x94>)
 8002528:	2180      	movs	r1, #128	; 0x80
 800252a:	0389      	lsls	r1, r1, #14
 800252c:	430a      	orrs	r2, r1
 800252e:	61da      	str	r2, [r3, #28]
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_I2C_MspInit+0x94>)
 8002532:	69da      	ldr	r2, [r3, #28]
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	039b      	lsls	r3, r3, #14
 8002538:	4013      	ands	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	46bd      	mov	sp, r7
 8002542:	b00b      	add	sp, #44	; 0x2c
 8002544:	bd90      	pop	{r4, r7, pc}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	40005400 	.word	0x40005400
 800254c:	40021000 	.word	0x40021000
 8002550:	48000400 	.word	0x48000400

08002554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	05db      	lsls	r3, r3, #23
 8002564:	429a      	cmp	r2, r3
 8002566:	d114      	bne.n	8002592 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002568:	4b14      	ldr	r3, [pc, #80]	; (80025bc <HAL_TIM_Base_MspInit+0x68>)
 800256a:	69da      	ldr	r2, [r3, #28]
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <HAL_TIM_Base_MspInit+0x68>)
 800256e:	2101      	movs	r1, #1
 8002570:	430a      	orrs	r2, r1
 8002572:	61da      	str	r2, [r3, #28]
 8002574:	4b11      	ldr	r3, [pc, #68]	; (80025bc <HAL_TIM_Base_MspInit+0x68>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	2201      	movs	r2, #1
 800257a:	4013      	ands	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002580:	2200      	movs	r2, #0
 8002582:	2100      	movs	r1, #0
 8002584:	200f      	movs	r0, #15
 8002586:	f000 fa79 	bl	8002a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800258a:	200f      	movs	r0, #15
 800258c:	f000 fa8b 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002590:	e010      	b.n	80025b4 <HAL_TIM_Base_MspInit+0x60>
  else if(htim_base->Instance==TIM3)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <HAL_TIM_Base_MspInit+0x6c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d10b      	bne.n	80025b4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800259c:	4b07      	ldr	r3, [pc, #28]	; (80025bc <HAL_TIM_Base_MspInit+0x68>)
 800259e:	69da      	ldr	r2, [r3, #28]
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_TIM_Base_MspInit+0x68>)
 80025a2:	2102      	movs	r1, #2
 80025a4:	430a      	orrs	r2, r1
 80025a6:	61da      	str	r2, [r3, #28]
 80025a8:	4b04      	ldr	r3, [pc, #16]	; (80025bc <HAL_TIM_Base_MspInit+0x68>)
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	2202      	movs	r2, #2
 80025ae:	4013      	ands	r3, r2
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]
}
 80025b4:	46c0      	nop			; (mov r8, r8)
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b004      	add	sp, #16
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40000400 	.word	0x40000400

080025c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b089      	sub	sp, #36	; 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	240c      	movs	r4, #12
 80025ce:	193b      	adds	r3, r7, r4
 80025d0:	0018      	movs	r0, r3
 80025d2:	2314      	movs	r3, #20
 80025d4:	001a      	movs	r2, r3
 80025d6:	2100      	movs	r1, #0
 80025d8:	f004 fa98 	bl	8006b0c <memset>
  if(htim->Instance==TIM3)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a15      	ldr	r2, [pc, #84]	; (8002638 <HAL_TIM_MspPostInit+0x74>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d124      	bne.n	8002630 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_TIM_MspPostInit+0x78>)
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	4b14      	ldr	r3, [pc, #80]	; (800263c <HAL_TIM_MspPostInit+0x78>)
 80025ec:	2180      	movs	r1, #128	; 0x80
 80025ee:	0289      	lsls	r1, r1, #10
 80025f0:	430a      	orrs	r2, r1
 80025f2:	615a      	str	r2, [r3, #20]
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <HAL_TIM_MspPostInit+0x78>)
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	029b      	lsls	r3, r3, #10
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002602:	0021      	movs	r1, r4
 8002604:	187b      	adds	r3, r7, r1
 8002606:	2280      	movs	r2, #128	; 0x80
 8002608:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	187b      	adds	r3, r7, r1
 800260c:	2202      	movs	r2, #2
 800260e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	187b      	adds	r3, r7, r1
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002616:	187b      	adds	r3, r7, r1
 8002618:	2200      	movs	r2, #0
 800261a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800261c:	187b      	adds	r3, r7, r1
 800261e:	2201      	movs	r2, #1
 8002620:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002622:	187a      	adds	r2, r7, r1
 8002624:	2390      	movs	r3, #144	; 0x90
 8002626:	05db      	lsls	r3, r3, #23
 8002628:	0011      	movs	r1, r2
 800262a:	0018      	movs	r0, r3
 800262c:	f000 fad6 	bl	8002bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b009      	add	sp, #36	; 0x24
 8002636:	bd90      	pop	{r4, r7, pc}
 8002638:	40000400 	.word	0x40000400
 800263c:	40021000 	.word	0x40021000

08002640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b08b      	sub	sp, #44	; 0x2c
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	2414      	movs	r4, #20
 800264a:	193b      	adds	r3, r7, r4
 800264c:	0018      	movs	r0, r3
 800264e:	2314      	movs	r3, #20
 8002650:	001a      	movs	r2, r3
 8002652:	2100      	movs	r1, #0
 8002654:	f004 fa5a 	bl	8006b0c <memset>
  if(huart->Instance==USART2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a20      	ldr	r2, [pc, #128]	; (80026e0 <HAL_UART_MspInit+0xa0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d13a      	bne.n	80026d8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002662:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <HAL_UART_MspInit+0xa4>)
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <HAL_UART_MspInit+0xa4>)
 8002668:	2180      	movs	r1, #128	; 0x80
 800266a:	0289      	lsls	r1, r1, #10
 800266c:	430a      	orrs	r2, r1
 800266e:	61da      	str	r2, [r3, #28]
 8002670:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <HAL_UART_MspInit+0xa4>)
 8002672:	69da      	ldr	r2, [r3, #28]
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	029b      	lsls	r3, r3, #10
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267e:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <HAL_UART_MspInit+0xa4>)
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <HAL_UART_MspInit+0xa4>)
 8002684:	2180      	movs	r1, #128	; 0x80
 8002686:	0289      	lsls	r1, r1, #10
 8002688:	430a      	orrs	r2, r1
 800268a:	615a      	str	r2, [r3, #20]
 800268c:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <HAL_UART_MspInit+0xa4>)
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	029b      	lsls	r3, r3, #10
 8002694:	4013      	ands	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800269a:	0021      	movs	r1, r4
 800269c:	187b      	adds	r3, r7, r1
 800269e:	220c      	movs	r2, #12
 80026a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	187b      	adds	r3, r7, r1
 80026a4:	2202      	movs	r2, #2
 80026a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	187b      	adds	r3, r7, r1
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026ae:	187b      	adds	r3, r7, r1
 80026b0:	2203      	movs	r2, #3
 80026b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	2201      	movs	r2, #1
 80026b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	187a      	adds	r2, r7, r1
 80026bc:	2390      	movs	r3, #144	; 0x90
 80026be:	05db      	lsls	r3, r3, #23
 80026c0:	0011      	movs	r1, r2
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 fa8a 	bl	8002bdc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026c8:	2200      	movs	r2, #0
 80026ca:	2100      	movs	r1, #0
 80026cc:	201c      	movs	r0, #28
 80026ce:	f000 f9d5 	bl	8002a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026d2:	201c      	movs	r0, #28
 80026d4:	f000 f9e7 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b00b      	add	sp, #44	; 0x2c
 80026de:	bd90      	pop	{r4, r7, pc}
 80026e0:	40004400 	.word	0x40004400
 80026e4:	40021000 	.word	0x40021000

080026e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026ec:	e7fe      	b.n	80026ec <NMI_Handler+0x4>

080026ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f2:	e7fe      	b.n	80026f2 <HardFault_Handler+0x4>

080026f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80026f8:	46c0      	nop			; (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800270c:	f000 f8ca 	bl	80028a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <TIM2_IRQHandler+0x14>)
 800271e:	0018      	movs	r0, r3
 8002720:	f002 f8b2 	bl	8004888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	200000cc 	.word	0x200000cc

08002730 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <USART2_IRQHandler+0x14>)
 8002736:	0018      	movs	r0, r3
 8002738:	f003 f84e 	bl	80057d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	2000015c 	.word	0x2000015c

08002748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002750:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <_sbrk+0x5c>)
 8002752:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <_sbrk+0x60>)
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800275c:	4b13      	ldr	r3, [pc, #76]	; (80027ac <_sbrk+0x64>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d102      	bne.n	800276a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002764:	4b11      	ldr	r3, [pc, #68]	; (80027ac <_sbrk+0x64>)
 8002766:	4a12      	ldr	r2, [pc, #72]	; (80027b0 <_sbrk+0x68>)
 8002768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <_sbrk+0x64>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	18d3      	adds	r3, r2, r3
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	429a      	cmp	r2, r3
 8002776:	d207      	bcs.n	8002788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002778:	f004 f9d0 	bl	8006b1c <__errno>
 800277c:	0003      	movs	r3, r0
 800277e:	220c      	movs	r2, #12
 8002780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002782:	2301      	movs	r3, #1
 8002784:	425b      	negs	r3, r3
 8002786:	e009      	b.n	800279c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002788:	4b08      	ldr	r3, [pc, #32]	; (80027ac <_sbrk+0x64>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <_sbrk+0x64>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	18d2      	adds	r2, r2, r3
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <_sbrk+0x64>)
 8002798:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800279a:	68fb      	ldr	r3, [r7, #12]
}
 800279c:	0018      	movs	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	b006      	add	sp, #24
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20004000 	.word	0x20004000
 80027a8:	00000400 	.word	0x00000400
 80027ac:	20000258 	.word	0x20000258
 80027b0:	200003a8 	.word	0x200003a8

080027b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80027b8:	46c0      	nop			; (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027c0:	480d      	ldr	r0, [pc, #52]	; (80027f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027c2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80027c4:	f7ff fff6 	bl	80027b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027c8:	480c      	ldr	r0, [pc, #48]	; (80027fc <LoopForever+0x6>)
  ldr r1, =_edata
 80027ca:	490d      	ldr	r1, [pc, #52]	; (8002800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027cc:	4a0d      	ldr	r2, [pc, #52]	; (8002804 <LoopForever+0xe>)
  movs r3, #0
 80027ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027d0:	e002      	b.n	80027d8 <LoopCopyDataInit>

080027d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027d6:	3304      	adds	r3, #4

080027d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027dc:	d3f9      	bcc.n	80027d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027e0:	4c0a      	ldr	r4, [pc, #40]	; (800280c <LoopForever+0x16>)
  movs r3, #0
 80027e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e4:	e001      	b.n	80027ea <LoopFillZerobss>

080027e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e8:	3204      	adds	r2, #4

080027ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027ec:	d3fb      	bcc.n	80027e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027ee:	f004 f99b 	bl	8006b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027f2:	f7ff fb25 	bl	8001e40 <main>

080027f6 <LoopForever>:

LoopForever:
    b LoopForever
 80027f6:	e7fe      	b.n	80027f6 <LoopForever>
  ldr   r0, =_estack
 80027f8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80027fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002800:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002804:	0800751c 	.word	0x0800751c
  ldr r2, =_sbss
 8002808:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800280c:	200003a8 	.word	0x200003a8

08002810 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002810:	e7fe      	b.n	8002810 <ADC1_COMP_IRQHandler>
	...

08002814 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002818:	4b07      	ldr	r3, [pc, #28]	; (8002838 <HAL_Init+0x24>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_Init+0x24>)
 800281e:	2110      	movs	r1, #16
 8002820:	430a      	orrs	r2, r1
 8002822:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002824:	2003      	movs	r0, #3
 8002826:	f000 f809 	bl	800283c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800282a:	f7ff fe21 	bl	8002470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	0018      	movs	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	40022000 	.word	0x40022000

0800283c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002844:	4b14      	ldr	r3, [pc, #80]	; (8002898 <HAL_InitTick+0x5c>)
 8002846:	681c      	ldr	r4, [r3, #0]
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <HAL_InitTick+0x60>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	0019      	movs	r1, r3
 800284e:	23fa      	movs	r3, #250	; 0xfa
 8002850:	0098      	lsls	r0, r3, #2
 8002852:	f7fd fc75 	bl	8000140 <__udivsi3>
 8002856:	0003      	movs	r3, r0
 8002858:	0019      	movs	r1, r3
 800285a:	0020      	movs	r0, r4
 800285c:	f7fd fc70 	bl	8000140 <__udivsi3>
 8002860:	0003      	movs	r3, r0
 8002862:	0018      	movs	r0, r3
 8002864:	f000 f92f 	bl	8002ac6 <HAL_SYSTICK_Config>
 8002868:	1e03      	subs	r3, r0, #0
 800286a:	d001      	beq.n	8002870 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e00f      	b.n	8002890 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b03      	cmp	r3, #3
 8002874:	d80b      	bhi.n	800288e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	2301      	movs	r3, #1
 800287a:	425b      	negs	r3, r3
 800287c:	2200      	movs	r2, #0
 800287e:	0018      	movs	r0, r3
 8002880:	f000 f8fc 	bl	8002a7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_InitTick+0x64>)
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	e000      	b.n	8002890 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
}
 8002890:	0018      	movs	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	b003      	add	sp, #12
 8002896:	bd90      	pop	{r4, r7, pc}
 8002898:	20000000 	.word	0x20000000
 800289c:	20000008 	.word	0x20000008
 80028a0:	20000004 	.word	0x20000004

080028a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_IncTick+0x1c>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	001a      	movs	r2, r3
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_IncTick+0x20>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	18d2      	adds	r2, r2, r3
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <HAL_IncTick+0x20>)
 80028b6:	601a      	str	r2, [r3, #0]
}
 80028b8:	46c0      	nop			; (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	20000008 	.word	0x20000008
 80028c4:	2000025c 	.word	0x2000025c

080028c8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  return uwTick;
 80028cc:	4b02      	ldr	r3, [pc, #8]	; (80028d8 <HAL_GetTick+0x10>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	0018      	movs	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	2000025c 	.word	0x2000025c

080028dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e4:	f7ff fff0 	bl	80028c8 <HAL_GetTick>
 80028e8:	0003      	movs	r3, r0
 80028ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3301      	adds	r3, #1
 80028f4:	d005      	beq.n	8002902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <HAL_Delay+0x44>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	001a      	movs	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	189b      	adds	r3, r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	f7ff ffe0 	bl	80028c8 <HAL_GetTick>
 8002908:	0002      	movs	r2, r0
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	429a      	cmp	r2, r3
 8002912:	d8f7      	bhi.n	8002904 <HAL_Delay+0x28>
  {
  }
}
 8002914:	46c0      	nop			; (mov r8, r8)
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	46bd      	mov	sp, r7
 800291a:	b004      	add	sp, #16
 800291c:	bd80      	pop	{r7, pc}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	20000008 	.word	0x20000008

08002924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	0002      	movs	r2, r0
 800292c:	1dfb      	adds	r3, r7, #7
 800292e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002930:	1dfb      	adds	r3, r7, #7
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b7f      	cmp	r3, #127	; 0x7f
 8002936:	d809      	bhi.n	800294c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002938:	1dfb      	adds	r3, r7, #7
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	001a      	movs	r2, r3
 800293e:	231f      	movs	r3, #31
 8002940:	401a      	ands	r2, r3
 8002942:	4b04      	ldr	r3, [pc, #16]	; (8002954 <__NVIC_EnableIRQ+0x30>)
 8002944:	2101      	movs	r1, #1
 8002946:	4091      	lsls	r1, r2
 8002948:	000a      	movs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]
  }
}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b002      	add	sp, #8
 8002952:	bd80      	pop	{r7, pc}
 8002954:	e000e100 	.word	0xe000e100

08002958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002958:	b590      	push	{r4, r7, lr}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	0002      	movs	r2, r0
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	1dfb      	adds	r3, r7, #7
 8002964:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002966:	1dfb      	adds	r3, r7, #7
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b7f      	cmp	r3, #127	; 0x7f
 800296c:	d828      	bhi.n	80029c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800296e:	4a2f      	ldr	r2, [pc, #188]	; (8002a2c <__NVIC_SetPriority+0xd4>)
 8002970:	1dfb      	adds	r3, r7, #7
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	b25b      	sxtb	r3, r3
 8002976:	089b      	lsrs	r3, r3, #2
 8002978:	33c0      	adds	r3, #192	; 0xc0
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	589b      	ldr	r3, [r3, r2]
 800297e:	1dfa      	adds	r2, r7, #7
 8002980:	7812      	ldrb	r2, [r2, #0]
 8002982:	0011      	movs	r1, r2
 8002984:	2203      	movs	r2, #3
 8002986:	400a      	ands	r2, r1
 8002988:	00d2      	lsls	r2, r2, #3
 800298a:	21ff      	movs	r1, #255	; 0xff
 800298c:	4091      	lsls	r1, r2
 800298e:	000a      	movs	r2, r1
 8002990:	43d2      	mvns	r2, r2
 8002992:	401a      	ands	r2, r3
 8002994:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	019b      	lsls	r3, r3, #6
 800299a:	22ff      	movs	r2, #255	; 0xff
 800299c:	401a      	ands	r2, r3
 800299e:	1dfb      	adds	r3, r7, #7
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	0018      	movs	r0, r3
 80029a4:	2303      	movs	r3, #3
 80029a6:	4003      	ands	r3, r0
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029ac:	481f      	ldr	r0, [pc, #124]	; (8002a2c <__NVIC_SetPriority+0xd4>)
 80029ae:	1dfb      	adds	r3, r7, #7
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	b25b      	sxtb	r3, r3
 80029b4:	089b      	lsrs	r3, r3, #2
 80029b6:	430a      	orrs	r2, r1
 80029b8:	33c0      	adds	r3, #192	; 0xc0
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80029be:	e031      	b.n	8002a24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029c0:	4a1b      	ldr	r2, [pc, #108]	; (8002a30 <__NVIC_SetPriority+0xd8>)
 80029c2:	1dfb      	adds	r3, r7, #7
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	0019      	movs	r1, r3
 80029c8:	230f      	movs	r3, #15
 80029ca:	400b      	ands	r3, r1
 80029cc:	3b08      	subs	r3, #8
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	3306      	adds	r3, #6
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	18d3      	adds	r3, r2, r3
 80029d6:	3304      	adds	r3, #4
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	1dfa      	adds	r2, r7, #7
 80029dc:	7812      	ldrb	r2, [r2, #0]
 80029de:	0011      	movs	r1, r2
 80029e0:	2203      	movs	r2, #3
 80029e2:	400a      	ands	r2, r1
 80029e4:	00d2      	lsls	r2, r2, #3
 80029e6:	21ff      	movs	r1, #255	; 0xff
 80029e8:	4091      	lsls	r1, r2
 80029ea:	000a      	movs	r2, r1
 80029ec:	43d2      	mvns	r2, r2
 80029ee:	401a      	ands	r2, r3
 80029f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	019b      	lsls	r3, r3, #6
 80029f6:	22ff      	movs	r2, #255	; 0xff
 80029f8:	401a      	ands	r2, r3
 80029fa:	1dfb      	adds	r3, r7, #7
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	0018      	movs	r0, r3
 8002a00:	2303      	movs	r3, #3
 8002a02:	4003      	ands	r3, r0
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a08:	4809      	ldr	r0, [pc, #36]	; (8002a30 <__NVIC_SetPriority+0xd8>)
 8002a0a:	1dfb      	adds	r3, r7, #7
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	001c      	movs	r4, r3
 8002a10:	230f      	movs	r3, #15
 8002a12:	4023      	ands	r3, r4
 8002a14:	3b08      	subs	r3, #8
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	3306      	adds	r3, #6
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	18c3      	adds	r3, r0, r3
 8002a20:	3304      	adds	r3, #4
 8002a22:	601a      	str	r2, [r3, #0]
}
 8002a24:	46c0      	nop			; (mov r8, r8)
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b003      	add	sp, #12
 8002a2a:	bd90      	pop	{r4, r7, pc}
 8002a2c:	e000e100 	.word	0xe000e100
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	1e5a      	subs	r2, r3, #1
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	045b      	lsls	r3, r3, #17
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d301      	bcc.n	8002a4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e010      	b.n	8002a6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <SysTick_Config+0x44>)
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	3a01      	subs	r2, #1
 8002a52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a54:	2301      	movs	r3, #1
 8002a56:	425b      	negs	r3, r3
 8002a58:	2103      	movs	r1, #3
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f7ff ff7c 	bl	8002958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <SysTick_Config+0x44>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a66:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <SysTick_Config+0x44>)
 8002a68:	2207      	movs	r2, #7
 8002a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	0018      	movs	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b002      	add	sp, #8
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	e000e010 	.word	0xe000e010

08002a7c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	210f      	movs	r1, #15
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	1c02      	adds	r2, r0, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	187b      	adds	r3, r7, r1
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	b25b      	sxtb	r3, r3
 8002a96:	0011      	movs	r1, r2
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f7ff ff5d 	bl	8002958 <__NVIC_SetPriority>
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b004      	add	sp, #16
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	0002      	movs	r2, r0
 8002aae:	1dfb      	adds	r3, r7, #7
 8002ab0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab2:	1dfb      	adds	r3, r7, #7
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	b25b      	sxtb	r3, r3
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7ff ff33 	bl	8002924 <__NVIC_EnableIRQ>
}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b002      	add	sp, #8
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f7ff ffaf 	bl	8002a34 <SysTick_Config>
 8002ad6:	0003      	movs	r3, r0
}
 8002ad8:	0018      	movs	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b002      	add	sp, #8
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2221      	movs	r2, #33	; 0x21
 8002aec:	5c9b      	ldrb	r3, [r3, r2]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d008      	beq.n	8002b06 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2204      	movs	r2, #4
 8002af8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2220      	movs	r2, #32
 8002afe:	2100      	movs	r1, #0
 8002b00:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e020      	b.n	8002b48 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	210e      	movs	r1, #14
 8002b12:	438a      	bics	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2101      	movs	r1, #1
 8002b22:	438a      	bics	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2e:	2101      	movs	r1, #1
 8002b30:	4091      	lsls	r1, r2
 8002b32:	000a      	movs	r2, r1
 8002b34:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2221      	movs	r2, #33	; 0x21
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	2100      	movs	r1, #0
 8002b44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b002      	add	sp, #8
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b58:	210f      	movs	r1, #15
 8002b5a:	187b      	adds	r3, r7, r1
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2221      	movs	r2, #33	; 0x21
 8002b64:	5c9b      	ldrb	r3, [r3, r2]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d006      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2204      	movs	r2, #4
 8002b70:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002b72:	187b      	adds	r3, r7, r1
 8002b74:	2201      	movs	r2, #1
 8002b76:	701a      	strb	r2, [r3, #0]
 8002b78:	e028      	b.n	8002bcc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	210e      	movs	r1, #14
 8002b86:	438a      	bics	r2, r1
 8002b88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2101      	movs	r1, #1
 8002b96:	438a      	bics	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	4091      	lsls	r1, r2
 8002ba6:	000a      	movs	r2, r1
 8002ba8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2221      	movs	r2, #33	; 0x21
 8002bae:	2101      	movs	r1, #1
 8002bb0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d004      	beq.n	8002bcc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	0010      	movs	r0, r2
 8002bca:	4798      	blx	r3
    }
  }
  return status;
 8002bcc:	230f      	movs	r3, #15
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	781b      	ldrb	r3, [r3, #0]
}
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b004      	add	sp, #16
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bea:	e155      	b.n	8002e98 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4091      	lsls	r1, r2
 8002bf6:	000a      	movs	r2, r1
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d100      	bne.n	8002c04 <HAL_GPIO_Init+0x28>
 8002c02:	e146      	b.n	8002e92 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2203      	movs	r2, #3
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d005      	beq.n	8002c1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2203      	movs	r2, #3
 8002c16:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d130      	bne.n	8002c7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	0013      	movs	r3, r2
 8002c2c:	43da      	mvns	r2, r3
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	0013      	movs	r3, r2
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c52:	2201      	movs	r2, #1
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	409a      	lsls	r2, r3
 8002c58:	0013      	movs	r3, r2
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	091b      	lsrs	r3, r3, #4
 8002c68:	2201      	movs	r2, #1
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	0013      	movs	r3, r2
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2203      	movs	r2, #3
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d017      	beq.n	8002cba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	2203      	movs	r2, #3
 8002c96:	409a      	lsls	r2, r3
 8002c98:	0013      	movs	r3, r2
 8002c9a:	43da      	mvns	r2, r3
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	409a      	lsls	r2, r3
 8002cac:	0013      	movs	r3, r2
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d123      	bne.n	8002d0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	08da      	lsrs	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3208      	adds	r2, #8
 8002cce:	0092      	lsls	r2, r2, #2
 8002cd0:	58d3      	ldr	r3, [r2, r3]
 8002cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2207      	movs	r2, #7
 8002cd8:	4013      	ands	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	220f      	movs	r2, #15
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	0013      	movs	r3, r2
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2107      	movs	r1, #7
 8002cf2:	400b      	ands	r3, r1
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	0013      	movs	r3, r2
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	08da      	lsrs	r2, r3, #3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3208      	adds	r2, #8
 8002d08:	0092      	lsls	r2, r2, #2
 8002d0a:	6939      	ldr	r1, [r7, #16]
 8002d0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	2203      	movs	r2, #3
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	0013      	movs	r3, r2
 8002d1e:	43da      	mvns	r2, r3
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2203      	movs	r2, #3
 8002d2c:	401a      	ands	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	409a      	lsls	r2, r3
 8002d34:	0013      	movs	r3, r2
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	23c0      	movs	r3, #192	; 0xc0
 8002d48:	029b      	lsls	r3, r3, #10
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d100      	bne.n	8002d50 <HAL_GPIO_Init+0x174>
 8002d4e:	e0a0      	b.n	8002e92 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d50:	4b57      	ldr	r3, [pc, #348]	; (8002eb0 <HAL_GPIO_Init+0x2d4>)
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	4b56      	ldr	r3, [pc, #344]	; (8002eb0 <HAL_GPIO_Init+0x2d4>)
 8002d56:	2101      	movs	r1, #1
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	619a      	str	r2, [r3, #24]
 8002d5c:	4b54      	ldr	r3, [pc, #336]	; (8002eb0 <HAL_GPIO_Init+0x2d4>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	2201      	movs	r2, #1
 8002d62:	4013      	ands	r3, r2
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d68:	4a52      	ldr	r2, [pc, #328]	; (8002eb4 <HAL_GPIO_Init+0x2d8>)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	089b      	lsrs	r3, r3, #2
 8002d6e:	3302      	adds	r3, #2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	589b      	ldr	r3, [r3, r2]
 8002d74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2203      	movs	r2, #3
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	220f      	movs	r2, #15
 8002d80:	409a      	lsls	r2, r3
 8002d82:	0013      	movs	r3, r2
 8002d84:	43da      	mvns	r2, r3
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	2390      	movs	r3, #144	; 0x90
 8002d90:	05db      	lsls	r3, r3, #23
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d019      	beq.n	8002dca <HAL_GPIO_Init+0x1ee>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a47      	ldr	r2, [pc, #284]	; (8002eb8 <HAL_GPIO_Init+0x2dc>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_GPIO_Init+0x1ea>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a46      	ldr	r2, [pc, #280]	; (8002ebc <HAL_GPIO_Init+0x2e0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00d      	beq.n	8002dc2 <HAL_GPIO_Init+0x1e6>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a45      	ldr	r2, [pc, #276]	; (8002ec0 <HAL_GPIO_Init+0x2e4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <HAL_GPIO_Init+0x1e2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a44      	ldr	r2, [pc, #272]	; (8002ec4 <HAL_GPIO_Init+0x2e8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d101      	bne.n	8002dba <HAL_GPIO_Init+0x1de>
 8002db6:	2304      	movs	r3, #4
 8002db8:	e008      	b.n	8002dcc <HAL_GPIO_Init+0x1f0>
 8002dba:	2305      	movs	r3, #5
 8002dbc:	e006      	b.n	8002dcc <HAL_GPIO_Init+0x1f0>
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e004      	b.n	8002dcc <HAL_GPIO_Init+0x1f0>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e002      	b.n	8002dcc <HAL_GPIO_Init+0x1f0>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <HAL_GPIO_Init+0x1f0>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	2103      	movs	r1, #3
 8002dd0:	400a      	ands	r2, r1
 8002dd2:	0092      	lsls	r2, r2, #2
 8002dd4:	4093      	lsls	r3, r2
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ddc:	4935      	ldr	r1, [pc, #212]	; (8002eb4 <HAL_GPIO_Init+0x2d8>)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	089b      	lsrs	r3, r3, #2
 8002de2:	3302      	adds	r3, #2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dea:	4b37      	ldr	r3, [pc, #220]	; (8002ec8 <HAL_GPIO_Init+0x2ec>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	43da      	mvns	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4013      	ands	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	035b      	lsls	r3, r3, #13
 8002e02:	4013      	ands	r3, r2
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e0e:	4b2e      	ldr	r3, [pc, #184]	; (8002ec8 <HAL_GPIO_Init+0x2ec>)
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002e14:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <HAL_GPIO_Init+0x2ec>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	43da      	mvns	r2, r3
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	039b      	lsls	r3, r3, #14
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e38:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <HAL_GPIO_Init+0x2ec>)
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002e3e:	4b22      	ldr	r3, [pc, #136]	; (8002ec8 <HAL_GPIO_Init+0x2ec>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	43da      	mvns	r2, r3
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	029b      	lsls	r3, r3, #10
 8002e56:	4013      	ands	r3, r2
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e62:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <HAL_GPIO_Init+0x2ec>)
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002e68:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <HAL_GPIO_Init+0x2ec>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	43da      	mvns	r2, r3
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	025b      	lsls	r3, r3, #9
 8002e80:	4013      	ands	r3, r2
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <HAL_GPIO_Init+0x2ec>)
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	3301      	adds	r3, #1
 8002e96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	40da      	lsrs	r2, r3
 8002ea0:	1e13      	subs	r3, r2, #0
 8002ea2:	d000      	beq.n	8002ea6 <HAL_GPIO_Init+0x2ca>
 8002ea4:	e6a2      	b.n	8002bec <HAL_GPIO_Init+0x10>
  } 
}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b006      	add	sp, #24
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	48000400 	.word	0x48000400
 8002ebc:	48000800 	.word	0x48000800
 8002ec0:	48000c00 	.word	0x48000c00
 8002ec4:	48001000 	.word	0x48001000
 8002ec8:	40010400 	.word	0x40010400

08002ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e082      	b.n	8002fe4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2241      	movs	r2, #65	; 0x41
 8002ee2:	5c9b      	ldrb	r3, [r3, r2]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d107      	bne.n	8002efa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2240      	movs	r2, #64	; 0x40
 8002eee:	2100      	movs	r1, #0
 8002ef0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f7ff fadf 	bl	80024b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2241      	movs	r2, #65	; 0x41
 8002efe:	2124      	movs	r1, #36	; 0x24
 8002f00:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	438a      	bics	r2, r1
 8002f10:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4934      	ldr	r1, [pc, #208]	; (8002fec <HAL_I2C_Init+0x120>)
 8002f1c:	400a      	ands	r2, r1
 8002f1e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4931      	ldr	r1, [pc, #196]	; (8002ff0 <HAL_I2C_Init+0x124>)
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d108      	bne.n	8002f4a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2180      	movs	r1, #128	; 0x80
 8002f42:	0209      	lsls	r1, r1, #8
 8002f44:	430a      	orrs	r2, r1
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	e007      	b.n	8002f5a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2184      	movs	r1, #132	; 0x84
 8002f54:	0209      	lsls	r1, r1, #8
 8002f56:	430a      	orrs	r2, r1
 8002f58:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d104      	bne.n	8002f6c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2280      	movs	r2, #128	; 0x80
 8002f68:	0112      	lsls	r2, r2, #4
 8002f6a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	491f      	ldr	r1, [pc, #124]	; (8002ff4 <HAL_I2C_Init+0x128>)
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	491a      	ldr	r1, [pc, #104]	; (8002ff0 <HAL_I2C_Init+0x124>)
 8002f88:	400a      	ands	r2, r1
 8002f8a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69d9      	ldr	r1, [r3, #28]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1a      	ldr	r2, [r3, #32]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2241      	movs	r2, #65	; 0x41
 8002fd0:	2120      	movs	r1, #32
 8002fd2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2242      	movs	r2, #66	; 0x42
 8002fde:	2100      	movs	r1, #0
 8002fe0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b002      	add	sp, #8
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	f0ffffff 	.word	0xf0ffffff
 8002ff0:	ffff7fff 	.word	0xffff7fff
 8002ff4:	02008000 	.word	0x02008000

08002ff8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ff8:	b590      	push	{r4, r7, lr}
 8002ffa:	b089      	sub	sp, #36	; 0x24
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	0008      	movs	r0, r1
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	0019      	movs	r1, r3
 8003006:	230a      	movs	r3, #10
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	1c02      	adds	r2, r0, #0
 800300c:	801a      	strh	r2, [r3, #0]
 800300e:	2308      	movs	r3, #8
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	1c0a      	adds	r2, r1, #0
 8003014:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2241      	movs	r2, #65	; 0x41
 800301a:	5c9b      	ldrb	r3, [r3, r2]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b20      	cmp	r3, #32
 8003020:	d000      	beq.n	8003024 <HAL_I2C_Master_Transmit+0x2c>
 8003022:	e0e7      	b.n	80031f4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2240      	movs	r2, #64	; 0x40
 8003028:	5c9b      	ldrb	r3, [r3, r2]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_I2C_Master_Transmit+0x3a>
 800302e:	2302      	movs	r3, #2
 8003030:	e0e1      	b.n	80031f6 <HAL_I2C_Master_Transmit+0x1fe>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2240      	movs	r2, #64	; 0x40
 8003036:	2101      	movs	r1, #1
 8003038:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800303a:	f7ff fc45 	bl	80028c8 <HAL_GetTick>
 800303e:	0003      	movs	r3, r0
 8003040:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	0219      	lsls	r1, r3, #8
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2319      	movs	r3, #25
 800304e:	2201      	movs	r2, #1
 8003050:	f000 fa04 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8003054:	1e03      	subs	r3, r0, #0
 8003056:	d001      	beq.n	800305c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0cc      	b.n	80031f6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2241      	movs	r2, #65	; 0x41
 8003060:	2121      	movs	r1, #33	; 0x21
 8003062:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2242      	movs	r2, #66	; 0x42
 8003068:	2110      	movs	r1, #16
 800306a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2208      	movs	r2, #8
 800307c:	18ba      	adds	r2, r7, r2
 800307e:	8812      	ldrh	r2, [r2, #0]
 8003080:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	2bff      	cmp	r3, #255	; 0xff
 8003090:	d911      	bls.n	80030b6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	22ff      	movs	r2, #255	; 0xff
 8003096:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309c:	b2da      	uxtb	r2, r3
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	045c      	lsls	r4, r3, #17
 80030a2:	230a      	movs	r3, #10
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	8819      	ldrh	r1, [r3, #0]
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	4b55      	ldr	r3, [pc, #340]	; (8003200 <HAL_I2C_Master_Transmit+0x208>)
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	0023      	movs	r3, r4
 80030b0:	f000 fc2e 	bl	8003910 <I2C_TransferConfig>
 80030b4:	e075      	b.n	80031a2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	049c      	lsls	r4, r3, #18
 80030ca:	230a      	movs	r3, #10
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	8819      	ldrh	r1, [r3, #0]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	4b4b      	ldr	r3, [pc, #300]	; (8003200 <HAL_I2C_Master_Transmit+0x208>)
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	0023      	movs	r3, r4
 80030d8:	f000 fc1a 	bl	8003910 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80030dc:	e061      	b.n	80031a2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f000 fa07 	bl	80034f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ea:	1e03      	subs	r3, r0, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e081      	b.n	80031f6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	781a      	ldrb	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d03a      	beq.n	80031a2 <HAL_I2C_Master_Transmit+0x1aa>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	2b00      	cmp	r3, #0
 8003132:	d136      	bne.n	80031a2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	0013      	movs	r3, r2
 800313e:	2200      	movs	r2, #0
 8003140:	2180      	movs	r1, #128	; 0x80
 8003142:	f000 f98b 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8003146:	1e03      	subs	r3, r0, #0
 8003148:	d001      	beq.n	800314e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e053      	b.n	80031f6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003152:	b29b      	uxth	r3, r3
 8003154:	2bff      	cmp	r3, #255	; 0xff
 8003156:	d911      	bls.n	800317c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	22ff      	movs	r2, #255	; 0xff
 800315c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003162:	b2da      	uxtb	r2, r3
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	045c      	lsls	r4, r3, #17
 8003168:	230a      	movs	r3, #10
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	8819      	ldrh	r1, [r3, #0]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	2300      	movs	r3, #0
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	0023      	movs	r3, r4
 8003176:	f000 fbcb 	bl	8003910 <I2C_TransferConfig>
 800317a:	e012      	b.n	80031a2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318a:	b2da      	uxtb	r2, r3
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	049c      	lsls	r4, r3, #18
 8003190:	230a      	movs	r3, #10
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	8819      	ldrh	r1, [r3, #0]
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	2300      	movs	r3, #0
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	0023      	movs	r3, r4
 800319e:	f000 fbb7 	bl	8003910 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d198      	bne.n	80030de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	0018      	movs	r0, r3
 80031b4:	f000 f9e6 	bl	8003584 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031b8:	1e03      	subs	r3, r0, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e01a      	b.n	80031f6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2220      	movs	r2, #32
 80031c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	490c      	ldr	r1, [pc, #48]	; (8003204 <HAL_I2C_Master_Transmit+0x20c>)
 80031d4:	400a      	ands	r2, r1
 80031d6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2241      	movs	r2, #65	; 0x41
 80031dc:	2120      	movs	r1, #32
 80031de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2242      	movs	r2, #66	; 0x42
 80031e4:	2100      	movs	r1, #0
 80031e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2240      	movs	r2, #64	; 0x40
 80031ec:	2100      	movs	r1, #0
 80031ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	e000      	b.n	80031f6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80031f4:	2302      	movs	r3, #2
  }
}
 80031f6:	0018      	movs	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b007      	add	sp, #28
 80031fc:	bd90      	pop	{r4, r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	80002000 	.word	0x80002000
 8003204:	fe00e800 	.word	0xfe00e800

08003208 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	0008      	movs	r0, r1
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	0019      	movs	r1, r3
 8003216:	230a      	movs	r3, #10
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	1c02      	adds	r2, r0, #0
 800321c:	801a      	strh	r2, [r3, #0]
 800321e:	2308      	movs	r3, #8
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	1c0a      	adds	r2, r1, #0
 8003224:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2241      	movs	r2, #65	; 0x41
 800322a:	5c9b      	ldrb	r3, [r3, r2]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b20      	cmp	r3, #32
 8003230:	d000      	beq.n	8003234 <HAL_I2C_Master_Receive+0x2c>
 8003232:	e0e8      	b.n	8003406 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2240      	movs	r2, #64	; 0x40
 8003238:	5c9b      	ldrb	r3, [r3, r2]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_I2C_Master_Receive+0x3a>
 800323e:	2302      	movs	r3, #2
 8003240:	e0e2      	b.n	8003408 <HAL_I2C_Master_Receive+0x200>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2240      	movs	r2, #64	; 0x40
 8003246:	2101      	movs	r1, #1
 8003248:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800324a:	f7ff fb3d 	bl	80028c8 <HAL_GetTick>
 800324e:	0003      	movs	r3, r0
 8003250:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	0219      	lsls	r1, r3, #8
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	2319      	movs	r3, #25
 800325e:	2201      	movs	r2, #1
 8003260:	f000 f8fc 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8003264:	1e03      	subs	r3, r0, #0
 8003266:	d001      	beq.n	800326c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0cd      	b.n	8003408 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2241      	movs	r2, #65	; 0x41
 8003270:	2122      	movs	r1, #34	; 0x22
 8003272:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2242      	movs	r2, #66	; 0x42
 8003278:	2110      	movs	r1, #16
 800327a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2208      	movs	r2, #8
 800328c:	18ba      	adds	r2, r7, r2
 800328e:	8812      	ldrh	r2, [r2, #0]
 8003290:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	2bff      	cmp	r3, #255	; 0xff
 80032a0:	d911      	bls.n	80032c6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	22ff      	movs	r2, #255	; 0xff
 80032a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	045c      	lsls	r4, r3, #17
 80032b2:	230a      	movs	r3, #10
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	8819      	ldrh	r1, [r3, #0]
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	4b55      	ldr	r3, [pc, #340]	; (8003410 <HAL_I2C_Master_Receive+0x208>)
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	0023      	movs	r3, r4
 80032c0:	f000 fb26 	bl	8003910 <I2C_TransferConfig>
 80032c4:	e076      	b.n	80033b4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	049c      	lsls	r4, r3, #18
 80032da:	230a      	movs	r3, #10
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	8819      	ldrh	r1, [r3, #0]
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	4b4b      	ldr	r3, [pc, #300]	; (8003410 <HAL_I2C_Master_Receive+0x208>)
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	0023      	movs	r3, r4
 80032e8:	f000 fb12 	bl	8003910 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80032ec:	e062      	b.n	80033b4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f000 f989 	bl	800360c <I2C_WaitOnRXNEFlagUntilTimeout>
 80032fa:	1e03      	subs	r3, r0, #0
 80032fc:	d001      	beq.n	8003302 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e082      	b.n	8003408 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d03a      	beq.n	80033b4 <HAL_I2C_Master_Receive+0x1ac>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	2b00      	cmp	r3, #0
 8003344:	d136      	bne.n	80033b4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	0013      	movs	r3, r2
 8003350:	2200      	movs	r2, #0
 8003352:	2180      	movs	r1, #128	; 0x80
 8003354:	f000 f882 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8003358:	1e03      	subs	r3, r0, #0
 800335a:	d001      	beq.n	8003360 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e053      	b.n	8003408 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	2bff      	cmp	r3, #255	; 0xff
 8003368:	d911      	bls.n	800338e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	22ff      	movs	r2, #255	; 0xff
 800336e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	b2da      	uxtb	r2, r3
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	045c      	lsls	r4, r3, #17
 800337a:	230a      	movs	r3, #10
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	8819      	ldrh	r1, [r3, #0]
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	2300      	movs	r3, #0
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	0023      	movs	r3, r4
 8003388:	f000 fac2 	bl	8003910 <I2C_TransferConfig>
 800338c:	e012      	b.n	80033b4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339c:	b2da      	uxtb	r2, r3
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	049c      	lsls	r4, r3, #18
 80033a2:	230a      	movs	r3, #10
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	8819      	ldrh	r1, [r3, #0]
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	2300      	movs	r3, #0
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	0023      	movs	r3, r4
 80033b0:	f000 faae 	bl	8003910 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d197      	bne.n	80032ee <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	0018      	movs	r0, r3
 80033c6:	f000 f8dd 	bl	8003584 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033ca:	1e03      	subs	r3, r0, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e01a      	b.n	8003408 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2220      	movs	r2, #32
 80033d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	490b      	ldr	r1, [pc, #44]	; (8003414 <HAL_I2C_Master_Receive+0x20c>)
 80033e6:	400a      	ands	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2241      	movs	r2, #65	; 0x41
 80033ee:	2120      	movs	r1, #32
 80033f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2242      	movs	r2, #66	; 0x42
 80033f6:	2100      	movs	r1, #0
 80033f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2240      	movs	r2, #64	; 0x40
 80033fe:	2100      	movs	r1, #0
 8003400:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	e000      	b.n	8003408 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003406:	2302      	movs	r3, #2
  }
}
 8003408:	0018      	movs	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	b007      	add	sp, #28
 800340e:	bd90      	pop	{r4, r7, pc}
 8003410:	80002400 	.word	0x80002400
 8003414:	fe00e800 	.word	0xfe00e800

08003418 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	2202      	movs	r2, #2
 8003428:	4013      	ands	r3, r2
 800342a:	2b02      	cmp	r3, #2
 800342c:	d103      	bne.n	8003436 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2200      	movs	r2, #0
 8003434:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2201      	movs	r2, #1
 800343e:	4013      	ands	r3, r2
 8003440:	2b01      	cmp	r3, #1
 8003442:	d007      	beq.n	8003454 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2101      	movs	r1, #1
 8003450:	430a      	orrs	r2, r1
 8003452:	619a      	str	r2, [r3, #24]
  }
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b002      	add	sp, #8
 800345a:	bd80      	pop	{r7, pc}

0800345c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	1dfb      	adds	r3, r7, #7
 800346a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800346c:	e030      	b.n	80034d0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	3301      	adds	r3, #1
 8003472:	d02d      	beq.n	80034d0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003474:	f7ff fa28 	bl	80028c8 <HAL_GetTick>
 8003478:	0002      	movs	r2, r0
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d302      	bcc.n	800348a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d122      	bne.n	80034d0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	4013      	ands	r3, r2
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	425a      	negs	r2, r3
 800349a:	4153      	adcs	r3, r2
 800349c:	b2db      	uxtb	r3, r3
 800349e:	001a      	movs	r2, r3
 80034a0:	1dfb      	adds	r3, r7, #7
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d113      	bne.n	80034d0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ac:	2220      	movs	r2, #32
 80034ae:	431a      	orrs	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2241      	movs	r2, #65	; 0x41
 80034b8:	2120      	movs	r1, #32
 80034ba:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2242      	movs	r2, #66	; 0x42
 80034c0:	2100      	movs	r1, #0
 80034c2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2240      	movs	r2, #64	; 0x40
 80034c8:	2100      	movs	r1, #0
 80034ca:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e00f      	b.n	80034f0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	4013      	ands	r3, r2
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	425a      	negs	r2, r3
 80034e0:	4153      	adcs	r3, r2
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	001a      	movs	r2, r3
 80034e6:	1dfb      	adds	r3, r7, #7
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d0bf      	beq.n	800346e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	0018      	movs	r0, r3
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b004      	add	sp, #16
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003504:	e032      	b.n	800356c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	0018      	movs	r0, r3
 800350e:	f000 f8ff 	bl	8003710 <I2C_IsErrorOccurred>
 8003512:	1e03      	subs	r3, r0, #0
 8003514:	d001      	beq.n	800351a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e030      	b.n	800357c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	3301      	adds	r3, #1
 800351e:	d025      	beq.n	800356c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003520:	f7ff f9d2 	bl	80028c8 <HAL_GetTick>
 8003524:	0002      	movs	r2, r0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	429a      	cmp	r2, r3
 800352e:	d302      	bcc.n	8003536 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d11a      	bne.n	800356c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2202      	movs	r2, #2
 800353e:	4013      	ands	r3, r2
 8003540:	2b02      	cmp	r3, #2
 8003542:	d013      	beq.n	800356c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003548:	2220      	movs	r2, #32
 800354a:	431a      	orrs	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2241      	movs	r2, #65	; 0x41
 8003554:	2120      	movs	r1, #32
 8003556:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2242      	movs	r2, #66	; 0x42
 800355c:	2100      	movs	r1, #0
 800355e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2240      	movs	r2, #64	; 0x40
 8003564:	2100      	movs	r1, #0
 8003566:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e007      	b.n	800357c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2202      	movs	r2, #2
 8003574:	4013      	ands	r3, r2
 8003576:	2b02      	cmp	r3, #2
 8003578:	d1c5      	bne.n	8003506 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	b004      	add	sp, #16
 8003582:	bd80      	pop	{r7, pc}

08003584 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003590:	e02f      	b.n	80035f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	0018      	movs	r0, r3
 800359a:	f000 f8b9 	bl	8003710 <I2C_IsErrorOccurred>
 800359e:	1e03      	subs	r3, r0, #0
 80035a0:	d001      	beq.n	80035a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e02d      	b.n	8003602 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a6:	f7ff f98f 	bl	80028c8 <HAL_GetTick>
 80035aa:	0002      	movs	r2, r0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d302      	bcc.n	80035bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d11a      	bne.n	80035f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2220      	movs	r2, #32
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	d013      	beq.n	80035f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	2220      	movs	r2, #32
 80035d0:	431a      	orrs	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2241      	movs	r2, #65	; 0x41
 80035da:	2120      	movs	r1, #32
 80035dc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2242      	movs	r2, #66	; 0x42
 80035e2:	2100      	movs	r1, #0
 80035e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2240      	movs	r2, #64	; 0x40
 80035ea:	2100      	movs	r1, #0
 80035ec:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e007      	b.n	8003602 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	2220      	movs	r2, #32
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d1c8      	bne.n	8003592 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	0018      	movs	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	b004      	add	sp, #16
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003618:	e06b      	b.n	80036f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	0018      	movs	r0, r3
 8003622:	f000 f875 	bl	8003710 <I2C_IsErrorOccurred>
 8003626:	1e03      	subs	r3, r0, #0
 8003628:	d001      	beq.n	800362e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e069      	b.n	8003702 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2220      	movs	r2, #32
 8003636:	4013      	ands	r3, r2
 8003638:	2b20      	cmp	r3, #32
 800363a:	d138      	bne.n	80036ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	2204      	movs	r2, #4
 8003644:	4013      	ands	r3, r2
 8003646:	2b04      	cmp	r3, #4
 8003648:	d105      	bne.n	8003656 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e055      	b.n	8003702 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2210      	movs	r2, #16
 800365e:	4013      	ands	r3, r2
 8003660:	2b10      	cmp	r3, #16
 8003662:	d107      	bne.n	8003674 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2210      	movs	r2, #16
 800366a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2204      	movs	r2, #4
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
 8003672:	e002      	b.n	800367a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2220      	movs	r2, #32
 8003680:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	491f      	ldr	r1, [pc, #124]	; (800370c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800368e:	400a      	ands	r2, r1
 8003690:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2241      	movs	r2, #65	; 0x41
 8003696:	2120      	movs	r1, #32
 8003698:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2242      	movs	r2, #66	; 0x42
 800369e:	2100      	movs	r1, #0
 80036a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2240      	movs	r2, #64	; 0x40
 80036a6:	2100      	movs	r1, #0
 80036a8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e029      	b.n	8003702 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ae:	f7ff f90b 	bl	80028c8 <HAL_GetTick>
 80036b2:	0002      	movs	r2, r0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d302      	bcc.n	80036c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d116      	bne.n	80036f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	2204      	movs	r2, #4
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d00f      	beq.n	80036f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d6:	2220      	movs	r2, #32
 80036d8:	431a      	orrs	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2241      	movs	r2, #65	; 0x41
 80036e2:	2120      	movs	r1, #32
 80036e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2240      	movs	r2, #64	; 0x40
 80036ea:	2100      	movs	r1, #0
 80036ec:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e007      	b.n	8003702 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	2204      	movs	r2, #4
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d18c      	bne.n	800361a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	0018      	movs	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	b004      	add	sp, #16
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	fe00e800 	.word	0xfe00e800

08003710 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b08b      	sub	sp, #44	; 0x2c
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800371c:	2327      	movs	r3, #39	; 0x27
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800372c:	2300      	movs	r3, #0
 800372e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2210      	movs	r2, #16
 8003738:	4013      	ands	r3, r2
 800373a:	d100      	bne.n	800373e <I2C_IsErrorOccurred+0x2e>
 800373c:	e082      	b.n	8003844 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2210      	movs	r2, #16
 8003744:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003746:	e060      	b.n	800380a <I2C_IsErrorOccurred+0xfa>
 8003748:	2427      	movs	r4, #39	; 0x27
 800374a:	193b      	adds	r3, r7, r4
 800374c:	193a      	adds	r2, r7, r4
 800374e:	7812      	ldrb	r2, [r2, #0]
 8003750:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	3301      	adds	r3, #1
 8003756:	d058      	beq.n	800380a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003758:	f7ff f8b6 	bl	80028c8 <HAL_GetTick>
 800375c:	0002      	movs	r2, r0
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	429a      	cmp	r2, r3
 8003766:	d306      	bcc.n	8003776 <I2C_IsErrorOccurred+0x66>
 8003768:	193b      	adds	r3, r7, r4
 800376a:	193a      	adds	r2, r7, r4
 800376c:	7812      	ldrb	r2, [r2, #0]
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d149      	bne.n	800380a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	2380      	movs	r3, #128	; 0x80
 800377e:	01db      	lsls	r3, r3, #7
 8003780:	4013      	ands	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003784:	2013      	movs	r0, #19
 8003786:	183b      	adds	r3, r7, r0
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	2142      	movs	r1, #66	; 0x42
 800378c:	5c52      	ldrb	r2, [r2, r1]
 800378e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	2380      	movs	r3, #128	; 0x80
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	401a      	ands	r2, r3
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d126      	bne.n	80037f2 <I2C_IsErrorOccurred+0xe2>
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	01db      	lsls	r3, r3, #7
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d021      	beq.n	80037f2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80037ae:	183b      	adds	r3, r7, r0
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d01d      	beq.n	80037f2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2180      	movs	r1, #128	; 0x80
 80037c2:	01c9      	lsls	r1, r1, #7
 80037c4:	430a      	orrs	r2, r1
 80037c6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80037c8:	f7ff f87e 	bl	80028c8 <HAL_GetTick>
 80037cc:	0003      	movs	r3, r0
 80037ce:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037d0:	e00f      	b.n	80037f2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037d2:	f7ff f879 	bl	80028c8 <HAL_GetTick>
 80037d6:	0002      	movs	r2, r0
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b19      	cmp	r3, #25
 80037de:	d908      	bls.n	80037f2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	2220      	movs	r2, #32
 80037e4:	4313      	orrs	r3, r2
 80037e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80037e8:	2327      	movs	r3, #39	; 0x27
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]

              break;
 80037f0:	e00b      	b.n	800380a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	2220      	movs	r2, #32
 80037fa:	4013      	ands	r3, r2
 80037fc:	2127      	movs	r1, #39	; 0x27
 80037fe:	187a      	adds	r2, r7, r1
 8003800:	1879      	adds	r1, r7, r1
 8003802:	7809      	ldrb	r1, [r1, #0]
 8003804:	7011      	strb	r1, [r2, #0]
 8003806:	2b20      	cmp	r3, #32
 8003808:	d1e3      	bne.n	80037d2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2220      	movs	r2, #32
 8003812:	4013      	ands	r3, r2
 8003814:	2b20      	cmp	r3, #32
 8003816:	d004      	beq.n	8003822 <I2C_IsErrorOccurred+0x112>
 8003818:	2327      	movs	r3, #39	; 0x27
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d092      	beq.n	8003748 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003822:	2327      	movs	r3, #39	; 0x27
 8003824:	18fb      	adds	r3, r7, r3
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d103      	bne.n	8003834 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2220      	movs	r2, #32
 8003832:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	2204      	movs	r2, #4
 8003838:	4313      	orrs	r3, r2
 800383a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800383c:	2327      	movs	r3, #39	; 0x27
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	2201      	movs	r2, #1
 8003842:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4013      	ands	r3, r2
 8003854:	d00c      	beq.n	8003870 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	2201      	movs	r2, #1
 800385a:	4313      	orrs	r3, r2
 800385c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	0052      	lsls	r2, r2, #1
 8003866:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003868:	2327      	movs	r3, #39	; 0x27
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	2380      	movs	r3, #128	; 0x80
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4013      	ands	r3, r2
 8003878:	d00c      	beq.n	8003894 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	2208      	movs	r2, #8
 800387e:	4313      	orrs	r3, r2
 8003880:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2280      	movs	r2, #128	; 0x80
 8003888:	00d2      	lsls	r2, r2, #3
 800388a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800388c:	2327      	movs	r3, #39	; 0x27
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4013      	ands	r3, r2
 800389c:	d00c      	beq.n	80038b8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	2202      	movs	r2, #2
 80038a2:	4313      	orrs	r3, r2
 80038a4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2280      	movs	r2, #128	; 0x80
 80038ac:	0092      	lsls	r2, r2, #2
 80038ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038b0:	2327      	movs	r3, #39	; 0x27
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	2201      	movs	r2, #1
 80038b6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80038b8:	2327      	movs	r3, #39	; 0x27
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d01d      	beq.n	80038fe <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	0018      	movs	r0, r3
 80038c6:	f7ff fda7 	bl	8003418 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	490d      	ldr	r1, [pc, #52]	; (800390c <I2C_IsErrorOccurred+0x1fc>)
 80038d6:	400a      	ands	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	431a      	orrs	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2241      	movs	r2, #65	; 0x41
 80038ea:	2120      	movs	r1, #32
 80038ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2242      	movs	r2, #66	; 0x42
 80038f2:	2100      	movs	r1, #0
 80038f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2240      	movs	r2, #64	; 0x40
 80038fa:	2100      	movs	r1, #0
 80038fc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80038fe:	2327      	movs	r3, #39	; 0x27
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	781b      	ldrb	r3, [r3, #0]
}
 8003904:	0018      	movs	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	b00b      	add	sp, #44	; 0x2c
 800390a:	bd90      	pop	{r4, r7, pc}
 800390c:	fe00e800 	.word	0xfe00e800

08003910 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	0008      	movs	r0, r1
 800391a:	0011      	movs	r1, r2
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	240a      	movs	r4, #10
 8003920:	193b      	adds	r3, r7, r4
 8003922:	1c02      	adds	r2, r0, #0
 8003924:	801a      	strh	r2, [r3, #0]
 8003926:	2009      	movs	r0, #9
 8003928:	183b      	adds	r3, r7, r0
 800392a:	1c0a      	adds	r2, r1, #0
 800392c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800392e:	193b      	adds	r3, r7, r4
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	059b      	lsls	r3, r3, #22
 8003934:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003936:	183b      	adds	r3, r7, r0
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	0419      	lsls	r1, r3, #16
 800393c:	23ff      	movs	r3, #255	; 0xff
 800393e:	041b      	lsls	r3, r3, #16
 8003940:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003942:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394a:	4313      	orrs	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	085b      	lsrs	r3, r3, #1
 8003950:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800395a:	0d51      	lsrs	r1, r2, #21
 800395c:	2280      	movs	r2, #128	; 0x80
 800395e:	00d2      	lsls	r2, r2, #3
 8003960:	400a      	ands	r2, r1
 8003962:	4907      	ldr	r1, [pc, #28]	; (8003980 <I2C_TransferConfig+0x70>)
 8003964:	430a      	orrs	r2, r1
 8003966:	43d2      	mvns	r2, r2
 8003968:	401a      	ands	r2, r3
 800396a:	0011      	movs	r1, r2
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	b007      	add	sp, #28
 800397c:	bd90      	pop	{r4, r7, pc}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	03ff63ff 	.word	0x03ff63ff

08003984 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2241      	movs	r2, #65	; 0x41
 8003992:	5c9b      	ldrb	r3, [r3, r2]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b20      	cmp	r3, #32
 8003998:	d138      	bne.n	8003a0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2240      	movs	r2, #64	; 0x40
 800399e:	5c9b      	ldrb	r3, [r3, r2]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e032      	b.n	8003a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2240      	movs	r2, #64	; 0x40
 80039ac:	2101      	movs	r1, #1
 80039ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2241      	movs	r2, #65	; 0x41
 80039b4:	2124      	movs	r1, #36	; 0x24
 80039b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2101      	movs	r1, #1
 80039c4:	438a      	bics	r2, r1
 80039c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4911      	ldr	r1, [pc, #68]	; (8003a18 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80039d4:	400a      	ands	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2101      	movs	r1, #1
 80039f4:	430a      	orrs	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2241      	movs	r2, #65	; 0x41
 80039fc:	2120      	movs	r1, #32
 80039fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2240      	movs	r2, #64	; 0x40
 8003a04:	2100      	movs	r1, #0
 8003a06:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e000      	b.n	8003a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a0c:	2302      	movs	r3, #2
  }
}
 8003a0e:	0018      	movs	r0, r3
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b002      	add	sp, #8
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	ffffefff 	.word	0xffffefff

08003a1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2241      	movs	r2, #65	; 0x41
 8003a2a:	5c9b      	ldrb	r3, [r3, r2]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d139      	bne.n	8003aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2240      	movs	r2, #64	; 0x40
 8003a36:	5c9b      	ldrb	r3, [r3, r2]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e033      	b.n	8003aa8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2240      	movs	r2, #64	; 0x40
 8003a44:	2101      	movs	r1, #1
 8003a46:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2241      	movs	r2, #65	; 0x41
 8003a4c:	2124      	movs	r1, #36	; 0x24
 8003a4e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	438a      	bics	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4a11      	ldr	r2, [pc, #68]	; (8003ab0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2241      	movs	r2, #65	; 0x41
 8003a96:	2120      	movs	r1, #32
 8003a98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2240      	movs	r2, #64	; 0x40
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e000      	b.n	8003aa8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003aa6:	2302      	movs	r3, #2
  }
}
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b004      	add	sp, #16
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	fffff0ff 	.word	0xfffff0ff

08003ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d102      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f000 fb76 	bl	80041b4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2201      	movs	r2, #1
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d100      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x20>
 8003ad2:	e08e      	b.n	8003bf2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ad4:	4bc5      	ldr	r3, [pc, #788]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	220c      	movs	r2, #12
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d00e      	beq.n	8003afe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ae0:	4bc2      	ldr	r3, [pc, #776]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	220c      	movs	r2, #12
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d117      	bne.n	8003b1c <HAL_RCC_OscConfig+0x68>
 8003aec:	4bbf      	ldr	r3, [pc, #764]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	23c0      	movs	r3, #192	; 0xc0
 8003af2:	025b      	lsls	r3, r3, #9
 8003af4:	401a      	ands	r2, r3
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	025b      	lsls	r3, r3, #9
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d10e      	bne.n	8003b1c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afe:	4bbb      	ldr	r3, [pc, #748]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	029b      	lsls	r3, r3, #10
 8003b06:	4013      	ands	r3, r2
 8003b08:	d100      	bne.n	8003b0c <HAL_RCC_OscConfig+0x58>
 8003b0a:	e071      	b.n	8003bf0 <HAL_RCC_OscConfig+0x13c>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d000      	beq.n	8003b16 <HAL_RCC_OscConfig+0x62>
 8003b14:	e06c      	b.n	8003bf0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f000 fb4c 	bl	80041b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_OscConfig+0x80>
 8003b24:	4bb1      	ldr	r3, [pc, #708]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4bb0      	ldr	r3, [pc, #704]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003b2a:	2180      	movs	r1, #128	; 0x80
 8003b2c:	0249      	lsls	r1, r1, #9
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e02f      	b.n	8003b94 <HAL_RCC_OscConfig+0xe0>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10c      	bne.n	8003b56 <HAL_RCC_OscConfig+0xa2>
 8003b3c:	4bab      	ldr	r3, [pc, #684]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4baa      	ldr	r3, [pc, #680]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003b42:	49ab      	ldr	r1, [pc, #684]	; (8003df0 <HAL_RCC_OscConfig+0x33c>)
 8003b44:	400a      	ands	r2, r1
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	4ba8      	ldr	r3, [pc, #672]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4ba7      	ldr	r3, [pc, #668]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003b4e:	49a9      	ldr	r1, [pc, #676]	; (8003df4 <HAL_RCC_OscConfig+0x340>)
 8003b50:	400a      	ands	r2, r1
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	e01e      	b.n	8003b94 <HAL_RCC_OscConfig+0xe0>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b05      	cmp	r3, #5
 8003b5c:	d10e      	bne.n	8003b7c <HAL_RCC_OscConfig+0xc8>
 8003b5e:	4ba3      	ldr	r3, [pc, #652]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4ba2      	ldr	r3, [pc, #648]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	02c9      	lsls	r1, r1, #11
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	4b9f      	ldr	r3, [pc, #636]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b9e      	ldr	r3, [pc, #632]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003b72:	2180      	movs	r1, #128	; 0x80
 8003b74:	0249      	lsls	r1, r1, #9
 8003b76:	430a      	orrs	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e00b      	b.n	8003b94 <HAL_RCC_OscConfig+0xe0>
 8003b7c:	4b9b      	ldr	r3, [pc, #620]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b9a      	ldr	r3, [pc, #616]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003b82:	499b      	ldr	r1, [pc, #620]	; (8003df0 <HAL_RCC_OscConfig+0x33c>)
 8003b84:	400a      	ands	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	4b98      	ldr	r3, [pc, #608]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4b97      	ldr	r3, [pc, #604]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003b8e:	4999      	ldr	r1, [pc, #612]	; (8003df4 <HAL_RCC_OscConfig+0x340>)
 8003b90:	400a      	ands	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d014      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fe fe94 	bl	80028c8 <HAL_GetTick>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba6:	f7fe fe8f 	bl	80028c8 <HAL_GetTick>
 8003baa:	0002      	movs	r2, r0
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b64      	cmp	r3, #100	; 0x64
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e2fd      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb8:	4b8c      	ldr	r3, [pc, #560]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	029b      	lsls	r3, r3, #10
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0xf2>
 8003bc4:	e015      	b.n	8003bf2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc6:	f7fe fe7f 	bl	80028c8 <HAL_GetTick>
 8003bca:	0003      	movs	r3, r0
 8003bcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bd0:	f7fe fe7a 	bl	80028c8 <HAL_GetTick>
 8003bd4:	0002      	movs	r2, r0
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	; 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e2e8      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be2:	4b82      	ldr	r3, [pc, #520]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	029b      	lsls	r3, r3, #10
 8003bea:	4013      	ands	r3, r2
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x11c>
 8003bee:	e000      	b.n	8003bf2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d100      	bne.n	8003bfe <HAL_RCC_OscConfig+0x14a>
 8003bfc:	e06c      	b.n	8003cd8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003bfe:	4b7b      	ldr	r3, [pc, #492]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	220c      	movs	r2, #12
 8003c04:	4013      	ands	r3, r2
 8003c06:	d00e      	beq.n	8003c26 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c08:	4b78      	ldr	r3, [pc, #480]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	220c      	movs	r2, #12
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d11f      	bne.n	8003c54 <HAL_RCC_OscConfig+0x1a0>
 8003c14:	4b75      	ldr	r3, [pc, #468]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	23c0      	movs	r3, #192	; 0xc0
 8003c1a:	025b      	lsls	r3, r3, #9
 8003c1c:	401a      	ands	r2, r3
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d116      	bne.n	8003c54 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c26:	4b71      	ldr	r3, [pc, #452]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_OscConfig+0x188>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e2bb      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c3c:	4b6b      	ldr	r3, [pc, #428]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	22f8      	movs	r2, #248	; 0xf8
 8003c42:	4393      	bics	r3, r2
 8003c44:	0019      	movs	r1, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	00da      	lsls	r2, r3, #3
 8003c4c:	4b67      	ldr	r3, [pc, #412]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c52:	e041      	b.n	8003cd8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d024      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c5c:	4b63      	ldr	r3, [pc, #396]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4b62      	ldr	r3, [pc, #392]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003c62:	2101      	movs	r1, #1
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fe fe2e 	bl	80028c8 <HAL_GetTick>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c72:	f7fe fe29 	bl	80028c8 <HAL_GetTick>
 8003c76:	0002      	movs	r2, r0
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e297      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c84:	4b59      	ldr	r3, [pc, #356]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d0f1      	beq.n	8003c72 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8e:	4b57      	ldr	r3, [pc, #348]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	22f8      	movs	r2, #248	; 0xf8
 8003c94:	4393      	bics	r3, r2
 8003c96:	0019      	movs	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	00da      	lsls	r2, r3, #3
 8003c9e:	4b53      	ldr	r3, [pc, #332]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	e018      	b.n	8003cd8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ca6:	4b51      	ldr	r3, [pc, #324]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4b50      	ldr	r3, [pc, #320]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003cac:	2101      	movs	r1, #1
 8003cae:	438a      	bics	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb2:	f7fe fe09 	bl	80028c8 <HAL_GetTick>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cbc:	f7fe fe04 	bl	80028c8 <HAL_GetTick>
 8003cc0:	0002      	movs	r2, r0
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e272      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cce:	4b47      	ldr	r3, [pc, #284]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d1f1      	bne.n	8003cbc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2208      	movs	r2, #8
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d036      	beq.n	8003d50 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d019      	beq.n	8003d1e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cea:	4b40      	ldr	r3, [pc, #256]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cee:	4b3f      	ldr	r3, [pc, #252]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf6:	f7fe fde7 	bl	80028c8 <HAL_GetTick>
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d00:	f7fe fde2 	bl	80028c8 <HAL_GetTick>
 8003d04:	0002      	movs	r2, r0
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e250      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d12:	4b36      	ldr	r3, [pc, #216]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	2202      	movs	r2, #2
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d0f1      	beq.n	8003d00 <HAL_RCC_OscConfig+0x24c>
 8003d1c:	e018      	b.n	8003d50 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1e:	4b33      	ldr	r3, [pc, #204]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d22:	4b32      	ldr	r3, [pc, #200]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003d24:	2101      	movs	r1, #1
 8003d26:	438a      	bics	r2, r1
 8003d28:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d2a:	f7fe fdcd 	bl	80028c8 <HAL_GetTick>
 8003d2e:	0003      	movs	r3, r0
 8003d30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d34:	f7fe fdc8 	bl	80028c8 <HAL_GetTick>
 8003d38:	0002      	movs	r2, r0
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e236      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d46:	4b29      	ldr	r3, [pc, #164]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d1f1      	bne.n	8003d34 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2204      	movs	r2, #4
 8003d56:	4013      	ands	r3, r2
 8003d58:	d100      	bne.n	8003d5c <HAL_RCC_OscConfig+0x2a8>
 8003d5a:	e0b5      	b.n	8003ec8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d5c:	201f      	movs	r0, #31
 8003d5e:	183b      	adds	r3, r7, r0
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d64:	4b21      	ldr	r3, [pc, #132]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	055b      	lsls	r3, r3, #21
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d110      	bne.n	8003d92 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d70:	4b1e      	ldr	r3, [pc, #120]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003d72:	69da      	ldr	r2, [r3, #28]
 8003d74:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003d76:	2180      	movs	r1, #128	; 0x80
 8003d78:	0549      	lsls	r1, r1, #21
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	61da      	str	r2, [r3, #28]
 8003d7e:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	055b      	lsls	r3, r3, #21
 8003d86:	4013      	ands	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d8c:	183b      	adds	r3, r7, r0
 8003d8e:	2201      	movs	r2, #1
 8003d90:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d92:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <HAL_RCC_OscConfig+0x344>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	2380      	movs	r3, #128	; 0x80
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d11a      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d9e:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <HAL_RCC_OscConfig+0x344>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <HAL_RCC_OscConfig+0x344>)
 8003da4:	2180      	movs	r1, #128	; 0x80
 8003da6:	0049      	lsls	r1, r1, #1
 8003da8:	430a      	orrs	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dac:	f7fe fd8c 	bl	80028c8 <HAL_GetTick>
 8003db0:	0003      	movs	r3, r0
 8003db2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db6:	f7fe fd87 	bl	80028c8 <HAL_GetTick>
 8003dba:	0002      	movs	r2, r0
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b64      	cmp	r3, #100	; 0x64
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e1f5      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_RCC_OscConfig+0x344>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d10f      	bne.n	8003dfc <HAL_RCC_OscConfig+0x348>
 8003ddc:	4b03      	ldr	r3, [pc, #12]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003dde:	6a1a      	ldr	r2, [r3, #32]
 8003de0:	4b02      	ldr	r3, [pc, #8]	; (8003dec <HAL_RCC_OscConfig+0x338>)
 8003de2:	2101      	movs	r1, #1
 8003de4:	430a      	orrs	r2, r1
 8003de6:	621a      	str	r2, [r3, #32]
 8003de8:	e036      	b.n	8003e58 <HAL_RCC_OscConfig+0x3a4>
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	40021000 	.word	0x40021000
 8003df0:	fffeffff 	.word	0xfffeffff
 8003df4:	fffbffff 	.word	0xfffbffff
 8003df8:	40007000 	.word	0x40007000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10c      	bne.n	8003e1e <HAL_RCC_OscConfig+0x36a>
 8003e04:	4bca      	ldr	r3, [pc, #808]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003e06:	6a1a      	ldr	r2, [r3, #32]
 8003e08:	4bc9      	ldr	r3, [pc, #804]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	438a      	bics	r2, r1
 8003e0e:	621a      	str	r2, [r3, #32]
 8003e10:	4bc7      	ldr	r3, [pc, #796]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003e12:	6a1a      	ldr	r2, [r3, #32]
 8003e14:	4bc6      	ldr	r3, [pc, #792]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003e16:	2104      	movs	r1, #4
 8003e18:	438a      	bics	r2, r1
 8003e1a:	621a      	str	r2, [r3, #32]
 8003e1c:	e01c      	b.n	8003e58 <HAL_RCC_OscConfig+0x3a4>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b05      	cmp	r3, #5
 8003e24:	d10c      	bne.n	8003e40 <HAL_RCC_OscConfig+0x38c>
 8003e26:	4bc2      	ldr	r3, [pc, #776]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003e28:	6a1a      	ldr	r2, [r3, #32]
 8003e2a:	4bc1      	ldr	r3, [pc, #772]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003e2c:	2104      	movs	r1, #4
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	621a      	str	r2, [r3, #32]
 8003e32:	4bbf      	ldr	r3, [pc, #764]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003e34:	6a1a      	ldr	r2, [r3, #32]
 8003e36:	4bbe      	ldr	r3, [pc, #760]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003e38:	2101      	movs	r1, #1
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	621a      	str	r2, [r3, #32]
 8003e3e:	e00b      	b.n	8003e58 <HAL_RCC_OscConfig+0x3a4>
 8003e40:	4bbb      	ldr	r3, [pc, #748]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	4bba      	ldr	r3, [pc, #744]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003e46:	2101      	movs	r1, #1
 8003e48:	438a      	bics	r2, r1
 8003e4a:	621a      	str	r2, [r3, #32]
 8003e4c:	4bb8      	ldr	r3, [pc, #736]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003e4e:	6a1a      	ldr	r2, [r3, #32]
 8003e50:	4bb7      	ldr	r3, [pc, #732]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003e52:	2104      	movs	r1, #4
 8003e54:	438a      	bics	r2, r1
 8003e56:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d014      	beq.n	8003e8a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e60:	f7fe fd32 	bl	80028c8 <HAL_GetTick>
 8003e64:	0003      	movs	r3, r0
 8003e66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e68:	e009      	b.n	8003e7e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7fe fd2d 	bl	80028c8 <HAL_GetTick>
 8003e6e:	0002      	movs	r2, r0
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	4aaf      	ldr	r2, [pc, #700]	; (8004134 <HAL_RCC_OscConfig+0x680>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e19a      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7e:	4bac      	ldr	r3, [pc, #688]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	2202      	movs	r2, #2
 8003e84:	4013      	ands	r3, r2
 8003e86:	d0f0      	beq.n	8003e6a <HAL_RCC_OscConfig+0x3b6>
 8003e88:	e013      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e8a:	f7fe fd1d 	bl	80028c8 <HAL_GetTick>
 8003e8e:	0003      	movs	r3, r0
 8003e90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e92:	e009      	b.n	8003ea8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e94:	f7fe fd18 	bl	80028c8 <HAL_GetTick>
 8003e98:	0002      	movs	r2, r0
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	4aa5      	ldr	r2, [pc, #660]	; (8004134 <HAL_RCC_OscConfig+0x680>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e185      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea8:	4ba1      	ldr	r3, [pc, #644]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	2202      	movs	r2, #2
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003eb2:	231f      	movs	r3, #31
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d105      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ebc:	4b9c      	ldr	r3, [pc, #624]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	4b9b      	ldr	r3, [pc, #620]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003ec2:	499d      	ldr	r1, [pc, #628]	; (8004138 <HAL_RCC_OscConfig+0x684>)
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2210      	movs	r2, #16
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d063      	beq.n	8003f9a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d12a      	bne.n	8003f30 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003eda:	4b95      	ldr	r3, [pc, #596]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ede:	4b94      	ldr	r3, [pc, #592]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003ee0:	2104      	movs	r1, #4
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003ee6:	4b92      	ldr	r3, [pc, #584]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eea:	4b91      	ldr	r3, [pc, #580]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003eec:	2101      	movs	r1, #1
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef2:	f7fe fce9 	bl	80028c8 <HAL_GetTick>
 8003ef6:	0003      	movs	r3, r0
 8003ef8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003efc:	f7fe fce4 	bl	80028c8 <HAL_GetTick>
 8003f00:	0002      	movs	r2, r0
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e152      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f0e:	4b88      	ldr	r3, [pc, #544]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f12:	2202      	movs	r2, #2
 8003f14:	4013      	ands	r3, r2
 8003f16:	d0f1      	beq.n	8003efc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f18:	4b85      	ldr	r3, [pc, #532]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1c:	22f8      	movs	r2, #248	; 0xf8
 8003f1e:	4393      	bics	r3, r2
 8003f20:	0019      	movs	r1, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	00da      	lsls	r2, r3, #3
 8003f28:	4b81      	ldr	r3, [pc, #516]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f2e:	e034      	b.n	8003f9a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	3305      	adds	r3, #5
 8003f36:	d111      	bne.n	8003f5c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003f38:	4b7d      	ldr	r3, [pc, #500]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3c:	4b7c      	ldr	r3, [pc, #496]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003f3e:	2104      	movs	r1, #4
 8003f40:	438a      	bics	r2, r1
 8003f42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f44:	4b7a      	ldr	r3, [pc, #488]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f48:	22f8      	movs	r2, #248	; 0xf8
 8003f4a:	4393      	bics	r3, r2
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	00da      	lsls	r2, r3, #3
 8003f54:	4b76      	ldr	r3, [pc, #472]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003f56:	430a      	orrs	r2, r1
 8003f58:	635a      	str	r2, [r3, #52]	; 0x34
 8003f5a:	e01e      	b.n	8003f9a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f5c:	4b74      	ldr	r3, [pc, #464]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f60:	4b73      	ldr	r3, [pc, #460]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003f62:	2104      	movs	r1, #4
 8003f64:	430a      	orrs	r2, r1
 8003f66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003f68:	4b71      	ldr	r3, [pc, #452]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f6c:	4b70      	ldr	r3, [pc, #448]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003f6e:	2101      	movs	r1, #1
 8003f70:	438a      	bics	r2, r1
 8003f72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f74:	f7fe fca8 	bl	80028c8 <HAL_GetTick>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f7e:	f7fe fca3 	bl	80028c8 <HAL_GetTick>
 8003f82:	0002      	movs	r2, r0
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e111      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f90:	4b67      	ldr	r3, [pc, #412]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f94:	2202      	movs	r2, #2
 8003f96:	4013      	ands	r3, r2
 8003f98:	d1f1      	bne.n	8003f7e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d05c      	beq.n	800405e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003fa4:	4b62      	ldr	r3, [pc, #392]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	220c      	movs	r2, #12
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b0c      	cmp	r3, #12
 8003fae:	d00e      	beq.n	8003fce <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003fb0:	4b5f      	ldr	r3, [pc, #380]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	220c      	movs	r2, #12
 8003fb6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d114      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003fbc:	4b5c      	ldr	r3, [pc, #368]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	23c0      	movs	r3, #192	; 0xc0
 8003fc2:	025b      	lsls	r3, r3, #9
 8003fc4:	401a      	ands	r2, r3
 8003fc6:	23c0      	movs	r3, #192	; 0xc0
 8003fc8:	025b      	lsls	r3, r3, #9
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d10b      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003fce:	4b58      	ldr	r3, [pc, #352]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd2:	2380      	movs	r3, #128	; 0x80
 8003fd4:	029b      	lsls	r3, r3, #10
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d040      	beq.n	800405c <HAL_RCC_OscConfig+0x5a8>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d03c      	beq.n	800405c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e0e6      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01b      	beq.n	8004026 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003fee:	4b50      	ldr	r3, [pc, #320]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ff2:	4b4f      	ldr	r3, [pc, #316]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8003ff4:	2180      	movs	r1, #128	; 0x80
 8003ff6:	0249      	lsls	r1, r1, #9
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffc:	f7fe fc64 	bl	80028c8 <HAL_GetTick>
 8004000:	0003      	movs	r3, r0
 8004002:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004006:	f7fe fc5f 	bl	80028c8 <HAL_GetTick>
 800400a:	0002      	movs	r2, r0
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e0cd      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004018:	4b45      	ldr	r3, [pc, #276]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 800401a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	029b      	lsls	r3, r3, #10
 8004020:	4013      	ands	r3, r2
 8004022:	d0f0      	beq.n	8004006 <HAL_RCC_OscConfig+0x552>
 8004024:	e01b      	b.n	800405e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004026:	4b42      	ldr	r3, [pc, #264]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8004028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800402a:	4b41      	ldr	r3, [pc, #260]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 800402c:	4943      	ldr	r1, [pc, #268]	; (800413c <HAL_RCC_OscConfig+0x688>)
 800402e:	400a      	ands	r2, r1
 8004030:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004032:	f7fe fc49 	bl	80028c8 <HAL_GetTick>
 8004036:	0003      	movs	r3, r0
 8004038:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800403c:	f7fe fc44 	bl	80028c8 <HAL_GetTick>
 8004040:	0002      	movs	r2, r0
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e0b2      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800404e:	4b38      	ldr	r3, [pc, #224]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8004050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004052:	2380      	movs	r3, #128	; 0x80
 8004054:	029b      	lsls	r3, r3, #10
 8004056:	4013      	ands	r3, r2
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x588>
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800405c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	2b00      	cmp	r3, #0
 8004064:	d100      	bne.n	8004068 <HAL_RCC_OscConfig+0x5b4>
 8004066:	e0a4      	b.n	80041b2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004068:	4b31      	ldr	r3, [pc, #196]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	220c      	movs	r2, #12
 800406e:	4013      	ands	r3, r2
 8004070:	2b08      	cmp	r3, #8
 8004072:	d100      	bne.n	8004076 <HAL_RCC_OscConfig+0x5c2>
 8004074:	e078      	b.n	8004168 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	2b02      	cmp	r3, #2
 800407c:	d14c      	bne.n	8004118 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407e:	4b2c      	ldr	r3, [pc, #176]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	4b2b      	ldr	r3, [pc, #172]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 8004084:	492e      	ldr	r1, [pc, #184]	; (8004140 <HAL_RCC_OscConfig+0x68c>)
 8004086:	400a      	ands	r2, r1
 8004088:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408a:	f7fe fc1d 	bl	80028c8 <HAL_GetTick>
 800408e:	0003      	movs	r3, r0
 8004090:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004094:	f7fe fc18 	bl	80028c8 <HAL_GetTick>
 8004098:	0002      	movs	r2, r0
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e086      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040a6:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	049b      	lsls	r3, r3, #18
 80040ae:	4013      	ands	r3, r2
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040b2:	4b1f      	ldr	r3, [pc, #124]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	220f      	movs	r2, #15
 80040b8:	4393      	bics	r3, r2
 80040ba:	0019      	movs	r1, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040c0:	4b1b      	ldr	r3, [pc, #108]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 80040c2:	430a      	orrs	r2, r1
 80040c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80040c6:	4b1a      	ldr	r3, [pc, #104]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	4a1e      	ldr	r2, [pc, #120]	; (8004144 <HAL_RCC_OscConfig+0x690>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	0019      	movs	r1, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	431a      	orrs	r2, r3
 80040da:	4b15      	ldr	r3, [pc, #84]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040e0:	4b13      	ldr	r3, [pc, #76]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b12      	ldr	r3, [pc, #72]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 80040e6:	2180      	movs	r1, #128	; 0x80
 80040e8:	0449      	lsls	r1, r1, #17
 80040ea:	430a      	orrs	r2, r1
 80040ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ee:	f7fe fbeb 	bl	80028c8 <HAL_GetTick>
 80040f2:	0003      	movs	r3, r0
 80040f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f8:	f7fe fbe6 	bl	80028c8 <HAL_GetTick>
 80040fc:	0002      	movs	r2, r0
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e054      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800410a:	4b09      	ldr	r3, [pc, #36]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	2380      	movs	r3, #128	; 0x80
 8004110:	049b      	lsls	r3, r3, #18
 8004112:	4013      	ands	r3, r2
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCC_OscConfig+0x644>
 8004116:	e04c      	b.n	80041b2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b04      	ldr	r3, [pc, #16]	; (8004130 <HAL_RCC_OscConfig+0x67c>)
 800411e:	4908      	ldr	r1, [pc, #32]	; (8004140 <HAL_RCC_OscConfig+0x68c>)
 8004120:	400a      	ands	r2, r1
 8004122:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004124:	f7fe fbd0 	bl	80028c8 <HAL_GetTick>
 8004128:	0003      	movs	r3, r0
 800412a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800412c:	e015      	b.n	800415a <HAL_RCC_OscConfig+0x6a6>
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	40021000 	.word	0x40021000
 8004134:	00001388 	.word	0x00001388
 8004138:	efffffff 	.word	0xefffffff
 800413c:	fffeffff 	.word	0xfffeffff
 8004140:	feffffff 	.word	0xfeffffff
 8004144:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004148:	f7fe fbbe 	bl	80028c8 <HAL_GetTick>
 800414c:	0002      	movs	r2, r0
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e02c      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800415a:	4b18      	ldr	r3, [pc, #96]	; (80041bc <HAL_RCC_OscConfig+0x708>)
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	2380      	movs	r3, #128	; 0x80
 8004160:	049b      	lsls	r3, r3, #18
 8004162:	4013      	ands	r3, r2
 8004164:	d1f0      	bne.n	8004148 <HAL_RCC_OscConfig+0x694>
 8004166:	e024      	b.n	80041b2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e01f      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004174:	4b11      	ldr	r3, [pc, #68]	; (80041bc <HAL_RCC_OscConfig+0x708>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800417a:	4b10      	ldr	r3, [pc, #64]	; (80041bc <HAL_RCC_OscConfig+0x708>)
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	23c0      	movs	r3, #192	; 0xc0
 8004184:	025b      	lsls	r3, r3, #9
 8004186:	401a      	ands	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	429a      	cmp	r2, r3
 800418e:	d10e      	bne.n	80041ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	220f      	movs	r2, #15
 8004194:	401a      	ands	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800419a:	429a      	cmp	r2, r3
 800419c:	d107      	bne.n	80041ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	23f0      	movs	r3, #240	; 0xf0
 80041a2:	039b      	lsls	r3, r3, #14
 80041a4:	401a      	ands	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d001      	beq.n	80041b2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	0018      	movs	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b008      	add	sp, #32
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40021000 	.word	0x40021000

080041c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0bf      	b.n	8004354 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d4:	4b61      	ldr	r3, [pc, #388]	; (800435c <HAL_RCC_ClockConfig+0x19c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2201      	movs	r2, #1
 80041da:	4013      	ands	r3, r2
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d911      	bls.n	8004206 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e2:	4b5e      	ldr	r3, [pc, #376]	; (800435c <HAL_RCC_ClockConfig+0x19c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2201      	movs	r2, #1
 80041e8:	4393      	bics	r3, r2
 80041ea:	0019      	movs	r1, r3
 80041ec:	4b5b      	ldr	r3, [pc, #364]	; (800435c <HAL_RCC_ClockConfig+0x19c>)
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f4:	4b59      	ldr	r3, [pc, #356]	; (800435c <HAL_RCC_ClockConfig+0x19c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2201      	movs	r2, #1
 80041fa:	4013      	ands	r3, r2
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d001      	beq.n	8004206 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e0a6      	b.n	8004354 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2202      	movs	r2, #2
 800420c:	4013      	ands	r3, r2
 800420e:	d015      	beq.n	800423c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2204      	movs	r2, #4
 8004216:	4013      	ands	r3, r2
 8004218:	d006      	beq.n	8004228 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800421a:	4b51      	ldr	r3, [pc, #324]	; (8004360 <HAL_RCC_ClockConfig+0x1a0>)
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	4b50      	ldr	r3, [pc, #320]	; (8004360 <HAL_RCC_ClockConfig+0x1a0>)
 8004220:	21e0      	movs	r1, #224	; 0xe0
 8004222:	00c9      	lsls	r1, r1, #3
 8004224:	430a      	orrs	r2, r1
 8004226:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004228:	4b4d      	ldr	r3, [pc, #308]	; (8004360 <HAL_RCC_ClockConfig+0x1a0>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	22f0      	movs	r2, #240	; 0xf0
 800422e:	4393      	bics	r3, r2
 8004230:	0019      	movs	r1, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	4b4a      	ldr	r3, [pc, #296]	; (8004360 <HAL_RCC_ClockConfig+0x1a0>)
 8004238:	430a      	orrs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2201      	movs	r2, #1
 8004242:	4013      	ands	r3, r2
 8004244:	d04c      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d107      	bne.n	800425e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424e:	4b44      	ldr	r3, [pc, #272]	; (8004360 <HAL_RCC_ClockConfig+0x1a0>)
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	2380      	movs	r3, #128	; 0x80
 8004254:	029b      	lsls	r3, r3, #10
 8004256:	4013      	ands	r3, r2
 8004258:	d120      	bne.n	800429c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e07a      	b.n	8004354 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d107      	bne.n	8004276 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004266:	4b3e      	ldr	r3, [pc, #248]	; (8004360 <HAL_RCC_ClockConfig+0x1a0>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	2380      	movs	r3, #128	; 0x80
 800426c:	049b      	lsls	r3, r3, #18
 800426e:	4013      	ands	r3, r2
 8004270:	d114      	bne.n	800429c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e06e      	b.n	8004354 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b03      	cmp	r3, #3
 800427c:	d107      	bne.n	800428e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800427e:	4b38      	ldr	r3, [pc, #224]	; (8004360 <HAL_RCC_ClockConfig+0x1a0>)
 8004280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	029b      	lsls	r3, r3, #10
 8004286:	4013      	ands	r3, r2
 8004288:	d108      	bne.n	800429c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e062      	b.n	8004354 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800428e:	4b34      	ldr	r3, [pc, #208]	; (8004360 <HAL_RCC_ClockConfig+0x1a0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2202      	movs	r2, #2
 8004294:	4013      	ands	r3, r2
 8004296:	d101      	bne.n	800429c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e05b      	b.n	8004354 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800429c:	4b30      	ldr	r3, [pc, #192]	; (8004360 <HAL_RCC_ClockConfig+0x1a0>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2203      	movs	r2, #3
 80042a2:	4393      	bics	r3, r2
 80042a4:	0019      	movs	r1, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	4b2d      	ldr	r3, [pc, #180]	; (8004360 <HAL_RCC_ClockConfig+0x1a0>)
 80042ac:	430a      	orrs	r2, r1
 80042ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042b0:	f7fe fb0a 	bl	80028c8 <HAL_GetTick>
 80042b4:	0003      	movs	r3, r0
 80042b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b8:	e009      	b.n	80042ce <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ba:	f7fe fb05 	bl	80028c8 <HAL_GetTick>
 80042be:	0002      	movs	r2, r0
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	4a27      	ldr	r2, [pc, #156]	; (8004364 <HAL_RCC_ClockConfig+0x1a4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e042      	b.n	8004354 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ce:	4b24      	ldr	r3, [pc, #144]	; (8004360 <HAL_RCC_ClockConfig+0x1a0>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	220c      	movs	r2, #12
 80042d4:	401a      	ands	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	429a      	cmp	r2, r3
 80042de:	d1ec      	bne.n	80042ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042e0:	4b1e      	ldr	r3, [pc, #120]	; (800435c <HAL_RCC_ClockConfig+0x19c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2201      	movs	r2, #1
 80042e6:	4013      	ands	r3, r2
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d211      	bcs.n	8004312 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ee:	4b1b      	ldr	r3, [pc, #108]	; (800435c <HAL_RCC_ClockConfig+0x19c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2201      	movs	r2, #1
 80042f4:	4393      	bics	r3, r2
 80042f6:	0019      	movs	r1, r3
 80042f8:	4b18      	ldr	r3, [pc, #96]	; (800435c <HAL_RCC_ClockConfig+0x19c>)
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004300:	4b16      	ldr	r3, [pc, #88]	; (800435c <HAL_RCC_ClockConfig+0x19c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2201      	movs	r2, #1
 8004306:	4013      	ands	r3, r2
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d001      	beq.n	8004312 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e020      	b.n	8004354 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2204      	movs	r2, #4
 8004318:	4013      	ands	r3, r2
 800431a:	d009      	beq.n	8004330 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800431c:	4b10      	ldr	r3, [pc, #64]	; (8004360 <HAL_RCC_ClockConfig+0x1a0>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4a11      	ldr	r2, [pc, #68]	; (8004368 <HAL_RCC_ClockConfig+0x1a8>)
 8004322:	4013      	ands	r3, r2
 8004324:	0019      	movs	r1, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <HAL_RCC_ClockConfig+0x1a0>)
 800432c:	430a      	orrs	r2, r1
 800432e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004330:	f000 f820 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 8004334:	0001      	movs	r1, r0
 8004336:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <HAL_RCC_ClockConfig+0x1a0>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	220f      	movs	r2, #15
 800433e:	4013      	ands	r3, r2
 8004340:	4a0a      	ldr	r2, [pc, #40]	; (800436c <HAL_RCC_ClockConfig+0x1ac>)
 8004342:	5cd3      	ldrb	r3, [r2, r3]
 8004344:	000a      	movs	r2, r1
 8004346:	40da      	lsrs	r2, r3
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <HAL_RCC_ClockConfig+0x1b0>)
 800434a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800434c:	2003      	movs	r0, #3
 800434e:	f7fe fa75 	bl	800283c <HAL_InitTick>
  
  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	0018      	movs	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	b004      	add	sp, #16
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40022000 	.word	0x40022000
 8004360:	40021000 	.word	0x40021000
 8004364:	00001388 	.word	0x00001388
 8004368:	fffff8ff 	.word	0xfffff8ff
 800436c:	080074a8 	.word	0x080074a8
 8004370:	20000000 	.word	0x20000000

08004374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
 8004386:	2300      	movs	r3, #0
 8004388:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800438e:	4b2d      	ldr	r3, [pc, #180]	; (8004444 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	220c      	movs	r2, #12
 8004398:	4013      	ands	r3, r2
 800439a:	2b0c      	cmp	r3, #12
 800439c:	d046      	beq.n	800442c <HAL_RCC_GetSysClockFreq+0xb8>
 800439e:	d848      	bhi.n	8004432 <HAL_RCC_GetSysClockFreq+0xbe>
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d002      	beq.n	80043aa <HAL_RCC_GetSysClockFreq+0x36>
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d003      	beq.n	80043b0 <HAL_RCC_GetSysClockFreq+0x3c>
 80043a8:	e043      	b.n	8004432 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043aa:	4b27      	ldr	r3, [pc, #156]	; (8004448 <HAL_RCC_GetSysClockFreq+0xd4>)
 80043ac:	613b      	str	r3, [r7, #16]
      break;
 80043ae:	e043      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	0c9b      	lsrs	r3, r3, #18
 80043b4:	220f      	movs	r2, #15
 80043b6:	4013      	ands	r3, r2
 80043b8:	4a24      	ldr	r2, [pc, #144]	; (800444c <HAL_RCC_GetSysClockFreq+0xd8>)
 80043ba:	5cd3      	ldrb	r3, [r2, r3]
 80043bc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80043be:	4b21      	ldr	r3, [pc, #132]	; (8004444 <HAL_RCC_GetSysClockFreq+0xd0>)
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	220f      	movs	r2, #15
 80043c4:	4013      	ands	r3, r2
 80043c6:	4a22      	ldr	r2, [pc, #136]	; (8004450 <HAL_RCC_GetSysClockFreq+0xdc>)
 80043c8:	5cd3      	ldrb	r3, [r2, r3]
 80043ca:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	23c0      	movs	r3, #192	; 0xc0
 80043d0:	025b      	lsls	r3, r3, #9
 80043d2:	401a      	ands	r2, r3
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	025b      	lsls	r3, r3, #9
 80043d8:	429a      	cmp	r2, r3
 80043da:	d109      	bne.n	80043f0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	481a      	ldr	r0, [pc, #104]	; (8004448 <HAL_RCC_GetSysClockFreq+0xd4>)
 80043e0:	f7fb feae 	bl	8000140 <__udivsi3>
 80043e4:	0003      	movs	r3, r0
 80043e6:	001a      	movs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4353      	muls	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	e01a      	b.n	8004426 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	23c0      	movs	r3, #192	; 0xc0
 80043f4:	025b      	lsls	r3, r3, #9
 80043f6:	401a      	ands	r2, r3
 80043f8:	23c0      	movs	r3, #192	; 0xc0
 80043fa:	025b      	lsls	r3, r3, #9
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d109      	bne.n	8004414 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	4814      	ldr	r0, [pc, #80]	; (8004454 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004404:	f7fb fe9c 	bl	8000140 <__udivsi3>
 8004408:	0003      	movs	r3, r0
 800440a:	001a      	movs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4353      	muls	r3, r2
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	e008      	b.n	8004426 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	480c      	ldr	r0, [pc, #48]	; (8004448 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004418:	f7fb fe92 	bl	8000140 <__udivsi3>
 800441c:	0003      	movs	r3, r0
 800441e:	001a      	movs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4353      	muls	r3, r2
 8004424:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	613b      	str	r3, [r7, #16]
      break;
 800442a:	e005      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800442c:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_RCC_GetSysClockFreq+0xe0>)
 800442e:	613b      	str	r3, [r7, #16]
      break;
 8004430:	e002      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004434:	613b      	str	r3, [r7, #16]
      break;
 8004436:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004438:	693b      	ldr	r3, [r7, #16]
}
 800443a:	0018      	movs	r0, r3
 800443c:	46bd      	mov	sp, r7
 800443e:	b006      	add	sp, #24
 8004440:	bd80      	pop	{r7, pc}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	40021000 	.word	0x40021000
 8004448:	007a1200 	.word	0x007a1200
 800444c:	080074c0 	.word	0x080074c0
 8004450:	080074d0 	.word	0x080074d0
 8004454:	02dc6c00 	.word	0x02dc6c00

08004458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800445c:	4b02      	ldr	r3, [pc, #8]	; (8004468 <HAL_RCC_GetHCLKFreq+0x10>)
 800445e:	681b      	ldr	r3, [r3, #0]
}
 8004460:	0018      	movs	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	20000000 	.word	0x20000000

0800446c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004470:	f7ff fff2 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 8004474:	0001      	movs	r1, r0
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	0a1b      	lsrs	r3, r3, #8
 800447c:	2207      	movs	r2, #7
 800447e:	4013      	ands	r3, r2
 8004480:	4a04      	ldr	r2, [pc, #16]	; (8004494 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004482:	5cd3      	ldrb	r3, [r2, r3]
 8004484:	40d9      	lsrs	r1, r3
 8004486:	000b      	movs	r3, r1
}    
 8004488:	0018      	movs	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	40021000 	.word	0x40021000
 8004494:	080074b8 	.word	0x080074b8

08004498 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	2380      	movs	r3, #128	; 0x80
 80044ae:	025b      	lsls	r3, r3, #9
 80044b0:	4013      	ands	r3, r2
 80044b2:	d100      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80044b4:	e08e      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80044b6:	2017      	movs	r0, #23
 80044b8:	183b      	adds	r3, r7, r0
 80044ba:	2200      	movs	r2, #0
 80044bc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044be:	4b6e      	ldr	r3, [pc, #440]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044c0:	69da      	ldr	r2, [r3, #28]
 80044c2:	2380      	movs	r3, #128	; 0x80
 80044c4:	055b      	lsls	r3, r3, #21
 80044c6:	4013      	ands	r3, r2
 80044c8:	d110      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ca:	4b6b      	ldr	r3, [pc, #428]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044cc:	69da      	ldr	r2, [r3, #28]
 80044ce:	4b6a      	ldr	r3, [pc, #424]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044d0:	2180      	movs	r1, #128	; 0x80
 80044d2:	0549      	lsls	r1, r1, #21
 80044d4:	430a      	orrs	r2, r1
 80044d6:	61da      	str	r2, [r3, #28]
 80044d8:	4b67      	ldr	r3, [pc, #412]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80044da:	69da      	ldr	r2, [r3, #28]
 80044dc:	2380      	movs	r3, #128	; 0x80
 80044de:	055b      	lsls	r3, r3, #21
 80044e0:	4013      	ands	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e6:	183b      	adds	r3, r7, r0
 80044e8:	2201      	movs	r2, #1
 80044ea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ec:	4b63      	ldr	r3, [pc, #396]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	2380      	movs	r3, #128	; 0x80
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	4013      	ands	r3, r2
 80044f6:	d11a      	bne.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f8:	4b60      	ldr	r3, [pc, #384]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4b5f      	ldr	r3, [pc, #380]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80044fe:	2180      	movs	r1, #128	; 0x80
 8004500:	0049      	lsls	r1, r1, #1
 8004502:	430a      	orrs	r2, r1
 8004504:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004506:	f7fe f9df 	bl	80028c8 <HAL_GetTick>
 800450a:	0003      	movs	r3, r0
 800450c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450e:	e008      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004510:	f7fe f9da 	bl	80028c8 <HAL_GetTick>
 8004514:	0002      	movs	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b64      	cmp	r3, #100	; 0x64
 800451c:	d901      	bls.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e0a6      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004522:	4b56      	ldr	r3, [pc, #344]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	4013      	ands	r3, r2
 800452c:	d0f0      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800452e:	4b52      	ldr	r3, [pc, #328]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004530:	6a1a      	ldr	r2, [r3, #32]
 8004532:	23c0      	movs	r3, #192	; 0xc0
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4013      	ands	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d034      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	23c0      	movs	r3, #192	; 0xc0
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4013      	ands	r3, r2
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	429a      	cmp	r2, r3
 800454e:	d02c      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004550:	4b49      	ldr	r3, [pc, #292]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	4a4a      	ldr	r2, [pc, #296]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004556:	4013      	ands	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800455a:	4b47      	ldr	r3, [pc, #284]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800455c:	6a1a      	ldr	r2, [r3, #32]
 800455e:	4b46      	ldr	r3, [pc, #280]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004560:	2180      	movs	r1, #128	; 0x80
 8004562:	0249      	lsls	r1, r1, #9
 8004564:	430a      	orrs	r2, r1
 8004566:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004568:	4b43      	ldr	r3, [pc, #268]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800456a:	6a1a      	ldr	r2, [r3, #32]
 800456c:	4b42      	ldr	r3, [pc, #264]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800456e:	4945      	ldr	r1, [pc, #276]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004570:	400a      	ands	r2, r1
 8004572:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004574:	4b40      	ldr	r3, [pc, #256]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	4013      	ands	r3, r2
 8004580:	d013      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004582:	f7fe f9a1 	bl	80028c8 <HAL_GetTick>
 8004586:	0003      	movs	r3, r0
 8004588:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458a:	e009      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458c:	f7fe f99c 	bl	80028c8 <HAL_GetTick>
 8004590:	0002      	movs	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	4a3c      	ldr	r2, [pc, #240]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d901      	bls.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e067      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a0:	4b35      	ldr	r3, [pc, #212]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	2202      	movs	r2, #2
 80045a6:	4013      	ands	r3, r2
 80045a8:	d0f0      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045aa:	4b33      	ldr	r3, [pc, #204]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	4a34      	ldr	r2, [pc, #208]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	0019      	movs	r1, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	4b2f      	ldr	r3, [pc, #188]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045ba:	430a      	orrs	r2, r1
 80045bc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045be:	2317      	movs	r3, #23
 80045c0:	18fb      	adds	r3, r7, r3
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d105      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c8:	4b2b      	ldr	r3, [pc, #172]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045ca:	69da      	ldr	r2, [r3, #28]
 80045cc:	4b2a      	ldr	r3, [pc, #168]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045ce:	492f      	ldr	r1, [pc, #188]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80045d0:	400a      	ands	r2, r1
 80045d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2201      	movs	r2, #1
 80045da:	4013      	ands	r3, r2
 80045dc:	d009      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045de:	4b26      	ldr	r3, [pc, #152]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	2203      	movs	r2, #3
 80045e4:	4393      	bics	r3, r2
 80045e6:	0019      	movs	r1, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	4b22      	ldr	r3, [pc, #136]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045ee:	430a      	orrs	r2, r1
 80045f0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2202      	movs	r2, #2
 80045f8:	4013      	ands	r3, r2
 80045fa:	d009      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045fc:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	4a23      	ldr	r2, [pc, #140]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004602:	4013      	ands	r3, r2
 8004604:	0019      	movs	r1, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800460c:	430a      	orrs	r2, r1
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2220      	movs	r2, #32
 8004616:	4013      	ands	r3, r2
 8004618:	d009      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800461a:	4b17      	ldr	r3, [pc, #92]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	2210      	movs	r2, #16
 8004620:	4393      	bics	r3, r2
 8004622:	0019      	movs	r1, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	4b13      	ldr	r3, [pc, #76]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800462a:	430a      	orrs	r2, r1
 800462c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	029b      	lsls	r3, r3, #10
 8004636:	4013      	ands	r3, r2
 8004638:	d009      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800463a:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	2280      	movs	r2, #128	; 0x80
 8004640:	4393      	bics	r3, r2
 8004642:	0019      	movs	r1, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699a      	ldr	r2, [r3, #24]
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800464a:	430a      	orrs	r2, r1
 800464c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	2380      	movs	r3, #128	; 0x80
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	4013      	ands	r3, r2
 8004658:	d009      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800465a:	4b07      	ldr	r3, [pc, #28]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	2240      	movs	r2, #64	; 0x40
 8004660:	4393      	bics	r3, r2
 8004662:	0019      	movs	r1, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	4b03      	ldr	r3, [pc, #12]	; (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800466a:	430a      	orrs	r2, r1
 800466c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	0018      	movs	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	b006      	add	sp, #24
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40021000 	.word	0x40021000
 800467c:	40007000 	.word	0x40007000
 8004680:	fffffcff 	.word	0xfffffcff
 8004684:	fffeffff 	.word	0xfffeffff
 8004688:	00001388 	.word	0x00001388
 800468c:	efffffff 	.word	0xefffffff
 8004690:	fffcffff 	.word	0xfffcffff

08004694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e042      	b.n	800472c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	223d      	movs	r2, #61	; 0x3d
 80046aa:	5c9b      	ldrb	r3, [r3, r2]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d107      	bne.n	80046c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	223c      	movs	r2, #60	; 0x3c
 80046b6:	2100      	movs	r1, #0
 80046b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	0018      	movs	r0, r3
 80046be:	f7fd ff49 	bl	8002554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	223d      	movs	r2, #61	; 0x3d
 80046c6:	2102      	movs	r1, #2
 80046c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3304      	adds	r3, #4
 80046d2:	0019      	movs	r1, r3
 80046d4:	0010      	movs	r0, r2
 80046d6:	f000 fbaf 	bl	8004e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2246      	movs	r2, #70	; 0x46
 80046de:	2101      	movs	r1, #1
 80046e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	223e      	movs	r2, #62	; 0x3e
 80046e6:	2101      	movs	r1, #1
 80046e8:	5499      	strb	r1, [r3, r2]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	223f      	movs	r2, #63	; 0x3f
 80046ee:	2101      	movs	r1, #1
 80046f0:	5499      	strb	r1, [r3, r2]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2240      	movs	r2, #64	; 0x40
 80046f6:	2101      	movs	r1, #1
 80046f8:	5499      	strb	r1, [r3, r2]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2241      	movs	r2, #65	; 0x41
 80046fe:	2101      	movs	r1, #1
 8004700:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2242      	movs	r2, #66	; 0x42
 8004706:	2101      	movs	r1, #1
 8004708:	5499      	strb	r1, [r3, r2]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2243      	movs	r2, #67	; 0x43
 800470e:	2101      	movs	r1, #1
 8004710:	5499      	strb	r1, [r3, r2]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2244      	movs	r2, #68	; 0x44
 8004716:	2101      	movs	r1, #1
 8004718:	5499      	strb	r1, [r3, r2]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2245      	movs	r2, #69	; 0x45
 800471e:	2101      	movs	r1, #1
 8004720:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	223d      	movs	r2, #61	; 0x3d
 8004726:	2101      	movs	r1, #1
 8004728:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	0018      	movs	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	b002      	add	sp, #8
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	223d      	movs	r2, #61	; 0x3d
 8004740:	5c9b      	ldrb	r3, [r3, r2]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d001      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e03b      	b.n	80047c4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	223d      	movs	r2, #61	; 0x3d
 8004750:	2102      	movs	r1, #2
 8004752:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2101      	movs	r1, #1
 8004760:	430a      	orrs	r2, r1
 8004762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a18      	ldr	r2, [pc, #96]	; (80047cc <HAL_TIM_Base_Start_IT+0x98>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00f      	beq.n	800478e <HAL_TIM_Base_Start_IT+0x5a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	2380      	movs	r3, #128	; 0x80
 8004774:	05db      	lsls	r3, r3, #23
 8004776:	429a      	cmp	r2, r3
 8004778:	d009      	beq.n	800478e <HAL_TIM_Base_Start_IT+0x5a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a14      	ldr	r2, [pc, #80]	; (80047d0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_TIM_Base_Start_IT+0x5a>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a12      	ldr	r2, [pc, #72]	; (80047d4 <HAL_TIM_Base_Start_IT+0xa0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d111      	bne.n	80047b2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2207      	movs	r2, #7
 8004796:	4013      	ands	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2b06      	cmp	r3, #6
 800479e:	d010      	beq.n	80047c2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2101      	movs	r1, #1
 80047ac:	430a      	orrs	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b0:	e007      	b.n	80047c2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2101      	movs	r1, #1
 80047be:	430a      	orrs	r2, r1
 80047c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	0018      	movs	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	b004      	add	sp, #16
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40012c00 	.word	0x40012c00
 80047d0:	40000400 	.word	0x40000400
 80047d4:	40014000 	.word	0x40014000

080047d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e042      	b.n	8004870 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	223d      	movs	r2, #61	; 0x3d
 80047ee:	5c9b      	ldrb	r3, [r3, r2]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d107      	bne.n	8004806 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	223c      	movs	r2, #60	; 0x3c
 80047fa:	2100      	movs	r1, #0
 80047fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	0018      	movs	r0, r3
 8004802:	f000 f839 	bl	8004878 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	223d      	movs	r2, #61	; 0x3d
 800480a:	2102      	movs	r1, #2
 800480c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3304      	adds	r3, #4
 8004816:	0019      	movs	r1, r3
 8004818:	0010      	movs	r0, r2
 800481a:	f000 fb0d 	bl	8004e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2246      	movs	r2, #70	; 0x46
 8004822:	2101      	movs	r1, #1
 8004824:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	223e      	movs	r2, #62	; 0x3e
 800482a:	2101      	movs	r1, #1
 800482c:	5499      	strb	r1, [r3, r2]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	223f      	movs	r2, #63	; 0x3f
 8004832:	2101      	movs	r1, #1
 8004834:	5499      	strb	r1, [r3, r2]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2240      	movs	r2, #64	; 0x40
 800483a:	2101      	movs	r1, #1
 800483c:	5499      	strb	r1, [r3, r2]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2241      	movs	r2, #65	; 0x41
 8004842:	2101      	movs	r1, #1
 8004844:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2242      	movs	r2, #66	; 0x42
 800484a:	2101      	movs	r1, #1
 800484c:	5499      	strb	r1, [r3, r2]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2243      	movs	r2, #67	; 0x43
 8004852:	2101      	movs	r1, #1
 8004854:	5499      	strb	r1, [r3, r2]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2244      	movs	r2, #68	; 0x44
 800485a:	2101      	movs	r1, #1
 800485c:	5499      	strb	r1, [r3, r2]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2245      	movs	r2, #69	; 0x45
 8004862:	2101      	movs	r1, #1
 8004864:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	223d      	movs	r2, #61	; 0x3d
 800486a:	2101      	movs	r1, #1
 800486c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	0018      	movs	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	b002      	add	sp, #8
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004880:	46c0      	nop			; (mov r8, r8)
 8004882:	46bd      	mov	sp, r7
 8004884:	b002      	add	sp, #8
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2202      	movs	r2, #2
 8004898:	4013      	ands	r3, r2
 800489a:	2b02      	cmp	r3, #2
 800489c:	d124      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	2202      	movs	r2, #2
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d11d      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2203      	movs	r2, #3
 80048b2:	4252      	negs	r2, r2
 80048b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2203      	movs	r2, #3
 80048c4:	4013      	ands	r3, r2
 80048c6:	d004      	beq.n	80048d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	0018      	movs	r0, r3
 80048cc:	f000 fa9c 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 80048d0:	e007      	b.n	80048e2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	0018      	movs	r0, r3
 80048d6:	f000 fa8f 	bl	8004df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	0018      	movs	r0, r3
 80048de:	f000 fa9b 	bl	8004e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2204      	movs	r2, #4
 80048f0:	4013      	ands	r3, r2
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d125      	bne.n	8004942 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2204      	movs	r2, #4
 80048fe:	4013      	ands	r3, r2
 8004900:	2b04      	cmp	r3, #4
 8004902:	d11e      	bne.n	8004942 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2205      	movs	r2, #5
 800490a:	4252      	negs	r2, r2
 800490c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2202      	movs	r2, #2
 8004912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699a      	ldr	r2, [r3, #24]
 800491a:	23c0      	movs	r3, #192	; 0xc0
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4013      	ands	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	0018      	movs	r0, r3
 8004926:	f000 fa6f 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 800492a:	e007      	b.n	800493c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	0018      	movs	r0, r3
 8004930:	f000 fa62 	bl	8004df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	0018      	movs	r0, r3
 8004938:	f000 fa6e 	bl	8004e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2208      	movs	r2, #8
 800494a:	4013      	ands	r3, r2
 800494c:	2b08      	cmp	r3, #8
 800494e:	d124      	bne.n	800499a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2208      	movs	r2, #8
 8004958:	4013      	ands	r3, r2
 800495a:	2b08      	cmp	r3, #8
 800495c:	d11d      	bne.n	800499a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2209      	movs	r2, #9
 8004964:	4252      	negs	r2, r2
 8004966:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2204      	movs	r2, #4
 800496c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	2203      	movs	r2, #3
 8004976:	4013      	ands	r3, r2
 8004978:	d004      	beq.n	8004984 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	0018      	movs	r0, r3
 800497e:	f000 fa43 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004982:	e007      	b.n	8004994 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	0018      	movs	r0, r3
 8004988:	f000 fa36 	bl	8004df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	0018      	movs	r0, r3
 8004990:	f000 fa42 	bl	8004e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	2210      	movs	r2, #16
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	d125      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2210      	movs	r2, #16
 80049b0:	4013      	ands	r3, r2
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	d11e      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2211      	movs	r2, #17
 80049bc:	4252      	negs	r2, r2
 80049be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2208      	movs	r2, #8
 80049c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69da      	ldr	r2, [r3, #28]
 80049cc:	23c0      	movs	r3, #192	; 0xc0
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4013      	ands	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	0018      	movs	r0, r3
 80049d8:	f000 fa16 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 80049dc:	e007      	b.n	80049ee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	0018      	movs	r0, r3
 80049e2:	f000 fa09 	bl	8004df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	0018      	movs	r0, r3
 80049ea:	f000 fa15 	bl	8004e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2201      	movs	r2, #1
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d10f      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d108      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2202      	movs	r2, #2
 8004a16:	4252      	negs	r2, r2
 8004a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f000 f9e3 	bl	8004de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2280      	movs	r2, #128	; 0x80
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b80      	cmp	r3, #128	; 0x80
 8004a2e:	d10f      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	2280      	movs	r2, #128	; 0x80
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b80      	cmp	r3, #128	; 0x80
 8004a3c:	d108      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2281      	movs	r2, #129	; 0x81
 8004a44:	4252      	negs	r2, r2
 8004a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f000 fd70 	bl	8005530 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	2240      	movs	r2, #64	; 0x40
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b40      	cmp	r3, #64	; 0x40
 8004a5c:	d10f      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	2240      	movs	r2, #64	; 0x40
 8004a66:	4013      	ands	r3, r2
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d108      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2241      	movs	r2, #65	; 0x41
 8004a72:	4252      	negs	r2, r2
 8004a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f000 f9d5 	bl	8004e28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	2220      	movs	r2, #32
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d10f      	bne.n	8004aac <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	4013      	ands	r3, r2
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d108      	bne.n	8004aac <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2221      	movs	r2, #33	; 0x21
 8004aa0:	4252      	negs	r2, r2
 8004aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f000 fd3a 	bl	8005520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aac:	46c0      	nop			; (mov r8, r8)
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b002      	add	sp, #8
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac0:	2317      	movs	r3, #23
 8004ac2:	18fb      	adds	r3, r7, r3
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	223c      	movs	r2, #60	; 0x3c
 8004acc:	5c9b      	ldrb	r3, [r3, r2]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e0ad      	b.n	8004c32 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	223c      	movs	r2, #60	; 0x3c
 8004ada:	2101      	movs	r1, #1
 8004adc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b0c      	cmp	r3, #12
 8004ae2:	d100      	bne.n	8004ae6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004ae4:	e076      	b.n	8004bd4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b0c      	cmp	r3, #12
 8004aea:	d900      	bls.n	8004aee <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004aec:	e095      	b.n	8004c1a <HAL_TIM_PWM_ConfigChannel+0x166>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d04e      	beq.n	8004b92 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d900      	bls.n	8004afc <HAL_TIM_PWM_ConfigChannel+0x48>
 8004afa:	e08e      	b.n	8004c1a <HAL_TIM_PWM_ConfigChannel+0x166>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x56>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d021      	beq.n	8004b4c <HAL_TIM_PWM_ConfigChannel+0x98>
 8004b08:	e087      	b.n	8004c1a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	0011      	movs	r1, r2
 8004b12:	0018      	movs	r0, r3
 8004b14:	f000 fa10 	bl	8004f38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2108      	movs	r1, #8
 8004b24:	430a      	orrs	r2, r1
 8004b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2104      	movs	r1, #4
 8004b34:	438a      	bics	r2, r1
 8004b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6999      	ldr	r1, [r3, #24]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	691a      	ldr	r2, [r3, #16]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	619a      	str	r2, [r3, #24]
      break;
 8004b4a:	e06b      	b.n	8004c24 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	0011      	movs	r1, r2
 8004b54:	0018      	movs	r0, r3
 8004b56:	f000 fa77 	bl	8005048 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	699a      	ldr	r2, [r3, #24]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2180      	movs	r1, #128	; 0x80
 8004b66:	0109      	lsls	r1, r1, #4
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4931      	ldr	r1, [pc, #196]	; (8004c3c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004b78:	400a      	ands	r2, r1
 8004b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6999      	ldr	r1, [r3, #24]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	021a      	lsls	r2, r3, #8
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	619a      	str	r2, [r3, #24]
      break;
 8004b90:	e048      	b.n	8004c24 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	0011      	movs	r1, r2
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f000 fad8 	bl	8005150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69da      	ldr	r2, [r3, #28]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2108      	movs	r1, #8
 8004bac:	430a      	orrs	r2, r1
 8004bae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2104      	movs	r1, #4
 8004bbc:	438a      	bics	r2, r1
 8004bbe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69d9      	ldr	r1, [r3, #28]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	691a      	ldr	r2, [r3, #16]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	61da      	str	r2, [r3, #28]
      break;
 8004bd2:	e027      	b.n	8004c24 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	0011      	movs	r1, r2
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f000 fb3d 	bl	800525c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69da      	ldr	r2, [r3, #28]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2180      	movs	r1, #128	; 0x80
 8004bee:	0109      	lsls	r1, r1, #4
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69da      	ldr	r2, [r3, #28]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	490f      	ldr	r1, [pc, #60]	; (8004c3c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004c00:	400a      	ands	r2, r1
 8004c02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69d9      	ldr	r1, [r3, #28]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	021a      	lsls	r2, r3, #8
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	61da      	str	r2, [r3, #28]
      break;
 8004c18:	e004      	b.n	8004c24 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004c1a:	2317      	movs	r3, #23
 8004c1c:	18fb      	adds	r3, r7, r3
 8004c1e:	2201      	movs	r2, #1
 8004c20:	701a      	strb	r2, [r3, #0]
      break;
 8004c22:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	223c      	movs	r2, #60	; 0x3c
 8004c28:	2100      	movs	r1, #0
 8004c2a:	5499      	strb	r1, [r3, r2]

  return status;
 8004c2c:	2317      	movs	r3, #23
 8004c2e:	18fb      	adds	r3, r7, r3
 8004c30:	781b      	ldrb	r3, [r3, #0]
}
 8004c32:	0018      	movs	r0, r3
 8004c34:	46bd      	mov	sp, r7
 8004c36:	b006      	add	sp, #24
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	fffffbff 	.word	0xfffffbff

08004c40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c4a:	230f      	movs	r3, #15
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	2200      	movs	r2, #0
 8004c50:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	223c      	movs	r2, #60	; 0x3c
 8004c56:	5c9b      	ldrb	r3, [r3, r2]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_TIM_ConfigClockSource+0x20>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e0bc      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x19a>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	223c      	movs	r2, #60	; 0x3c
 8004c64:	2101      	movs	r1, #1
 8004c66:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	223d      	movs	r2, #61	; 0x3d
 8004c6c:	2102      	movs	r1, #2
 8004c6e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2277      	movs	r2, #119	; 0x77
 8004c7c:	4393      	bics	r3, r2
 8004c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	4a58      	ldr	r2, [pc, #352]	; (8004de4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2280      	movs	r2, #128	; 0x80
 8004c96:	0192      	lsls	r2, r2, #6
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d040      	beq.n	8004d1e <HAL_TIM_ConfigClockSource+0xde>
 8004c9c:	2280      	movs	r2, #128	; 0x80
 8004c9e:	0192      	lsls	r2, r2, #6
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d900      	bls.n	8004ca6 <HAL_TIM_ConfigClockSource+0x66>
 8004ca4:	e088      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x178>
 8004ca6:	2280      	movs	r2, #128	; 0x80
 8004ca8:	0152      	lsls	r2, r2, #5
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d100      	bne.n	8004cb0 <HAL_TIM_ConfigClockSource+0x70>
 8004cae:	e088      	b.n	8004dc2 <HAL_TIM_ConfigClockSource+0x182>
 8004cb0:	2280      	movs	r2, #128	; 0x80
 8004cb2:	0152      	lsls	r2, r2, #5
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d900      	bls.n	8004cba <HAL_TIM_ConfigClockSource+0x7a>
 8004cb8:	e07e      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x178>
 8004cba:	2b70      	cmp	r3, #112	; 0x70
 8004cbc:	d018      	beq.n	8004cf0 <HAL_TIM_ConfigClockSource+0xb0>
 8004cbe:	d900      	bls.n	8004cc2 <HAL_TIM_ConfigClockSource+0x82>
 8004cc0:	e07a      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x178>
 8004cc2:	2b60      	cmp	r3, #96	; 0x60
 8004cc4:	d04f      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x126>
 8004cc6:	d900      	bls.n	8004cca <HAL_TIM_ConfigClockSource+0x8a>
 8004cc8:	e076      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x178>
 8004cca:	2b50      	cmp	r3, #80	; 0x50
 8004ccc:	d03b      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x106>
 8004cce:	d900      	bls.n	8004cd2 <HAL_TIM_ConfigClockSource+0x92>
 8004cd0:	e072      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x178>
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d057      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x146>
 8004cd6:	d900      	bls.n	8004cda <HAL_TIM_ConfigClockSource+0x9a>
 8004cd8:	e06e      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x178>
 8004cda:	2b30      	cmp	r3, #48	; 0x30
 8004cdc:	d063      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x166>
 8004cde:	d86b      	bhi.n	8004db8 <HAL_TIM_ConfigClockSource+0x178>
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d060      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x166>
 8004ce4:	d868      	bhi.n	8004db8 <HAL_TIM_ConfigClockSource+0x178>
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d05d      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x166>
 8004cea:	2b10      	cmp	r3, #16
 8004cec:	d05b      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x166>
 8004cee:	e063      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d00:	f000 fb90 	bl	8005424 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2277      	movs	r2, #119	; 0x77
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	609a      	str	r2, [r3, #8]
      break;
 8004d1c:	e052      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d2e:	f000 fb79 	bl	8005424 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2180      	movs	r1, #128	; 0x80
 8004d3e:	01c9      	lsls	r1, r1, #7
 8004d40:	430a      	orrs	r2, r1
 8004d42:	609a      	str	r2, [r3, #8]
      break;
 8004d44:	e03e      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d52:	001a      	movs	r2, r3
 8004d54:	f000 faec 	bl	8005330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2150      	movs	r1, #80	; 0x50
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f000 fb46 	bl	80053f0 <TIM_ITRx_SetConfig>
      break;
 8004d64:	e02e      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d72:	001a      	movs	r2, r3
 8004d74:	f000 fb0a 	bl	800538c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2160      	movs	r1, #96	; 0x60
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f000 fb36 	bl	80053f0 <TIM_ITRx_SetConfig>
      break;
 8004d84:	e01e      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d92:	001a      	movs	r2, r3
 8004d94:	f000 facc 	bl	8005330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2140      	movs	r1, #64	; 0x40
 8004d9e:	0018      	movs	r0, r3
 8004da0:	f000 fb26 	bl	80053f0 <TIM_ITRx_SetConfig>
      break;
 8004da4:	e00e      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	0019      	movs	r1, r3
 8004db0:	0010      	movs	r0, r2
 8004db2:	f000 fb1d 	bl	80053f0 <TIM_ITRx_SetConfig>
      break;
 8004db6:	e005      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004db8:	230f      	movs	r3, #15
 8004dba:	18fb      	adds	r3, r7, r3
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	701a      	strb	r2, [r3, #0]
      break;
 8004dc0:	e000      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004dc2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	223d      	movs	r2, #61	; 0x3d
 8004dc8:	2101      	movs	r1, #1
 8004dca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	223c      	movs	r2, #60	; 0x3c
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	5499      	strb	r1, [r3, r2]

  return status;
 8004dd4:	230f      	movs	r3, #15
 8004dd6:	18fb      	adds	r3, r7, r3
 8004dd8:	781b      	ldrb	r3, [r3, #0]
}
 8004dda:	0018      	movs	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b004      	add	sp, #16
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	ffff00ff 	.word	0xffff00ff

08004de8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004df0:	46c0      	nop			; (mov r8, r8)
 8004df2:	46bd      	mov	sp, r7
 8004df4:	b002      	add	sp, #8
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e00:	46c0      	nop			; (mov r8, r8)
 8004e02:	46bd      	mov	sp, r7
 8004e04:	b002      	add	sp, #8
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e10:	46c0      	nop			; (mov r8, r8)
 8004e12:	46bd      	mov	sp, r7
 8004e14:	b002      	add	sp, #8
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e20:	46c0      	nop			; (mov r8, r8)
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b002      	add	sp, #8
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e30:	46c0      	nop			; (mov r8, r8)
 8004e32:	46bd      	mov	sp, r7
 8004e34:	b002      	add	sp, #8
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a34      	ldr	r2, [pc, #208]	; (8004f1c <TIM_Base_SetConfig+0xe4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d008      	beq.n	8004e62 <TIM_Base_SetConfig+0x2a>
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	05db      	lsls	r3, r3, #23
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d003      	beq.n	8004e62 <TIM_Base_SetConfig+0x2a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a30      	ldr	r2, [pc, #192]	; (8004f20 <TIM_Base_SetConfig+0xe8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d108      	bne.n	8004e74 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2270      	movs	r2, #112	; 0x70
 8004e66:	4393      	bics	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a29      	ldr	r2, [pc, #164]	; (8004f1c <TIM_Base_SetConfig+0xe4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d018      	beq.n	8004eae <TIM_Base_SetConfig+0x76>
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	2380      	movs	r3, #128	; 0x80
 8004e80:	05db      	lsls	r3, r3, #23
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d013      	beq.n	8004eae <TIM_Base_SetConfig+0x76>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a25      	ldr	r2, [pc, #148]	; (8004f20 <TIM_Base_SetConfig+0xe8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00f      	beq.n	8004eae <TIM_Base_SetConfig+0x76>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a24      	ldr	r2, [pc, #144]	; (8004f24 <TIM_Base_SetConfig+0xec>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00b      	beq.n	8004eae <TIM_Base_SetConfig+0x76>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a23      	ldr	r2, [pc, #140]	; (8004f28 <TIM_Base_SetConfig+0xf0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d007      	beq.n	8004eae <TIM_Base_SetConfig+0x76>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a22      	ldr	r2, [pc, #136]	; (8004f2c <TIM_Base_SetConfig+0xf4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d003      	beq.n	8004eae <TIM_Base_SetConfig+0x76>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a21      	ldr	r2, [pc, #132]	; (8004f30 <TIM_Base_SetConfig+0xf8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d108      	bne.n	8004ec0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4a20      	ldr	r2, [pc, #128]	; (8004f34 <TIM_Base_SetConfig+0xfc>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2280      	movs	r2, #128	; 0x80
 8004ec4:	4393      	bics	r3, r2
 8004ec6:	001a      	movs	r2, r3
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a0c      	ldr	r2, [pc, #48]	; (8004f1c <TIM_Base_SetConfig+0xe4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00b      	beq.n	8004f06 <TIM_Base_SetConfig+0xce>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a0d      	ldr	r2, [pc, #52]	; (8004f28 <TIM_Base_SetConfig+0xf0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d007      	beq.n	8004f06 <TIM_Base_SetConfig+0xce>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a0c      	ldr	r2, [pc, #48]	; (8004f2c <TIM_Base_SetConfig+0xf4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d003      	beq.n	8004f06 <TIM_Base_SetConfig+0xce>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a0b      	ldr	r2, [pc, #44]	; (8004f30 <TIM_Base_SetConfig+0xf8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d103      	bne.n	8004f0e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	615a      	str	r2, [r3, #20]
}
 8004f14:	46c0      	nop			; (mov r8, r8)
 8004f16:	46bd      	mov	sp, r7
 8004f18:	b004      	add	sp, #16
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	40012c00 	.word	0x40012c00
 8004f20:	40000400 	.word	0x40000400
 8004f24:	40002000 	.word	0x40002000
 8004f28:	40014000 	.word	0x40014000
 8004f2c:	40014400 	.word	0x40014400
 8004f30:	40014800 	.word	0x40014800
 8004f34:	fffffcff 	.word	0xfffffcff

08004f38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	2201      	movs	r2, #1
 8004f48:	4393      	bics	r3, r2
 8004f4a:	001a      	movs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2270      	movs	r2, #112	; 0x70
 8004f66:	4393      	bics	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	4393      	bics	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	4393      	bics	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a27      	ldr	r2, [pc, #156]	; (8005030 <TIM_OC1_SetConfig+0xf8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00b      	beq.n	8004fae <TIM_OC1_SetConfig+0x76>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a26      	ldr	r2, [pc, #152]	; (8005034 <TIM_OC1_SetConfig+0xfc>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d007      	beq.n	8004fae <TIM_OC1_SetConfig+0x76>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a25      	ldr	r2, [pc, #148]	; (8005038 <TIM_OC1_SetConfig+0x100>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d003      	beq.n	8004fae <TIM_OC1_SetConfig+0x76>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a24      	ldr	r2, [pc, #144]	; (800503c <TIM_OC1_SetConfig+0x104>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d10c      	bne.n	8004fc8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2208      	movs	r2, #8
 8004fb2:	4393      	bics	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	2204      	movs	r2, #4
 8004fc4:	4393      	bics	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a19      	ldr	r2, [pc, #100]	; (8005030 <TIM_OC1_SetConfig+0xf8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00b      	beq.n	8004fe8 <TIM_OC1_SetConfig+0xb0>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a18      	ldr	r2, [pc, #96]	; (8005034 <TIM_OC1_SetConfig+0xfc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d007      	beq.n	8004fe8 <TIM_OC1_SetConfig+0xb0>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a17      	ldr	r2, [pc, #92]	; (8005038 <TIM_OC1_SetConfig+0x100>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <TIM_OC1_SetConfig+0xb0>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a16      	ldr	r2, [pc, #88]	; (800503c <TIM_OC1_SetConfig+0x104>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d111      	bne.n	800500c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	4a15      	ldr	r2, [pc, #84]	; (8005040 <TIM_OC1_SetConfig+0x108>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4a14      	ldr	r2, [pc, #80]	; (8005044 <TIM_OC1_SetConfig+0x10c>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	621a      	str	r2, [r3, #32]
}
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	46bd      	mov	sp, r7
 800502a:	b006      	add	sp, #24
 800502c:	bd80      	pop	{r7, pc}
 800502e:	46c0      	nop			; (mov r8, r8)
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40014000 	.word	0x40014000
 8005038:	40014400 	.word	0x40014400
 800503c:	40014800 	.word	0x40014800
 8005040:	fffffeff 	.word	0xfffffeff
 8005044:	fffffdff 	.word	0xfffffdff

08005048 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	2210      	movs	r2, #16
 8005058:	4393      	bics	r3, r2
 800505a:	001a      	movs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4a2e      	ldr	r2, [pc, #184]	; (8005130 <TIM_OC2_SetConfig+0xe8>)
 8005076:	4013      	ands	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4a2d      	ldr	r2, [pc, #180]	; (8005134 <TIM_OC2_SetConfig+0xec>)
 800507e:	4013      	ands	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2220      	movs	r2, #32
 8005092:	4393      	bics	r3, r2
 8005094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a24      	ldr	r2, [pc, #144]	; (8005138 <TIM_OC2_SetConfig+0xf0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d10d      	bne.n	80050c6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2280      	movs	r2, #128	; 0x80
 80050ae:	4393      	bics	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2240      	movs	r2, #64	; 0x40
 80050c2:	4393      	bics	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a1b      	ldr	r2, [pc, #108]	; (8005138 <TIM_OC2_SetConfig+0xf0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d00b      	beq.n	80050e6 <TIM_OC2_SetConfig+0x9e>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a1a      	ldr	r2, [pc, #104]	; (800513c <TIM_OC2_SetConfig+0xf4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d007      	beq.n	80050e6 <TIM_OC2_SetConfig+0x9e>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a19      	ldr	r2, [pc, #100]	; (8005140 <TIM_OC2_SetConfig+0xf8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d003      	beq.n	80050e6 <TIM_OC2_SetConfig+0x9e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a18      	ldr	r2, [pc, #96]	; (8005144 <TIM_OC2_SetConfig+0xfc>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d113      	bne.n	800510e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	4a17      	ldr	r2, [pc, #92]	; (8005148 <TIM_OC2_SetConfig+0x100>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	4a16      	ldr	r2, [pc, #88]	; (800514c <TIM_OC2_SetConfig+0x104>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	621a      	str	r2, [r3, #32]
}
 8005128:	46c0      	nop			; (mov r8, r8)
 800512a:	46bd      	mov	sp, r7
 800512c:	b006      	add	sp, #24
 800512e:	bd80      	pop	{r7, pc}
 8005130:	ffff8fff 	.word	0xffff8fff
 8005134:	fffffcff 	.word	0xfffffcff
 8005138:	40012c00 	.word	0x40012c00
 800513c:	40014000 	.word	0x40014000
 8005140:	40014400 	.word	0x40014400
 8005144:	40014800 	.word	0x40014800
 8005148:	fffffbff 	.word	0xfffffbff
 800514c:	fffff7ff 	.word	0xfffff7ff

08005150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	4a35      	ldr	r2, [pc, #212]	; (8005234 <TIM_OC3_SetConfig+0xe4>)
 8005160:	401a      	ands	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2270      	movs	r2, #112	; 0x70
 800517c:	4393      	bics	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2203      	movs	r2, #3
 8005184:	4393      	bics	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	4a28      	ldr	r2, [pc, #160]	; (8005238 <TIM_OC3_SetConfig+0xe8>)
 8005196:	4013      	ands	r3, r2
 8005198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a24      	ldr	r2, [pc, #144]	; (800523c <TIM_OC3_SetConfig+0xec>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d10d      	bne.n	80051ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	4a23      	ldr	r2, [pc, #140]	; (8005240 <TIM_OC3_SetConfig+0xf0>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	4a1f      	ldr	r2, [pc, #124]	; (8005244 <TIM_OC3_SetConfig+0xf4>)
 80051c6:	4013      	ands	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a1b      	ldr	r2, [pc, #108]	; (800523c <TIM_OC3_SetConfig+0xec>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00b      	beq.n	80051ea <TIM_OC3_SetConfig+0x9a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1c      	ldr	r2, [pc, #112]	; (8005248 <TIM_OC3_SetConfig+0xf8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d007      	beq.n	80051ea <TIM_OC3_SetConfig+0x9a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a1b      	ldr	r2, [pc, #108]	; (800524c <TIM_OC3_SetConfig+0xfc>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d003      	beq.n	80051ea <TIM_OC3_SetConfig+0x9a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1a      	ldr	r2, [pc, #104]	; (8005250 <TIM_OC3_SetConfig+0x100>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d113      	bne.n	8005212 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4a19      	ldr	r2, [pc, #100]	; (8005254 <TIM_OC3_SetConfig+0x104>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4a18      	ldr	r2, [pc, #96]	; (8005258 <TIM_OC3_SetConfig+0x108>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	621a      	str	r2, [r3, #32]
}
 800522c:	46c0      	nop			; (mov r8, r8)
 800522e:	46bd      	mov	sp, r7
 8005230:	b006      	add	sp, #24
 8005232:	bd80      	pop	{r7, pc}
 8005234:	fffffeff 	.word	0xfffffeff
 8005238:	fffffdff 	.word	0xfffffdff
 800523c:	40012c00 	.word	0x40012c00
 8005240:	fffff7ff 	.word	0xfffff7ff
 8005244:	fffffbff 	.word	0xfffffbff
 8005248:	40014000 	.word	0x40014000
 800524c:	40014400 	.word	0x40014400
 8005250:	40014800 	.word	0x40014800
 8005254:	ffffefff 	.word	0xffffefff
 8005258:	ffffdfff 	.word	0xffffdfff

0800525c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	4a28      	ldr	r2, [pc, #160]	; (800530c <TIM_OC4_SetConfig+0xb0>)
 800526c:	401a      	ands	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4a22      	ldr	r2, [pc, #136]	; (8005310 <TIM_OC4_SetConfig+0xb4>)
 8005288:	4013      	ands	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4a21      	ldr	r2, [pc, #132]	; (8005314 <TIM_OC4_SetConfig+0xb8>)
 8005290:	4013      	ands	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	021b      	lsls	r3, r3, #8
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4313      	orrs	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	4a1d      	ldr	r2, [pc, #116]	; (8005318 <TIM_OC4_SetConfig+0xbc>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	031b      	lsls	r3, r3, #12
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a19      	ldr	r2, [pc, #100]	; (800531c <TIM_OC4_SetConfig+0xc0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00b      	beq.n	80052d4 <TIM_OC4_SetConfig+0x78>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a18      	ldr	r2, [pc, #96]	; (8005320 <TIM_OC4_SetConfig+0xc4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d007      	beq.n	80052d4 <TIM_OC4_SetConfig+0x78>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a17      	ldr	r2, [pc, #92]	; (8005324 <TIM_OC4_SetConfig+0xc8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d003      	beq.n	80052d4 <TIM_OC4_SetConfig+0x78>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a16      	ldr	r2, [pc, #88]	; (8005328 <TIM_OC4_SetConfig+0xcc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d109      	bne.n	80052e8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	4a15      	ldr	r2, [pc, #84]	; (800532c <TIM_OC4_SetConfig+0xd0>)
 80052d8:	4013      	ands	r3, r2
 80052da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	019b      	lsls	r3, r3, #6
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	621a      	str	r2, [r3, #32]
}
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	46bd      	mov	sp, r7
 8005306:	b006      	add	sp, #24
 8005308:	bd80      	pop	{r7, pc}
 800530a:	46c0      	nop			; (mov r8, r8)
 800530c:	ffffefff 	.word	0xffffefff
 8005310:	ffff8fff 	.word	0xffff8fff
 8005314:	fffffcff 	.word	0xfffffcff
 8005318:	ffffdfff 	.word	0xffffdfff
 800531c:	40012c00 	.word	0x40012c00
 8005320:	40014000 	.word	0x40014000
 8005324:	40014400 	.word	0x40014400
 8005328:	40014800 	.word	0x40014800
 800532c:	ffffbfff 	.word	0xffffbfff

08005330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	2201      	movs	r2, #1
 8005348:	4393      	bics	r3, r2
 800534a:	001a      	movs	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	22f0      	movs	r2, #240	; 0xf0
 800535a:	4393      	bics	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	220a      	movs	r2, #10
 800536c:	4393      	bics	r3, r2
 800536e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	621a      	str	r2, [r3, #32]
}
 8005384:	46c0      	nop			; (mov r8, r8)
 8005386:	46bd      	mov	sp, r7
 8005388:	b006      	add	sp, #24
 800538a:	bd80      	pop	{r7, pc}

0800538c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	2210      	movs	r2, #16
 800539e:	4393      	bics	r3, r2
 80053a0:	001a      	movs	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	4a0d      	ldr	r2, [pc, #52]	; (80053ec <TIM_TI2_ConfigInputStage+0x60>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	031b      	lsls	r3, r3, #12
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	22a0      	movs	r2, #160	; 0xa0
 80053c8:	4393      	bics	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	621a      	str	r2, [r3, #32]
}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	46bd      	mov	sp, r7
 80053e6:	b006      	add	sp, #24
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	ffff0fff 	.word	0xffff0fff

080053f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2270      	movs	r2, #112	; 0x70
 8005404:	4393      	bics	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4313      	orrs	r3, r2
 800540e:	2207      	movs	r2, #7
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	609a      	str	r2, [r3, #8]
}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	46bd      	mov	sp, r7
 800541e:	b004      	add	sp, #16
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	4a09      	ldr	r2, [pc, #36]	; (8005460 <TIM_ETR_SetConfig+0x3c>)
 800543c:	4013      	ands	r3, r2
 800543e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	021a      	lsls	r2, r3, #8
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	431a      	orrs	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4313      	orrs	r3, r2
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	4313      	orrs	r3, r2
 8005450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	609a      	str	r2, [r3, #8]
}
 8005458:	46c0      	nop			; (mov r8, r8)
 800545a:	46bd      	mov	sp, r7
 800545c:	b006      	add	sp, #24
 800545e:	bd80      	pop	{r7, pc}
 8005460:	ffff00ff 	.word	0xffff00ff

08005464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	223c      	movs	r2, #60	; 0x3c
 8005472:	5c9b      	ldrb	r3, [r3, r2]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005478:	2302      	movs	r3, #2
 800547a:	e047      	b.n	800550c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	223c      	movs	r2, #60	; 0x3c
 8005480:	2101      	movs	r1, #1
 8005482:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	223d      	movs	r2, #61	; 0x3d
 8005488:	2102      	movs	r1, #2
 800548a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2270      	movs	r2, #112	; 0x70
 80054a0:	4393      	bics	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a16      	ldr	r2, [pc, #88]	; (8005514 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00f      	beq.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	2380      	movs	r3, #128	; 0x80
 80054c6:	05db      	lsls	r3, r3, #23
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d009      	beq.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a11      	ldr	r2, [pc, #68]	; (8005518 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d004      	beq.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a10      	ldr	r2, [pc, #64]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d10c      	bne.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2280      	movs	r2, #128	; 0x80
 80054e4:	4393      	bics	r3, r2
 80054e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	223d      	movs	r2, #61	; 0x3d
 80054fe:	2101      	movs	r1, #1
 8005500:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	223c      	movs	r2, #60	; 0x3c
 8005506:	2100      	movs	r1, #0
 8005508:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	0018      	movs	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	b004      	add	sp, #16
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40012c00 	.word	0x40012c00
 8005518:	40000400 	.word	0x40000400
 800551c:	40014000 	.word	0x40014000

08005520 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005528:	46c0      	nop			; (mov r8, r8)
 800552a:	46bd      	mov	sp, r7
 800552c:	b002      	add	sp, #8
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005538:	46c0      	nop			; (mov r8, r8)
 800553a:	46bd      	mov	sp, r7
 800553c:	b002      	add	sp, #8
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e044      	b.n	80055dc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d107      	bne.n	800556a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2278      	movs	r2, #120	; 0x78
 800555e:	2100      	movs	r1, #0
 8005560:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	0018      	movs	r0, r3
 8005566:	f7fd f86b 	bl	8002640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2224      	movs	r2, #36	; 0x24
 800556e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2101      	movs	r1, #1
 800557c:	438a      	bics	r2, r1
 800557e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	0018      	movs	r0, r3
 8005584:	f000 fc24 	bl	8005dd0 <UART_SetConfig>
 8005588:	0003      	movs	r3, r0
 800558a:	2b01      	cmp	r3, #1
 800558c:	d101      	bne.n	8005592 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e024      	b.n	80055dc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	0018      	movs	r0, r3
 800559e:	f000 fd9f 	bl	80060e0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	490d      	ldr	r1, [pc, #52]	; (80055e4 <HAL_UART_Init+0xa4>)
 80055ae:	400a      	ands	r2, r1
 80055b0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	212a      	movs	r1, #42	; 0x2a
 80055be:	438a      	bics	r2, r1
 80055c0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2101      	movs	r1, #1
 80055ce:	430a      	orrs	r2, r1
 80055d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	0018      	movs	r0, r3
 80055d6:	f000 fe37 	bl	8006248 <UART_CheckIdleState>
 80055da:	0003      	movs	r3, r0
}
 80055dc:	0018      	movs	r0, r3
 80055de:	46bd      	mov	sp, r7
 80055e0:	b002      	add	sp, #8
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	ffffb7ff 	.word	0xffffb7ff

080055e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08a      	sub	sp, #40	; 0x28
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	1dbb      	adds	r3, r7, #6
 80055f6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d000      	beq.n	8005602 <HAL_UART_Transmit+0x1a>
 8005600:	e08d      	b.n	800571e <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_UART_Transmit+0x28>
 8005608:	1dbb      	adds	r3, r7, #6
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e085      	b.n	8005720 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	2380      	movs	r3, #128	; 0x80
 800561a:	015b      	lsls	r3, r3, #5
 800561c:	429a      	cmp	r2, r3
 800561e:	d109      	bne.n	8005634 <HAL_UART_Transmit+0x4c>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d105      	bne.n	8005634 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2201      	movs	r2, #1
 800562c:	4013      	ands	r3, r2
 800562e:	d001      	beq.n	8005634 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e075      	b.n	8005720 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2284      	movs	r2, #132	; 0x84
 8005638:	2100      	movs	r1, #0
 800563a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2221      	movs	r2, #33	; 0x21
 8005640:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005642:	f7fd f941 	bl	80028c8 <HAL_GetTick>
 8005646:	0003      	movs	r3, r0
 8005648:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	1dba      	adds	r2, r7, #6
 800564e:	2150      	movs	r1, #80	; 0x50
 8005650:	8812      	ldrh	r2, [r2, #0]
 8005652:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	1dba      	adds	r2, r7, #6
 8005658:	2152      	movs	r1, #82	; 0x52
 800565a:	8812      	ldrh	r2, [r2, #0]
 800565c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	2380      	movs	r3, #128	; 0x80
 8005664:	015b      	lsls	r3, r3, #5
 8005666:	429a      	cmp	r2, r3
 8005668:	d108      	bne.n	800567c <HAL_UART_Transmit+0x94>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d104      	bne.n	800567c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	e003      	b.n	8005684 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005680:	2300      	movs	r3, #0
 8005682:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005684:	e030      	b.n	80056e8 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	0013      	movs	r3, r2
 8005690:	2200      	movs	r2, #0
 8005692:	2180      	movs	r1, #128	; 0x80
 8005694:	f000 fe80 	bl	8006398 <UART_WaitOnFlagUntilTimeout>
 8005698:	1e03      	subs	r3, r0, #0
 800569a:	d004      	beq.n	80056a6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e03c      	b.n	8005720 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10b      	bne.n	80056c4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	881a      	ldrh	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	05d2      	lsls	r2, r2, #23
 80056b6:	0dd2      	lsrs	r2, r2, #23
 80056b8:	b292      	uxth	r2, r2
 80056ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	3302      	adds	r3, #2
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	e008      	b.n	80056d6 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	781a      	ldrb	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	b292      	uxth	r2, r2
 80056ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	3301      	adds	r3, #1
 80056d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2252      	movs	r2, #82	; 0x52
 80056da:	5a9b      	ldrh	r3, [r3, r2]
 80056dc:	b29b      	uxth	r3, r3
 80056de:	3b01      	subs	r3, #1
 80056e0:	b299      	uxth	r1, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2252      	movs	r2, #82	; 0x52
 80056e6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2252      	movs	r2, #82	; 0x52
 80056ec:	5a9b      	ldrh	r3, [r3, r2]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1c8      	bne.n	8005686 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	0013      	movs	r3, r2
 80056fe:	2200      	movs	r2, #0
 8005700:	2140      	movs	r1, #64	; 0x40
 8005702:	f000 fe49 	bl	8006398 <UART_WaitOnFlagUntilTimeout>
 8005706:	1e03      	subs	r3, r0, #0
 8005708:	d004      	beq.n	8005714 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2220      	movs	r2, #32
 800570e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e005      	b.n	8005720 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	e000      	b.n	8005720 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800571e:	2302      	movs	r3, #2
  }
}
 8005720:	0018      	movs	r0, r3
 8005722:	46bd      	mov	sp, r7
 8005724:	b008      	add	sp, #32
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	1dbb      	adds	r3, r7, #6
 8005734:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2280      	movs	r2, #128	; 0x80
 800573a:	589b      	ldr	r3, [r3, r2]
 800573c:	2b20      	cmp	r3, #32
 800573e:	d145      	bne.n	80057cc <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_UART_Receive_IT+0x26>
 8005746:	1dbb      	adds	r3, r7, #6
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e03d      	b.n	80057ce <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	689a      	ldr	r2, [r3, #8]
 8005756:	2380      	movs	r3, #128	; 0x80
 8005758:	015b      	lsls	r3, r3, #5
 800575a:	429a      	cmp	r2, r3
 800575c:	d109      	bne.n	8005772 <HAL_UART_Receive_IT+0x4a>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d105      	bne.n	8005772 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2201      	movs	r2, #1
 800576a:	4013      	ands	r3, r2
 800576c:	d001      	beq.n	8005772 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e02d      	b.n	80057ce <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	2380      	movs	r3, #128	; 0x80
 8005780:	041b      	lsls	r3, r3, #16
 8005782:	4013      	ands	r3, r2
 8005784:	d019      	beq.n	80057ba <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005786:	f3ef 8310 	mrs	r3, PRIMASK
 800578a:	613b      	str	r3, [r7, #16]
  return(result);
 800578c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800578e:	61fb      	str	r3, [r7, #28]
 8005790:	2301      	movs	r3, #1
 8005792:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f383 8810 	msr	PRIMASK, r3
}
 800579a:	46c0      	nop			; (mov r8, r8)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2180      	movs	r1, #128	; 0x80
 80057a8:	04c9      	lsls	r1, r1, #19
 80057aa:	430a      	orrs	r2, r1
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	f383 8810 	msr	PRIMASK, r3
}
 80057b8:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80057ba:	1dbb      	adds	r3, r7, #6
 80057bc:	881a      	ldrh	r2, [r3, #0]
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	0018      	movs	r0, r3
 80057c4:	f000 fe52 	bl	800646c <UART_Start_Receive_IT>
 80057c8:	0003      	movs	r3, r0
 80057ca:	e000      	b.n	80057ce <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80057cc:	2302      	movs	r3, #2
  }
}
 80057ce:	0018      	movs	r0, r3
 80057d0:	46bd      	mov	sp, r7
 80057d2:	b008      	add	sp, #32
 80057d4:	bd80      	pop	{r7, pc}
	...

080057d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057d8:	b590      	push	{r4, r7, lr}
 80057da:	b0ab      	sub	sp, #172	; 0xac
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	22a4      	movs	r2, #164	; 0xa4
 80057e8:	18b9      	adds	r1, r7, r2
 80057ea:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	20a0      	movs	r0, #160	; 0xa0
 80057f4:	1839      	adds	r1, r7, r0
 80057f6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	219c      	movs	r1, #156	; 0x9c
 8005800:	1879      	adds	r1, r7, r1
 8005802:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005804:	0011      	movs	r1, r2
 8005806:	18bb      	adds	r3, r7, r2
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a99      	ldr	r2, [pc, #612]	; (8005a70 <HAL_UART_IRQHandler+0x298>)
 800580c:	4013      	ands	r3, r2
 800580e:	2298      	movs	r2, #152	; 0x98
 8005810:	18bc      	adds	r4, r7, r2
 8005812:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005814:	18bb      	adds	r3, r7, r2
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d114      	bne.n	8005846 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800581c:	187b      	adds	r3, r7, r1
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2220      	movs	r2, #32
 8005822:	4013      	ands	r3, r2
 8005824:	d00f      	beq.n	8005846 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005826:	183b      	adds	r3, r7, r0
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2220      	movs	r2, #32
 800582c:	4013      	ands	r3, r2
 800582e:	d00a      	beq.n	8005846 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005834:	2b00      	cmp	r3, #0
 8005836:	d100      	bne.n	800583a <HAL_UART_IRQHandler+0x62>
 8005838:	e29e      	b.n	8005d78 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	0010      	movs	r0, r2
 8005842:	4798      	blx	r3
      }
      return;
 8005844:	e298      	b.n	8005d78 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005846:	2398      	movs	r3, #152	; 0x98
 8005848:	18fb      	adds	r3, r7, r3
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d100      	bne.n	8005852 <HAL_UART_IRQHandler+0x7a>
 8005850:	e114      	b.n	8005a7c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005852:	239c      	movs	r3, #156	; 0x9c
 8005854:	18fb      	adds	r3, r7, r3
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2201      	movs	r2, #1
 800585a:	4013      	ands	r3, r2
 800585c:	d106      	bne.n	800586c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800585e:	23a0      	movs	r3, #160	; 0xa0
 8005860:	18fb      	adds	r3, r7, r3
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a83      	ldr	r2, [pc, #524]	; (8005a74 <HAL_UART_IRQHandler+0x29c>)
 8005866:	4013      	ands	r3, r2
 8005868:	d100      	bne.n	800586c <HAL_UART_IRQHandler+0x94>
 800586a:	e107      	b.n	8005a7c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800586c:	23a4      	movs	r3, #164	; 0xa4
 800586e:	18fb      	adds	r3, r7, r3
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2201      	movs	r2, #1
 8005874:	4013      	ands	r3, r2
 8005876:	d012      	beq.n	800589e <HAL_UART_IRQHandler+0xc6>
 8005878:	23a0      	movs	r3, #160	; 0xa0
 800587a:	18fb      	adds	r3, r7, r3
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	2380      	movs	r3, #128	; 0x80
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	4013      	ands	r3, r2
 8005884:	d00b      	beq.n	800589e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2201      	movs	r2, #1
 800588c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2284      	movs	r2, #132	; 0x84
 8005892:	589b      	ldr	r3, [r3, r2]
 8005894:	2201      	movs	r2, #1
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2184      	movs	r1, #132	; 0x84
 800589c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800589e:	23a4      	movs	r3, #164	; 0xa4
 80058a0:	18fb      	adds	r3, r7, r3
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2202      	movs	r2, #2
 80058a6:	4013      	ands	r3, r2
 80058a8:	d011      	beq.n	80058ce <HAL_UART_IRQHandler+0xf6>
 80058aa:	239c      	movs	r3, #156	; 0x9c
 80058ac:	18fb      	adds	r3, r7, r3
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2201      	movs	r2, #1
 80058b2:	4013      	ands	r3, r2
 80058b4:	d00b      	beq.n	80058ce <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2202      	movs	r2, #2
 80058bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2284      	movs	r2, #132	; 0x84
 80058c2:	589b      	ldr	r3, [r3, r2]
 80058c4:	2204      	movs	r2, #4
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2184      	movs	r1, #132	; 0x84
 80058cc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058ce:	23a4      	movs	r3, #164	; 0xa4
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2204      	movs	r2, #4
 80058d6:	4013      	ands	r3, r2
 80058d8:	d011      	beq.n	80058fe <HAL_UART_IRQHandler+0x126>
 80058da:	239c      	movs	r3, #156	; 0x9c
 80058dc:	18fb      	adds	r3, r7, r3
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2201      	movs	r2, #1
 80058e2:	4013      	ands	r3, r2
 80058e4:	d00b      	beq.n	80058fe <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2204      	movs	r2, #4
 80058ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2284      	movs	r2, #132	; 0x84
 80058f2:	589b      	ldr	r3, [r3, r2]
 80058f4:	2202      	movs	r2, #2
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2184      	movs	r1, #132	; 0x84
 80058fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058fe:	23a4      	movs	r3, #164	; 0xa4
 8005900:	18fb      	adds	r3, r7, r3
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2208      	movs	r2, #8
 8005906:	4013      	ands	r3, r2
 8005908:	d017      	beq.n	800593a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800590a:	23a0      	movs	r3, #160	; 0xa0
 800590c:	18fb      	adds	r3, r7, r3
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2220      	movs	r2, #32
 8005912:	4013      	ands	r3, r2
 8005914:	d105      	bne.n	8005922 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005916:	239c      	movs	r3, #156	; 0x9c
 8005918:	18fb      	adds	r3, r7, r3
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2201      	movs	r2, #1
 800591e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005920:	d00b      	beq.n	800593a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2208      	movs	r2, #8
 8005928:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2284      	movs	r2, #132	; 0x84
 800592e:	589b      	ldr	r3, [r3, r2]
 8005930:	2208      	movs	r2, #8
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2184      	movs	r1, #132	; 0x84
 8005938:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800593a:	23a4      	movs	r3, #164	; 0xa4
 800593c:	18fb      	adds	r3, r7, r3
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	2380      	movs	r3, #128	; 0x80
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	4013      	ands	r3, r2
 8005946:	d013      	beq.n	8005970 <HAL_UART_IRQHandler+0x198>
 8005948:	23a0      	movs	r3, #160	; 0xa0
 800594a:	18fb      	adds	r3, r7, r3
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	2380      	movs	r3, #128	; 0x80
 8005950:	04db      	lsls	r3, r3, #19
 8005952:	4013      	ands	r3, r2
 8005954:	d00c      	beq.n	8005970 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2280      	movs	r2, #128	; 0x80
 800595c:	0112      	lsls	r2, r2, #4
 800595e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2284      	movs	r2, #132	; 0x84
 8005964:	589b      	ldr	r3, [r3, r2]
 8005966:	2220      	movs	r2, #32
 8005968:	431a      	orrs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2184      	movs	r1, #132	; 0x84
 800596e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2284      	movs	r2, #132	; 0x84
 8005974:	589b      	ldr	r3, [r3, r2]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d100      	bne.n	800597c <HAL_UART_IRQHandler+0x1a4>
 800597a:	e1ff      	b.n	8005d7c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800597c:	23a4      	movs	r3, #164	; 0xa4
 800597e:	18fb      	adds	r3, r7, r3
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2220      	movs	r2, #32
 8005984:	4013      	ands	r3, r2
 8005986:	d00e      	beq.n	80059a6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005988:	23a0      	movs	r3, #160	; 0xa0
 800598a:	18fb      	adds	r3, r7, r3
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2220      	movs	r2, #32
 8005990:	4013      	ands	r3, r2
 8005992:	d008      	beq.n	80059a6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005998:	2b00      	cmp	r3, #0
 800599a:	d004      	beq.n	80059a6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	0010      	movs	r0, r2
 80059a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2284      	movs	r2, #132	; 0x84
 80059aa:	589b      	ldr	r3, [r3, r2]
 80059ac:	2194      	movs	r1, #148	; 0x94
 80059ae:	187a      	adds	r2, r7, r1
 80059b0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	2240      	movs	r2, #64	; 0x40
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b40      	cmp	r3, #64	; 0x40
 80059be:	d004      	beq.n	80059ca <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059c0:	187b      	adds	r3, r7, r1
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2228      	movs	r2, #40	; 0x28
 80059c6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059c8:	d047      	beq.n	8005a5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	0018      	movs	r0, r3
 80059ce:	f000 fe17 	bl	8006600 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2240      	movs	r2, #64	; 0x40
 80059da:	4013      	ands	r3, r2
 80059dc:	2b40      	cmp	r3, #64	; 0x40
 80059de:	d137      	bne.n	8005a50 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e0:	f3ef 8310 	mrs	r3, PRIMASK
 80059e4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80059e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059e8:	2090      	movs	r0, #144	; 0x90
 80059ea:	183a      	adds	r2, r7, r0
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	2301      	movs	r3, #1
 80059f0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059f4:	f383 8810 	msr	PRIMASK, r3
}
 80059f8:	46c0      	nop			; (mov r8, r8)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2140      	movs	r1, #64	; 0x40
 8005a06:	438a      	bics	r2, r1
 8005a08:	609a      	str	r2, [r3, #8]
 8005a0a:	183b      	adds	r3, r7, r0
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a12:	f383 8810 	msr	PRIMASK, r3
}
 8005a16:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d012      	beq.n	8005a46 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a24:	4a14      	ldr	r2, [pc, #80]	; (8005a78 <HAL_UART_IRQHandler+0x2a0>)
 8005a26:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	f7fd f88f 	bl	8002b50 <HAL_DMA_Abort_IT>
 8005a32:	1e03      	subs	r3, r0, #0
 8005a34:	d01a      	beq.n	8005a6c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a40:	0018      	movs	r0, r3
 8005a42:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a44:	e012      	b.n	8005a6c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	0018      	movs	r0, r3
 8005a4a:	f000 f9ad 	bl	8005da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4e:	e00d      	b.n	8005a6c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	0018      	movs	r0, r3
 8005a54:	f000 f9a8 	bl	8005da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a58:	e008      	b.n	8005a6c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f000 f9a3 	bl	8005da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2284      	movs	r2, #132	; 0x84
 8005a66:	2100      	movs	r1, #0
 8005a68:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005a6a:	e187      	b.n	8005d7c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a6c:	46c0      	nop			; (mov r8, r8)
    return;
 8005a6e:	e185      	b.n	8005d7c <HAL_UART_IRQHandler+0x5a4>
 8005a70:	0000080f 	.word	0x0000080f
 8005a74:	04000120 	.word	0x04000120
 8005a78:	080066c9 	.word	0x080066c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d000      	beq.n	8005a86 <HAL_UART_IRQHandler+0x2ae>
 8005a84:	e139      	b.n	8005cfa <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a86:	23a4      	movs	r3, #164	; 0xa4
 8005a88:	18fb      	adds	r3, r7, r3
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2210      	movs	r2, #16
 8005a8e:	4013      	ands	r3, r2
 8005a90:	d100      	bne.n	8005a94 <HAL_UART_IRQHandler+0x2bc>
 8005a92:	e132      	b.n	8005cfa <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a94:	23a0      	movs	r3, #160	; 0xa0
 8005a96:	18fb      	adds	r3, r7, r3
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2210      	movs	r2, #16
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	d100      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x2ca>
 8005aa0:	e12b      	b.n	8005cfa <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2210      	movs	r2, #16
 8005aa8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2240      	movs	r2, #64	; 0x40
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	2b40      	cmp	r3, #64	; 0x40
 8005ab6:	d000      	beq.n	8005aba <HAL_UART_IRQHandler+0x2e2>
 8005ab8:	e09f      	b.n	8005bfa <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	217e      	movs	r1, #126	; 0x7e
 8005ac4:	187b      	adds	r3, r7, r1
 8005ac6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005ac8:	187b      	adds	r3, r7, r1
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d100      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x2fa>
 8005ad0:	e156      	b.n	8005d80 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2258      	movs	r2, #88	; 0x58
 8005ad6:	5a9b      	ldrh	r3, [r3, r2]
 8005ad8:	187a      	adds	r2, r7, r1
 8005ada:	8812      	ldrh	r2, [r2, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d300      	bcc.n	8005ae2 <HAL_UART_IRQHandler+0x30a>
 8005ae0:	e14e      	b.n	8005d80 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	187a      	adds	r2, r7, r1
 8005ae6:	215a      	movs	r1, #90	; 0x5a
 8005ae8:	8812      	ldrh	r2, [r2, #0]
 8005aea:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	2b20      	cmp	r3, #32
 8005af4:	d06f      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af6:	f3ef 8310 	mrs	r3, PRIMASK
 8005afa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005afe:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b00:	2301      	movs	r3, #1
 8005b02:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b06:	f383 8810 	msr	PRIMASK, r3
}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	499e      	ldr	r1, [pc, #632]	; (8005d90 <HAL_UART_IRQHandler+0x5b8>)
 8005b18:	400a      	ands	r2, r1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	f383 8810 	msr	PRIMASK, r3
}
 8005b26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b28:	f3ef 8310 	mrs	r3, PRIMASK
 8005b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b30:	677b      	str	r3, [r7, #116]	; 0x74
 8005b32:	2301      	movs	r3, #1
 8005b34:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b38:	f383 8810 	msr	PRIMASK, r3
}
 8005b3c:	46c0      	nop			; (mov r8, r8)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2101      	movs	r1, #1
 8005b4a:	438a      	bics	r2, r1
 8005b4c:	609a      	str	r2, [r3, #8]
 8005b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b50:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b54:	f383 8810 	msr	PRIMASK, r3
}
 8005b58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b62:	673b      	str	r3, [r7, #112]	; 0x70
 8005b64:	2301      	movs	r3, #1
 8005b66:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6a:	f383 8810 	msr	PRIMASK, r3
}
 8005b6e:	46c0      	nop			; (mov r8, r8)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2140      	movs	r1, #64	; 0x40
 8005b7c:	438a      	bics	r2, r1
 8005b7e:	609a      	str	r2, [r3, #8]
 8005b80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b82:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b86:	f383 8810 	msr	PRIMASK, r3
}
 8005b8a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2280      	movs	r2, #128	; 0x80
 8005b90:	2120      	movs	r1, #32
 8005b92:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b9e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005baa:	f383 8810 	msr	PRIMASK, r3
}
 8005bae:	46c0      	nop			; (mov r8, r8)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2110      	movs	r1, #16
 8005bbc:	438a      	bics	r2, r1
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bc6:	f383 8810 	msr	PRIMASK, r3
}
 8005bca:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f7fc ff85 	bl	8002ae0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2258      	movs	r2, #88	; 0x58
 8005be0:	5a9a      	ldrh	r2, [r3, r2]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	215a      	movs	r1, #90	; 0x5a
 8005be6:	5a5b      	ldrh	r3, [r3, r1]
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	0011      	movs	r1, r2
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	f000 f8e0 	bl	8005db8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bf8:	e0c2      	b.n	8005d80 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2258      	movs	r2, #88	; 0x58
 8005bfe:	5a99      	ldrh	r1, [r3, r2]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	225a      	movs	r2, #90	; 0x5a
 8005c04:	5a9b      	ldrh	r3, [r3, r2]
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	208e      	movs	r0, #142	; 0x8e
 8005c0a:	183b      	adds	r3, r7, r0
 8005c0c:	1a8a      	subs	r2, r1, r2
 8005c0e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	225a      	movs	r2, #90	; 0x5a
 8005c14:	5a9b      	ldrh	r3, [r3, r2]
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d100      	bne.n	8005c1e <HAL_UART_IRQHandler+0x446>
 8005c1c:	e0b2      	b.n	8005d84 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8005c1e:	183b      	adds	r3, r7, r0
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d100      	bne.n	8005c28 <HAL_UART_IRQHandler+0x450>
 8005c26:	e0ad      	b.n	8005d84 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c28:	f3ef 8310 	mrs	r3, PRIMASK
 8005c2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c30:	2488      	movs	r4, #136	; 0x88
 8005c32:	193a      	adds	r2, r7, r4
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	2301      	movs	r3, #1
 8005c38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f383 8810 	msr	PRIMASK, r3
}
 8005c40:	46c0      	nop			; (mov r8, r8)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4951      	ldr	r1, [pc, #324]	; (8005d94 <HAL_UART_IRQHandler+0x5bc>)
 8005c4e:	400a      	ands	r2, r1
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	193b      	adds	r3, r7, r4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f383 8810 	msr	PRIMASK, r3
}
 8005c5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c60:	f3ef 8310 	mrs	r3, PRIMASK
 8005c64:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c66:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c68:	2484      	movs	r4, #132	; 0x84
 8005c6a:	193a      	adds	r2, r7, r4
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	2301      	movs	r3, #1
 8005c70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	f383 8810 	msr	PRIMASK, r3
}
 8005c78:	46c0      	nop			; (mov r8, r8)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2101      	movs	r1, #1
 8005c86:	438a      	bics	r2, r1
 8005c88:	609a      	str	r2, [r3, #8]
 8005c8a:	193b      	adds	r3, r7, r4
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	f383 8810 	msr	PRIMASK, r3
}
 8005c96:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2280      	movs	r2, #128	; 0x80
 8005c9c:	2120      	movs	r1, #32
 8005c9e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cac:	f3ef 8310 	mrs	r3, PRIMASK
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb4:	2480      	movs	r4, #128	; 0x80
 8005cb6:	193a      	adds	r2, r7, r4
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	2301      	movs	r3, #1
 8005cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	f383 8810 	msr	PRIMASK, r3
}
 8005cc4:	46c0      	nop			; (mov r8, r8)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2110      	movs	r1, #16
 8005cd2:	438a      	bics	r2, r1
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	193b      	adds	r3, r7, r4
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	f383 8810 	msr	PRIMASK, r3
}
 8005ce2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cea:	183b      	adds	r3, r7, r0
 8005cec:	881a      	ldrh	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	0011      	movs	r1, r2
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f000 f860 	bl	8005db8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cf8:	e044      	b.n	8005d84 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005cfa:	23a4      	movs	r3, #164	; 0xa4
 8005cfc:	18fb      	adds	r3, r7, r3
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	2380      	movs	r3, #128	; 0x80
 8005d02:	035b      	lsls	r3, r3, #13
 8005d04:	4013      	ands	r3, r2
 8005d06:	d010      	beq.n	8005d2a <HAL_UART_IRQHandler+0x552>
 8005d08:	239c      	movs	r3, #156	; 0x9c
 8005d0a:	18fb      	adds	r3, r7, r3
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	03db      	lsls	r3, r3, #15
 8005d12:	4013      	ands	r3, r2
 8005d14:	d009      	beq.n	8005d2a <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2280      	movs	r2, #128	; 0x80
 8005d1c:	0352      	lsls	r2, r2, #13
 8005d1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	0018      	movs	r0, r3
 8005d24:	f000 feca 	bl	8006abc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d28:	e02f      	b.n	8005d8a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005d2a:	23a4      	movs	r3, #164	; 0xa4
 8005d2c:	18fb      	adds	r3, r7, r3
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2280      	movs	r2, #128	; 0x80
 8005d32:	4013      	ands	r3, r2
 8005d34:	d00f      	beq.n	8005d56 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005d36:	23a0      	movs	r3, #160	; 0xa0
 8005d38:	18fb      	adds	r3, r7, r3
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2280      	movs	r2, #128	; 0x80
 8005d3e:	4013      	ands	r3, r2
 8005d40:	d009      	beq.n	8005d56 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d01e      	beq.n	8005d88 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	0010      	movs	r0, r2
 8005d52:	4798      	blx	r3
    }
    return;
 8005d54:	e018      	b.n	8005d88 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d56:	23a4      	movs	r3, #164	; 0xa4
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2240      	movs	r2, #64	; 0x40
 8005d5e:	4013      	ands	r3, r2
 8005d60:	d013      	beq.n	8005d8a <HAL_UART_IRQHandler+0x5b2>
 8005d62:	23a0      	movs	r3, #160	; 0xa0
 8005d64:	18fb      	adds	r3, r7, r3
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2240      	movs	r2, #64	; 0x40
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	d00d      	beq.n	8005d8a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	0018      	movs	r0, r3
 8005d72:	f000 fcc0 	bl	80066f6 <UART_EndTransmit_IT>
    return;
 8005d76:	e008      	b.n	8005d8a <HAL_UART_IRQHandler+0x5b2>
      return;
 8005d78:	46c0      	nop			; (mov r8, r8)
 8005d7a:	e006      	b.n	8005d8a <HAL_UART_IRQHandler+0x5b2>
    return;
 8005d7c:	46c0      	nop			; (mov r8, r8)
 8005d7e:	e004      	b.n	8005d8a <HAL_UART_IRQHandler+0x5b2>
      return;
 8005d80:	46c0      	nop			; (mov r8, r8)
 8005d82:	e002      	b.n	8005d8a <HAL_UART_IRQHandler+0x5b2>
      return;
 8005d84:	46c0      	nop			; (mov r8, r8)
 8005d86:	e000      	b.n	8005d8a <HAL_UART_IRQHandler+0x5b2>
    return;
 8005d88:	46c0      	nop			; (mov r8, r8)
  }

}
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	b02b      	add	sp, #172	; 0xac
 8005d8e:	bd90      	pop	{r4, r7, pc}
 8005d90:	fffffeff 	.word	0xfffffeff
 8005d94:	fffffedf 	.word	0xfffffedf

08005d98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005da0:	46c0      	nop			; (mov r8, r8)
 8005da2:	46bd      	mov	sp, r7
 8005da4:	b002      	add	sp, #8
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005db0:	46c0      	nop			; (mov r8, r8)
 8005db2:	46bd      	mov	sp, r7
 8005db4:	b002      	add	sp, #8
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	000a      	movs	r2, r1
 8005dc2:	1cbb      	adds	r3, r7, #2
 8005dc4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	b002      	add	sp, #8
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dd8:	231e      	movs	r3, #30
 8005dda:	18fb      	adds	r3, r7, r3
 8005ddc:	2200      	movs	r2, #0
 8005dde:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	431a      	orrs	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4aaf      	ldr	r2, [pc, #700]	; (80060bc <UART_SetConfig+0x2ec>)
 8005e00:	4013      	ands	r3, r2
 8005e02:	0019      	movs	r1, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	4aaa      	ldr	r2, [pc, #680]	; (80060c0 <UART_SetConfig+0x2f0>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	0019      	movs	r1, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	4aa1      	ldr	r2, [pc, #644]	; (80060c4 <UART_SetConfig+0x2f4>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	0019      	movs	r1, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a9d      	ldr	r2, [pc, #628]	; (80060c8 <UART_SetConfig+0x2f8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d127      	bne.n	8005ea6 <UART_SetConfig+0xd6>
 8005e56:	4b9d      	ldr	r3, [pc, #628]	; (80060cc <UART_SetConfig+0x2fc>)
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	2203      	movs	r2, #3
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d00d      	beq.n	8005e7e <UART_SetConfig+0xae>
 8005e62:	d81b      	bhi.n	8005e9c <UART_SetConfig+0xcc>
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d014      	beq.n	8005e92 <UART_SetConfig+0xc2>
 8005e68:	d818      	bhi.n	8005e9c <UART_SetConfig+0xcc>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <UART_SetConfig+0xa4>
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d00a      	beq.n	8005e88 <UART_SetConfig+0xb8>
 8005e72:	e013      	b.n	8005e9c <UART_SetConfig+0xcc>
 8005e74:	231f      	movs	r3, #31
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	2200      	movs	r2, #0
 8005e7a:	701a      	strb	r2, [r3, #0]
 8005e7c:	e065      	b.n	8005f4a <UART_SetConfig+0x17a>
 8005e7e:	231f      	movs	r3, #31
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	2202      	movs	r2, #2
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	e060      	b.n	8005f4a <UART_SetConfig+0x17a>
 8005e88:	231f      	movs	r3, #31
 8005e8a:	18fb      	adds	r3, r7, r3
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	e05b      	b.n	8005f4a <UART_SetConfig+0x17a>
 8005e92:	231f      	movs	r3, #31
 8005e94:	18fb      	adds	r3, r7, r3
 8005e96:	2208      	movs	r2, #8
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	e056      	b.n	8005f4a <UART_SetConfig+0x17a>
 8005e9c:	231f      	movs	r3, #31
 8005e9e:	18fb      	adds	r3, r7, r3
 8005ea0:	2210      	movs	r2, #16
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	e051      	b.n	8005f4a <UART_SetConfig+0x17a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a89      	ldr	r2, [pc, #548]	; (80060d0 <UART_SetConfig+0x300>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d134      	bne.n	8005f1a <UART_SetConfig+0x14a>
 8005eb0:	4b86      	ldr	r3, [pc, #536]	; (80060cc <UART_SetConfig+0x2fc>)
 8005eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eb4:	23c0      	movs	r3, #192	; 0xc0
 8005eb6:	029b      	lsls	r3, r3, #10
 8005eb8:	4013      	ands	r3, r2
 8005eba:	22c0      	movs	r2, #192	; 0xc0
 8005ebc:	0292      	lsls	r2, r2, #10
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d017      	beq.n	8005ef2 <UART_SetConfig+0x122>
 8005ec2:	22c0      	movs	r2, #192	; 0xc0
 8005ec4:	0292      	lsls	r2, r2, #10
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d822      	bhi.n	8005f10 <UART_SetConfig+0x140>
 8005eca:	2280      	movs	r2, #128	; 0x80
 8005ecc:	0292      	lsls	r2, r2, #10
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d019      	beq.n	8005f06 <UART_SetConfig+0x136>
 8005ed2:	2280      	movs	r2, #128	; 0x80
 8005ed4:	0292      	lsls	r2, r2, #10
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d81a      	bhi.n	8005f10 <UART_SetConfig+0x140>
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d004      	beq.n	8005ee8 <UART_SetConfig+0x118>
 8005ede:	2280      	movs	r2, #128	; 0x80
 8005ee0:	0252      	lsls	r2, r2, #9
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00a      	beq.n	8005efc <UART_SetConfig+0x12c>
 8005ee6:	e013      	b.n	8005f10 <UART_SetConfig+0x140>
 8005ee8:	231f      	movs	r3, #31
 8005eea:	18fb      	adds	r3, r7, r3
 8005eec:	2200      	movs	r2, #0
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	e02b      	b.n	8005f4a <UART_SetConfig+0x17a>
 8005ef2:	231f      	movs	r3, #31
 8005ef4:	18fb      	adds	r3, r7, r3
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	e026      	b.n	8005f4a <UART_SetConfig+0x17a>
 8005efc:	231f      	movs	r3, #31
 8005efe:	18fb      	adds	r3, r7, r3
 8005f00:	2204      	movs	r2, #4
 8005f02:	701a      	strb	r2, [r3, #0]
 8005f04:	e021      	b.n	8005f4a <UART_SetConfig+0x17a>
 8005f06:	231f      	movs	r3, #31
 8005f08:	18fb      	adds	r3, r7, r3
 8005f0a:	2208      	movs	r2, #8
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	e01c      	b.n	8005f4a <UART_SetConfig+0x17a>
 8005f10:	231f      	movs	r3, #31
 8005f12:	18fb      	adds	r3, r7, r3
 8005f14:	2210      	movs	r2, #16
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	e017      	b.n	8005f4a <UART_SetConfig+0x17a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a6d      	ldr	r2, [pc, #436]	; (80060d4 <UART_SetConfig+0x304>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d104      	bne.n	8005f2e <UART_SetConfig+0x15e>
 8005f24:	231f      	movs	r3, #31
 8005f26:	18fb      	adds	r3, r7, r3
 8005f28:	2200      	movs	r2, #0
 8005f2a:	701a      	strb	r2, [r3, #0]
 8005f2c:	e00d      	b.n	8005f4a <UART_SetConfig+0x17a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a69      	ldr	r2, [pc, #420]	; (80060d8 <UART_SetConfig+0x308>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d104      	bne.n	8005f42 <UART_SetConfig+0x172>
 8005f38:	231f      	movs	r3, #31
 8005f3a:	18fb      	adds	r3, r7, r3
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	e003      	b.n	8005f4a <UART_SetConfig+0x17a>
 8005f42:	231f      	movs	r3, #31
 8005f44:	18fb      	adds	r3, r7, r3
 8005f46:	2210      	movs	r2, #16
 8005f48:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	69da      	ldr	r2, [r3, #28]
 8005f4e:	2380      	movs	r3, #128	; 0x80
 8005f50:	021b      	lsls	r3, r3, #8
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d15c      	bne.n	8006010 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8005f56:	231f      	movs	r3, #31
 8005f58:	18fb      	adds	r3, r7, r3
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d015      	beq.n	8005f8c <UART_SetConfig+0x1bc>
 8005f60:	dc18      	bgt.n	8005f94 <UART_SetConfig+0x1c4>
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	d00d      	beq.n	8005f82 <UART_SetConfig+0x1b2>
 8005f66:	dc15      	bgt.n	8005f94 <UART_SetConfig+0x1c4>
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <UART_SetConfig+0x1a2>
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d005      	beq.n	8005f7c <UART_SetConfig+0x1ac>
 8005f70:	e010      	b.n	8005f94 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f72:	f7fe fa7b 	bl	800446c <HAL_RCC_GetPCLK1Freq>
 8005f76:	0003      	movs	r3, r0
 8005f78:	61bb      	str	r3, [r7, #24]
        break;
 8005f7a:	e012      	b.n	8005fa2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f7c:	4b57      	ldr	r3, [pc, #348]	; (80060dc <UART_SetConfig+0x30c>)
 8005f7e:	61bb      	str	r3, [r7, #24]
        break;
 8005f80:	e00f      	b.n	8005fa2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f82:	f7fe f9f7 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 8005f86:	0003      	movs	r3, r0
 8005f88:	61bb      	str	r3, [r7, #24]
        break;
 8005f8a:	e00a      	b.n	8005fa2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	021b      	lsls	r3, r3, #8
 8005f90:	61bb      	str	r3, [r7, #24]
        break;
 8005f92:	e006      	b.n	8005fa2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f98:	231e      	movs	r3, #30
 8005f9a:	18fb      	adds	r3, r7, r3
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	701a      	strb	r2, [r3, #0]
        break;
 8005fa0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d100      	bne.n	8005faa <UART_SetConfig+0x1da>
 8005fa8:	e07a      	b.n	80060a0 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	005a      	lsls	r2, r3, #1
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	085b      	lsrs	r3, r3, #1
 8005fb4:	18d2      	adds	r2, r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	0019      	movs	r1, r3
 8005fbc:	0010      	movs	r0, r2
 8005fbe:	f7fa f8bf 	bl	8000140 <__udivsi3>
 8005fc2:	0003      	movs	r3, r0
 8005fc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	2b0f      	cmp	r3, #15
 8005fca:	d91c      	bls.n	8006006 <UART_SetConfig+0x236>
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	2380      	movs	r3, #128	; 0x80
 8005fd0:	025b      	lsls	r3, r3, #9
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d217      	bcs.n	8006006 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	200e      	movs	r0, #14
 8005fdc:	183b      	adds	r3, r7, r0
 8005fde:	210f      	movs	r1, #15
 8005fe0:	438a      	bics	r2, r1
 8005fe2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	085b      	lsrs	r3, r3, #1
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2207      	movs	r2, #7
 8005fec:	4013      	ands	r3, r2
 8005fee:	b299      	uxth	r1, r3
 8005ff0:	183b      	adds	r3, r7, r0
 8005ff2:	183a      	adds	r2, r7, r0
 8005ff4:	8812      	ldrh	r2, [r2, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	183a      	adds	r2, r7, r0
 8006000:	8812      	ldrh	r2, [r2, #0]
 8006002:	60da      	str	r2, [r3, #12]
 8006004:	e04c      	b.n	80060a0 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8006006:	231e      	movs	r3, #30
 8006008:	18fb      	adds	r3, r7, r3
 800600a:	2201      	movs	r2, #1
 800600c:	701a      	strb	r2, [r3, #0]
 800600e:	e047      	b.n	80060a0 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006010:	231f      	movs	r3, #31
 8006012:	18fb      	adds	r3, r7, r3
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b08      	cmp	r3, #8
 8006018:	d015      	beq.n	8006046 <UART_SetConfig+0x276>
 800601a:	dc18      	bgt.n	800604e <UART_SetConfig+0x27e>
 800601c:	2b04      	cmp	r3, #4
 800601e:	d00d      	beq.n	800603c <UART_SetConfig+0x26c>
 8006020:	dc15      	bgt.n	800604e <UART_SetConfig+0x27e>
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <UART_SetConfig+0x25c>
 8006026:	2b02      	cmp	r3, #2
 8006028:	d005      	beq.n	8006036 <UART_SetConfig+0x266>
 800602a:	e010      	b.n	800604e <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800602c:	f7fe fa1e 	bl	800446c <HAL_RCC_GetPCLK1Freq>
 8006030:	0003      	movs	r3, r0
 8006032:	61bb      	str	r3, [r7, #24]
        break;
 8006034:	e012      	b.n	800605c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006036:	4b29      	ldr	r3, [pc, #164]	; (80060dc <UART_SetConfig+0x30c>)
 8006038:	61bb      	str	r3, [r7, #24]
        break;
 800603a:	e00f      	b.n	800605c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800603c:	f7fe f99a 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 8006040:	0003      	movs	r3, r0
 8006042:	61bb      	str	r3, [r7, #24]
        break;
 8006044:	e00a      	b.n	800605c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006046:	2380      	movs	r3, #128	; 0x80
 8006048:	021b      	lsls	r3, r3, #8
 800604a:	61bb      	str	r3, [r7, #24]
        break;
 800604c:	e006      	b.n	800605c <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006052:	231e      	movs	r3, #30
 8006054:	18fb      	adds	r3, r7, r3
 8006056:	2201      	movs	r2, #1
 8006058:	701a      	strb	r2, [r3, #0]
        break;
 800605a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d01e      	beq.n	80060a0 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	085a      	lsrs	r2, r3, #1
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	18d2      	adds	r2, r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	0019      	movs	r1, r3
 8006072:	0010      	movs	r0, r2
 8006074:	f7fa f864 	bl	8000140 <__udivsi3>
 8006078:	0003      	movs	r3, r0
 800607a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2b0f      	cmp	r3, #15
 8006080:	d90a      	bls.n	8006098 <UART_SetConfig+0x2c8>
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	2380      	movs	r3, #128	; 0x80
 8006086:	025b      	lsls	r3, r3, #9
 8006088:	429a      	cmp	r2, r3
 800608a:	d205      	bcs.n	8006098 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	b29a      	uxth	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	60da      	str	r2, [r3, #12]
 8006096:	e003      	b.n	80060a0 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8006098:	231e      	movs	r3, #30
 800609a:	18fb      	adds	r3, r7, r3
 800609c:	2201      	movs	r2, #1
 800609e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80060ac:	231e      	movs	r3, #30
 80060ae:	18fb      	adds	r3, r7, r3
 80060b0:	781b      	ldrb	r3, [r3, #0]
}
 80060b2:	0018      	movs	r0, r3
 80060b4:	46bd      	mov	sp, r7
 80060b6:	b008      	add	sp, #32
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	46c0      	nop			; (mov r8, r8)
 80060bc:	efff69f3 	.word	0xefff69f3
 80060c0:	ffffcfff 	.word	0xffffcfff
 80060c4:	fffff4ff 	.word	0xfffff4ff
 80060c8:	40013800 	.word	0x40013800
 80060cc:	40021000 	.word	0x40021000
 80060d0:	40004400 	.word	0x40004400
 80060d4:	40004800 	.word	0x40004800
 80060d8:	40004c00 	.word	0x40004c00
 80060dc:	007a1200 	.word	0x007a1200

080060e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	2201      	movs	r2, #1
 80060ee:	4013      	ands	r3, r2
 80060f0:	d00b      	beq.n	800610a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	4a4a      	ldr	r2, [pc, #296]	; (8006224 <UART_AdvFeatureConfig+0x144>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	0019      	movs	r1, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	2202      	movs	r2, #2
 8006110:	4013      	ands	r3, r2
 8006112:	d00b      	beq.n	800612c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	4a43      	ldr	r2, [pc, #268]	; (8006228 <UART_AdvFeatureConfig+0x148>)
 800611c:	4013      	ands	r3, r2
 800611e:	0019      	movs	r1, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	2204      	movs	r2, #4
 8006132:	4013      	ands	r3, r2
 8006134:	d00b      	beq.n	800614e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	4a3b      	ldr	r2, [pc, #236]	; (800622c <UART_AdvFeatureConfig+0x14c>)
 800613e:	4013      	ands	r3, r2
 8006140:	0019      	movs	r1, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	2208      	movs	r2, #8
 8006154:	4013      	ands	r3, r2
 8006156:	d00b      	beq.n	8006170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	4a34      	ldr	r2, [pc, #208]	; (8006230 <UART_AdvFeatureConfig+0x150>)
 8006160:	4013      	ands	r3, r2
 8006162:	0019      	movs	r1, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	2210      	movs	r2, #16
 8006176:	4013      	ands	r3, r2
 8006178:	d00b      	beq.n	8006192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	4a2c      	ldr	r2, [pc, #176]	; (8006234 <UART_AdvFeatureConfig+0x154>)
 8006182:	4013      	ands	r3, r2
 8006184:	0019      	movs	r1, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	2220      	movs	r2, #32
 8006198:	4013      	ands	r3, r2
 800619a:	d00b      	beq.n	80061b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	4a25      	ldr	r2, [pc, #148]	; (8006238 <UART_AdvFeatureConfig+0x158>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	0019      	movs	r1, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	2240      	movs	r2, #64	; 0x40
 80061ba:	4013      	ands	r3, r2
 80061bc:	d01d      	beq.n	80061fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	4a1d      	ldr	r2, [pc, #116]	; (800623c <UART_AdvFeatureConfig+0x15c>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	0019      	movs	r1, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061da:	2380      	movs	r3, #128	; 0x80
 80061dc:	035b      	lsls	r3, r3, #13
 80061de:	429a      	cmp	r2, r3
 80061e0:	d10b      	bne.n	80061fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	4a15      	ldr	r2, [pc, #84]	; (8006240 <UART_AdvFeatureConfig+0x160>)
 80061ea:	4013      	ands	r3, r2
 80061ec:	0019      	movs	r1, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	2280      	movs	r2, #128	; 0x80
 8006200:	4013      	ands	r3, r2
 8006202:	d00b      	beq.n	800621c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	4a0e      	ldr	r2, [pc, #56]	; (8006244 <UART_AdvFeatureConfig+0x164>)
 800620c:	4013      	ands	r3, r2
 800620e:	0019      	movs	r1, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	430a      	orrs	r2, r1
 800621a:	605a      	str	r2, [r3, #4]
  }
}
 800621c:	46c0      	nop			; (mov r8, r8)
 800621e:	46bd      	mov	sp, r7
 8006220:	b002      	add	sp, #8
 8006222:	bd80      	pop	{r7, pc}
 8006224:	fffdffff 	.word	0xfffdffff
 8006228:	fffeffff 	.word	0xfffeffff
 800622c:	fffbffff 	.word	0xfffbffff
 8006230:	ffff7fff 	.word	0xffff7fff
 8006234:	ffffefff 	.word	0xffffefff
 8006238:	ffffdfff 	.word	0xffffdfff
 800623c:	ffefffff 	.word	0xffefffff
 8006240:	ff9fffff 	.word	0xff9fffff
 8006244:	fff7ffff 	.word	0xfff7ffff

08006248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b092      	sub	sp, #72	; 0x48
 800624c:	af02      	add	r7, sp, #8
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2284      	movs	r2, #132	; 0x84
 8006254:	2100      	movs	r1, #0
 8006256:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006258:	f7fc fb36 	bl	80028c8 <HAL_GetTick>
 800625c:	0003      	movs	r3, r0
 800625e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2208      	movs	r2, #8
 8006268:	4013      	ands	r3, r2
 800626a:	2b08      	cmp	r3, #8
 800626c:	d12c      	bne.n	80062c8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800626e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006270:	2280      	movs	r2, #128	; 0x80
 8006272:	0391      	lsls	r1, r2, #14
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	4a46      	ldr	r2, [pc, #280]	; (8006390 <UART_CheckIdleState+0x148>)
 8006278:	9200      	str	r2, [sp, #0]
 800627a:	2200      	movs	r2, #0
 800627c:	f000 f88c 	bl	8006398 <UART_WaitOnFlagUntilTimeout>
 8006280:	1e03      	subs	r3, r0, #0
 8006282:	d021      	beq.n	80062c8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006284:	f3ef 8310 	mrs	r3, PRIMASK
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800628c:	63bb      	str	r3, [r7, #56]	; 0x38
 800628e:	2301      	movs	r3, #1
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	f383 8810 	msr	PRIMASK, r3
}
 8006298:	46c0      	nop			; (mov r8, r8)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2180      	movs	r1, #128	; 0x80
 80062a6:	438a      	bics	r2, r1
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b0:	f383 8810 	msr	PRIMASK, r3
}
 80062b4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2220      	movs	r2, #32
 80062ba:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2278      	movs	r2, #120	; 0x78
 80062c0:	2100      	movs	r1, #0
 80062c2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e05f      	b.n	8006388 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2204      	movs	r2, #4
 80062d0:	4013      	ands	r3, r2
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	d146      	bne.n	8006364 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d8:	2280      	movs	r2, #128	; 0x80
 80062da:	03d1      	lsls	r1, r2, #15
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	4a2c      	ldr	r2, [pc, #176]	; (8006390 <UART_CheckIdleState+0x148>)
 80062e0:	9200      	str	r2, [sp, #0]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f000 f858 	bl	8006398 <UART_WaitOnFlagUntilTimeout>
 80062e8:	1e03      	subs	r3, r0, #0
 80062ea:	d03b      	beq.n	8006364 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ec:	f3ef 8310 	mrs	r3, PRIMASK
 80062f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80062f2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062f4:	637b      	str	r3, [r7, #52]	; 0x34
 80062f6:	2301      	movs	r3, #1
 80062f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f383 8810 	msr	PRIMASK, r3
}
 8006300:	46c0      	nop			; (mov r8, r8)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4921      	ldr	r1, [pc, #132]	; (8006394 <UART_CheckIdleState+0x14c>)
 800630e:	400a      	ands	r2, r1
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006314:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f383 8810 	msr	PRIMASK, r3
}
 800631c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800631e:	f3ef 8310 	mrs	r3, PRIMASK
 8006322:	61bb      	str	r3, [r7, #24]
  return(result);
 8006324:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006326:	633b      	str	r3, [r7, #48]	; 0x30
 8006328:	2301      	movs	r3, #1
 800632a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f383 8810 	msr	PRIMASK, r3
}
 8006332:	46c0      	nop			; (mov r8, r8)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2101      	movs	r1, #1
 8006340:	438a      	bics	r2, r1
 8006342:	609a      	str	r2, [r3, #8]
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	f383 8810 	msr	PRIMASK, r3
}
 800634e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2280      	movs	r2, #128	; 0x80
 8006354:	2120      	movs	r1, #32
 8006356:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2278      	movs	r2, #120	; 0x78
 800635c:	2100      	movs	r1, #0
 800635e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e011      	b.n	8006388 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2220      	movs	r2, #32
 8006368:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2280      	movs	r2, #128	; 0x80
 800636e:	2120      	movs	r1, #32
 8006370:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2278      	movs	r2, #120	; 0x78
 8006382:	2100      	movs	r1, #0
 8006384:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	0018      	movs	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	b010      	add	sp, #64	; 0x40
 800638e:	bd80      	pop	{r7, pc}
 8006390:	01ffffff 	.word	0x01ffffff
 8006394:	fffffedf 	.word	0xfffffedf

08006398 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	603b      	str	r3, [r7, #0]
 80063a4:	1dfb      	adds	r3, r7, #7
 80063a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a8:	e04b      	b.n	8006442 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	3301      	adds	r3, #1
 80063ae:	d048      	beq.n	8006442 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b0:	f7fc fa8a 	bl	80028c8 <HAL_GetTick>
 80063b4:	0002      	movs	r2, r0
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d302      	bcc.n	80063c6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e04b      	b.n	8006462 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2204      	movs	r2, #4
 80063d2:	4013      	ands	r3, r2
 80063d4:	d035      	beq.n	8006442 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	2208      	movs	r2, #8
 80063de:	4013      	ands	r3, r2
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d111      	bne.n	8006408 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2208      	movs	r2, #8
 80063ea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	0018      	movs	r0, r3
 80063f0:	f000 f906 	bl	8006600 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2284      	movs	r2, #132	; 0x84
 80063f8:	2108      	movs	r1, #8
 80063fa:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2278      	movs	r2, #120	; 0x78
 8006400:	2100      	movs	r1, #0
 8006402:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e02c      	b.n	8006462 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	69da      	ldr	r2, [r3, #28]
 800640e:	2380      	movs	r3, #128	; 0x80
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	401a      	ands	r2, r3
 8006414:	2380      	movs	r3, #128	; 0x80
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	429a      	cmp	r2, r3
 800641a:	d112      	bne.n	8006442 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2280      	movs	r2, #128	; 0x80
 8006422:	0112      	lsls	r2, r2, #4
 8006424:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	0018      	movs	r0, r3
 800642a:	f000 f8e9 	bl	8006600 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2284      	movs	r2, #132	; 0x84
 8006432:	2120      	movs	r1, #32
 8006434:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2278      	movs	r2, #120	; 0x78
 800643a:	2100      	movs	r1, #0
 800643c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e00f      	b.n	8006462 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	4013      	ands	r3, r2
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	425a      	negs	r2, r3
 8006452:	4153      	adcs	r3, r2
 8006454:	b2db      	uxtb	r3, r3
 8006456:	001a      	movs	r2, r3
 8006458:	1dfb      	adds	r3, r7, #7
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d0a4      	beq.n	80063aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	0018      	movs	r0, r3
 8006464:	46bd      	mov	sp, r7
 8006466:	b004      	add	sp, #16
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b090      	sub	sp, #64	; 0x40
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	1dbb      	adds	r3, r7, #6
 8006478:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	1dba      	adds	r2, r7, #6
 8006484:	2158      	movs	r1, #88	; 0x58
 8006486:	8812      	ldrh	r2, [r2, #0]
 8006488:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1dba      	adds	r2, r7, #6
 800648e:	215a      	movs	r1, #90	; 0x5a
 8006490:	8812      	ldrh	r2, [r2, #0]
 8006492:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	2380      	movs	r3, #128	; 0x80
 80064a0:	015b      	lsls	r3, r3, #5
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d10d      	bne.n	80064c2 <UART_Start_Receive_IT+0x56>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d104      	bne.n	80064b8 <UART_Start_Receive_IT+0x4c>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	225c      	movs	r2, #92	; 0x5c
 80064b2:	4950      	ldr	r1, [pc, #320]	; (80065f4 <UART_Start_Receive_IT+0x188>)
 80064b4:	5299      	strh	r1, [r3, r2]
 80064b6:	e02e      	b.n	8006516 <UART_Start_Receive_IT+0xaa>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	225c      	movs	r2, #92	; 0x5c
 80064bc:	21ff      	movs	r1, #255	; 0xff
 80064be:	5299      	strh	r1, [r3, r2]
 80064c0:	e029      	b.n	8006516 <UART_Start_Receive_IT+0xaa>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10d      	bne.n	80064e6 <UART_Start_Receive_IT+0x7a>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d104      	bne.n	80064dc <UART_Start_Receive_IT+0x70>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	225c      	movs	r2, #92	; 0x5c
 80064d6:	21ff      	movs	r1, #255	; 0xff
 80064d8:	5299      	strh	r1, [r3, r2]
 80064da:	e01c      	b.n	8006516 <UART_Start_Receive_IT+0xaa>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	225c      	movs	r2, #92	; 0x5c
 80064e0:	217f      	movs	r1, #127	; 0x7f
 80064e2:	5299      	strh	r1, [r3, r2]
 80064e4:	e017      	b.n	8006516 <UART_Start_Receive_IT+0xaa>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	689a      	ldr	r2, [r3, #8]
 80064ea:	2380      	movs	r3, #128	; 0x80
 80064ec:	055b      	lsls	r3, r3, #21
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d10d      	bne.n	800650e <UART_Start_Receive_IT+0xa2>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d104      	bne.n	8006504 <UART_Start_Receive_IT+0x98>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	225c      	movs	r2, #92	; 0x5c
 80064fe:	217f      	movs	r1, #127	; 0x7f
 8006500:	5299      	strh	r1, [r3, r2]
 8006502:	e008      	b.n	8006516 <UART_Start_Receive_IT+0xaa>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	225c      	movs	r2, #92	; 0x5c
 8006508:	213f      	movs	r1, #63	; 0x3f
 800650a:	5299      	strh	r1, [r3, r2]
 800650c:	e003      	b.n	8006516 <UART_Start_Receive_IT+0xaa>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	225c      	movs	r2, #92	; 0x5c
 8006512:	2100      	movs	r1, #0
 8006514:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2284      	movs	r2, #132	; 0x84
 800651a:	2100      	movs	r1, #0
 800651c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2280      	movs	r2, #128	; 0x80
 8006522:	2122      	movs	r1, #34	; 0x22
 8006524:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006526:	f3ef 8310 	mrs	r3, PRIMASK
 800652a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006530:	2301      	movs	r3, #1
 8006532:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	f383 8810 	msr	PRIMASK, r3
}
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2101      	movs	r1, #1
 8006548:	430a      	orrs	r2, r1
 800654a:	609a      	str	r2, [r3, #8]
 800654c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	f383 8810 	msr	PRIMASK, r3
}
 8006556:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	2380      	movs	r3, #128	; 0x80
 800655e:	015b      	lsls	r3, r3, #5
 8006560:	429a      	cmp	r2, r3
 8006562:	d107      	bne.n	8006574 <UART_Start_Receive_IT+0x108>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d103      	bne.n	8006574 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4a22      	ldr	r2, [pc, #136]	; (80065f8 <UART_Start_Receive_IT+0x18c>)
 8006570:	669a      	str	r2, [r3, #104]	; 0x68
 8006572:	e002      	b.n	800657a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4a21      	ldr	r2, [pc, #132]	; (80065fc <UART_Start_Receive_IT+0x190>)
 8006578:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d019      	beq.n	80065b6 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006582:	f3ef 8310 	mrs	r3, PRIMASK
 8006586:	61fb      	str	r3, [r7, #28]
  return(result);
 8006588:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800658a:	637b      	str	r3, [r7, #52]	; 0x34
 800658c:	2301      	movs	r3, #1
 800658e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	f383 8810 	msr	PRIMASK, r3
}
 8006596:	46c0      	nop			; (mov r8, r8)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2190      	movs	r1, #144	; 0x90
 80065a4:	0049      	lsls	r1, r1, #1
 80065a6:	430a      	orrs	r2, r1
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	f383 8810 	msr	PRIMASK, r3
}
 80065b4:	e018      	b.n	80065e8 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065b6:	f3ef 8310 	mrs	r3, PRIMASK
 80065ba:	613b      	str	r3, [r7, #16]
  return(result);
 80065bc:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80065be:	63bb      	str	r3, [r7, #56]	; 0x38
 80065c0:	2301      	movs	r3, #1
 80065c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f383 8810 	msr	PRIMASK, r3
}
 80065ca:	46c0      	nop			; (mov r8, r8)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2120      	movs	r1, #32
 80065d8:	430a      	orrs	r2, r1
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	f383 8810 	msr	PRIMASK, r3
}
 80065e6:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	0018      	movs	r0, r3
 80065ec:	46bd      	mov	sp, r7
 80065ee:	b010      	add	sp, #64	; 0x40
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	46c0      	nop			; (mov r8, r8)
 80065f4:	000001ff 	.word	0x000001ff
 80065f8:	08006905 	.word	0x08006905
 80065fc:	0800674d 	.word	0x0800674d

08006600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08e      	sub	sp, #56	; 0x38
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006608:	f3ef 8310 	mrs	r3, PRIMASK
 800660c:	617b      	str	r3, [r7, #20]
  return(result);
 800660e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006610:	637b      	str	r3, [r7, #52]	; 0x34
 8006612:	2301      	movs	r3, #1
 8006614:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	f383 8810 	msr	PRIMASK, r3
}
 800661c:	46c0      	nop			; (mov r8, r8)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4926      	ldr	r1, [pc, #152]	; (80066c4 <UART_EndRxTransfer+0xc4>)
 800662a:	400a      	ands	r2, r1
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006630:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	f383 8810 	msr	PRIMASK, r3
}
 8006638:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800663a:	f3ef 8310 	mrs	r3, PRIMASK
 800663e:	623b      	str	r3, [r7, #32]
  return(result);
 8006640:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006642:	633b      	str	r3, [r7, #48]	; 0x30
 8006644:	2301      	movs	r3, #1
 8006646:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	f383 8810 	msr	PRIMASK, r3
}
 800664e:	46c0      	nop			; (mov r8, r8)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2101      	movs	r1, #1
 800665c:	438a      	bics	r2, r1
 800665e:	609a      	str	r2, [r3, #8]
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006666:	f383 8810 	msr	PRIMASK, r3
}
 800666a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006670:	2b01      	cmp	r3, #1
 8006672:	d118      	bne.n	80066a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006674:	f3ef 8310 	mrs	r3, PRIMASK
 8006678:	60bb      	str	r3, [r7, #8]
  return(result);
 800667a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800667e:	2301      	movs	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f383 8810 	msr	PRIMASK, r3
}
 8006688:	46c0      	nop			; (mov r8, r8)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2110      	movs	r1, #16
 8006696:	438a      	bics	r2, r1
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f383 8810 	msr	PRIMASK, r3
}
 80066a4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2280      	movs	r2, #128	; 0x80
 80066aa:	2120      	movs	r1, #32
 80066ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	46bd      	mov	sp, r7
 80066be:	b00e      	add	sp, #56	; 0x38
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	46c0      	nop			; (mov r8, r8)
 80066c4:	fffffedf 	.word	0xfffffedf

080066c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	225a      	movs	r2, #90	; 0x5a
 80066da:	2100      	movs	r1, #0
 80066dc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2252      	movs	r2, #82	; 0x52
 80066e2:	2100      	movs	r1, #0
 80066e4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	0018      	movs	r0, r3
 80066ea:	f7ff fb5d 	bl	8005da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	46bd      	mov	sp, r7
 80066f2:	b004      	add	sp, #16
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b086      	sub	sp, #24
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006702:	60bb      	str	r3, [r7, #8]
  return(result);
 8006704:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	2301      	movs	r3, #1
 800670a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f383 8810 	msr	PRIMASK, r3
}
 8006712:	46c0      	nop			; (mov r8, r8)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2140      	movs	r1, #64	; 0x40
 8006720:	438a      	bics	r2, r1
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f383 8810 	msr	PRIMASK, r3
}
 800672e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2220      	movs	r2, #32
 8006734:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	0018      	movs	r0, r3
 8006740:	f7ff fb2a 	bl	8005d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006744:	46c0      	nop			; (mov r8, r8)
 8006746:	46bd      	mov	sp, r7
 8006748:	b006      	add	sp, #24
 800674a:	bd80      	pop	{r7, pc}

0800674c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b094      	sub	sp, #80	; 0x50
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006754:	204e      	movs	r0, #78	; 0x4e
 8006756:	183b      	adds	r3, r7, r0
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	215c      	movs	r1, #92	; 0x5c
 800675c:	5a52      	ldrh	r2, [r2, r1]
 800675e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2280      	movs	r2, #128	; 0x80
 8006764:	589b      	ldr	r3, [r3, r2]
 8006766:	2b22      	cmp	r3, #34	; 0x22
 8006768:	d000      	beq.n	800676c <UART_RxISR_8BIT+0x20>
 800676a:	e0ba      	b.n	80068e2 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	214c      	movs	r1, #76	; 0x4c
 8006772:	187b      	adds	r3, r7, r1
 8006774:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006776:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006778:	187b      	adds	r3, r7, r1
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	b2da      	uxtb	r2, r3
 800677e:	183b      	adds	r3, r7, r0
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	b2d9      	uxtb	r1, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006788:	400a      	ands	r2, r1
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	225a      	movs	r2, #90	; 0x5a
 800679c:	5a9b      	ldrh	r3, [r3, r2]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b299      	uxth	r1, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	225a      	movs	r2, #90	; 0x5a
 80067a8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	225a      	movs	r2, #90	; 0x5a
 80067ae:	5a9b      	ldrh	r3, [r3, r2]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d000      	beq.n	80067b8 <UART_RxISR_8BIT+0x6c>
 80067b6:	e09c      	b.n	80068f2 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067b8:	f3ef 8310 	mrs	r3, PRIMASK
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80067c2:	2301      	movs	r3, #1
 80067c4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c8:	f383 8810 	msr	PRIMASK, r3
}
 80067cc:	46c0      	nop			; (mov r8, r8)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4948      	ldr	r1, [pc, #288]	; (80068fc <UART_RxISR_8BIT+0x1b0>)
 80067da:	400a      	ands	r2, r1
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e4:	f383 8810 	msr	PRIMASK, r3
}
 80067e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ea:	f3ef 8310 	mrs	r3, PRIMASK
 80067ee:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f2:	647b      	str	r3, [r7, #68]	; 0x44
 80067f4:	2301      	movs	r3, #1
 80067f6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fa:	f383 8810 	msr	PRIMASK, r3
}
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2101      	movs	r1, #1
 800680c:	438a      	bics	r2, r1
 800680e:	609a      	str	r2, [r3, #8]
 8006810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006812:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006816:	f383 8810 	msr	PRIMASK, r3
}
 800681a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2280      	movs	r2, #128	; 0x80
 8006820:	2120      	movs	r1, #32
 8006822:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	2380      	movs	r3, #128	; 0x80
 8006838:	041b      	lsls	r3, r3, #16
 800683a:	4013      	ands	r3, r2
 800683c:	d018      	beq.n	8006870 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800683e:	f3ef 8310 	mrs	r3, PRIMASK
 8006842:	61bb      	str	r3, [r7, #24]
  return(result);
 8006844:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006846:	643b      	str	r3, [r7, #64]	; 0x40
 8006848:	2301      	movs	r3, #1
 800684a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	f383 8810 	msr	PRIMASK, r3
}
 8006852:	46c0      	nop			; (mov r8, r8)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4928      	ldr	r1, [pc, #160]	; (8006900 <UART_RxISR_8BIT+0x1b4>)
 8006860:	400a      	ands	r2, r1
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006866:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	f383 8810 	msr	PRIMASK, r3
}
 800686e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006874:	2b01      	cmp	r3, #1
 8006876:	d12f      	bne.n	80068d8 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800687e:	f3ef 8310 	mrs	r3, PRIMASK
 8006882:	60fb      	str	r3, [r7, #12]
  return(result);
 8006884:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006888:	2301      	movs	r3, #1
 800688a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	f383 8810 	msr	PRIMASK, r3
}
 8006892:	46c0      	nop			; (mov r8, r8)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2110      	movs	r1, #16
 80068a0:	438a      	bics	r2, r1
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f383 8810 	msr	PRIMASK, r3
}
 80068ae:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	2210      	movs	r2, #16
 80068b8:	4013      	ands	r3, r2
 80068ba:	2b10      	cmp	r3, #16
 80068bc:	d103      	bne.n	80068c6 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2210      	movs	r2, #16
 80068c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2258      	movs	r2, #88	; 0x58
 80068ca:	5a9a      	ldrh	r2, [r3, r2]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	0011      	movs	r1, r2
 80068d0:	0018      	movs	r0, r3
 80068d2:	f7ff fa71 	bl	8005db8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068d6:	e00c      	b.n	80068f2 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	0018      	movs	r0, r3
 80068dc:	f7fb fd46 	bl	800236c <HAL_UART_RxCpltCallback>
}
 80068e0:	e007      	b.n	80068f2 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	699a      	ldr	r2, [r3, #24]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2108      	movs	r1, #8
 80068ee:	430a      	orrs	r2, r1
 80068f0:	619a      	str	r2, [r3, #24]
}
 80068f2:	46c0      	nop			; (mov r8, r8)
 80068f4:	46bd      	mov	sp, r7
 80068f6:	b014      	add	sp, #80	; 0x50
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	46c0      	nop			; (mov r8, r8)
 80068fc:	fffffedf 	.word	0xfffffedf
 8006900:	fbffffff 	.word	0xfbffffff

08006904 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b094      	sub	sp, #80	; 0x50
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800690c:	204e      	movs	r0, #78	; 0x4e
 800690e:	183b      	adds	r3, r7, r0
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	215c      	movs	r1, #92	; 0x5c
 8006914:	5a52      	ldrh	r2, [r2, r1]
 8006916:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2280      	movs	r2, #128	; 0x80
 800691c:	589b      	ldr	r3, [r3, r2]
 800691e:	2b22      	cmp	r3, #34	; 0x22
 8006920:	d000      	beq.n	8006924 <UART_RxISR_16BIT+0x20>
 8006922:	e0ba      	b.n	8006a9a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	214c      	movs	r1, #76	; 0x4c
 800692a:	187b      	adds	r3, r7, r1
 800692c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800692e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006934:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8006936:	187b      	adds	r3, r7, r1
 8006938:	183a      	adds	r2, r7, r0
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	8812      	ldrh	r2, [r2, #0]
 800693e:	4013      	ands	r3, r2
 8006940:	b29a      	uxth	r2, r3
 8006942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006944:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694a:	1c9a      	adds	r2, r3, #2
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	225a      	movs	r2, #90	; 0x5a
 8006954:	5a9b      	ldrh	r3, [r3, r2]
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b01      	subs	r3, #1
 800695a:	b299      	uxth	r1, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	225a      	movs	r2, #90	; 0x5a
 8006960:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	225a      	movs	r2, #90	; 0x5a
 8006966:	5a9b      	ldrh	r3, [r3, r2]
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d000      	beq.n	8006970 <UART_RxISR_16BIT+0x6c>
 800696e:	e09c      	b.n	8006aaa <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006970:	f3ef 8310 	mrs	r3, PRIMASK
 8006974:	623b      	str	r3, [r7, #32]
  return(result);
 8006976:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006978:	647b      	str	r3, [r7, #68]	; 0x44
 800697a:	2301      	movs	r3, #1
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	f383 8810 	msr	PRIMASK, r3
}
 8006984:	46c0      	nop			; (mov r8, r8)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4948      	ldr	r1, [pc, #288]	; (8006ab4 <UART_RxISR_16BIT+0x1b0>)
 8006992:	400a      	ands	r2, r1
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006998:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	f383 8810 	msr	PRIMASK, r3
}
 80069a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069a2:	f3ef 8310 	mrs	r3, PRIMASK
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80069a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069aa:	643b      	str	r3, [r7, #64]	; 0x40
 80069ac:	2301      	movs	r3, #1
 80069ae:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	f383 8810 	msr	PRIMASK, r3
}
 80069b6:	46c0      	nop			; (mov r8, r8)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2101      	movs	r1, #1
 80069c4:	438a      	bics	r2, r1
 80069c6:	609a      	str	r2, [r3, #8]
 80069c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ce:	f383 8810 	msr	PRIMASK, r3
}
 80069d2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2280      	movs	r2, #128	; 0x80
 80069d8:	2120      	movs	r1, #32
 80069da:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	2380      	movs	r3, #128	; 0x80
 80069f0:	041b      	lsls	r3, r3, #16
 80069f2:	4013      	ands	r3, r2
 80069f4:	d018      	beq.n	8006a28 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069f6:	f3ef 8310 	mrs	r3, PRIMASK
 80069fa:	617b      	str	r3, [r7, #20]
  return(result);
 80069fc:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a00:	2301      	movs	r3, #1
 8006a02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	f383 8810 	msr	PRIMASK, r3
}
 8006a0a:	46c0      	nop			; (mov r8, r8)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4928      	ldr	r1, [pc, #160]	; (8006ab8 <UART_RxISR_16BIT+0x1b4>)
 8006a18:	400a      	ands	r2, r1
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	f383 8810 	msr	PRIMASK, r3
}
 8006a26:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d12f      	bne.n	8006a90 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a36:	f3ef 8310 	mrs	r3, PRIMASK
 8006a3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a3c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a40:	2301      	movs	r3, #1
 8006a42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f383 8810 	msr	PRIMASK, r3
}
 8006a4a:	46c0      	nop			; (mov r8, r8)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2110      	movs	r1, #16
 8006a58:	438a      	bics	r2, r1
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f383 8810 	msr	PRIMASK, r3
}
 8006a66:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	2210      	movs	r2, #16
 8006a70:	4013      	ands	r3, r2
 8006a72:	2b10      	cmp	r3, #16
 8006a74:	d103      	bne.n	8006a7e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2210      	movs	r2, #16
 8006a7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2258      	movs	r2, #88	; 0x58
 8006a82:	5a9a      	ldrh	r2, [r3, r2]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	0011      	movs	r1, r2
 8006a88:	0018      	movs	r0, r3
 8006a8a:	f7ff f995 	bl	8005db8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a8e:	e00c      	b.n	8006aaa <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	0018      	movs	r0, r3
 8006a94:	f7fb fc6a 	bl	800236c <HAL_UART_RxCpltCallback>
}
 8006a98:	e007      	b.n	8006aaa <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	699a      	ldr	r2, [r3, #24]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2108      	movs	r1, #8
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	619a      	str	r2, [r3, #24]
}
 8006aaa:	46c0      	nop			; (mov r8, r8)
 8006aac:	46bd      	mov	sp, r7
 8006aae:	b014      	add	sp, #80	; 0x50
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	46c0      	nop			; (mov r8, r8)
 8006ab4:	fffffedf 	.word	0xfffffedf
 8006ab8:	fbffffff 	.word	0xfbffffff

08006abc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ac4:	46c0      	nop			; (mov r8, r8)
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	b002      	add	sp, #8
 8006aca:	bd80      	pop	{r7, pc}

08006acc <siprintf>:
 8006acc:	b40e      	push	{r1, r2, r3}
 8006ace:	b500      	push	{lr}
 8006ad0:	490b      	ldr	r1, [pc, #44]	; (8006b00 <siprintf+0x34>)
 8006ad2:	b09c      	sub	sp, #112	; 0x70
 8006ad4:	ab1d      	add	r3, sp, #116	; 0x74
 8006ad6:	9002      	str	r0, [sp, #8]
 8006ad8:	9006      	str	r0, [sp, #24]
 8006ada:	9107      	str	r1, [sp, #28]
 8006adc:	9104      	str	r1, [sp, #16]
 8006ade:	4809      	ldr	r0, [pc, #36]	; (8006b04 <siprintf+0x38>)
 8006ae0:	4909      	ldr	r1, [pc, #36]	; (8006b08 <siprintf+0x3c>)
 8006ae2:	cb04      	ldmia	r3!, {r2}
 8006ae4:	9105      	str	r1, [sp, #20]
 8006ae6:	6800      	ldr	r0, [r0, #0]
 8006ae8:	a902      	add	r1, sp, #8
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	f000 f9a2 	bl	8006e34 <_svfiprintf_r>
 8006af0:	2200      	movs	r2, #0
 8006af2:	9b02      	ldr	r3, [sp, #8]
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	b01c      	add	sp, #112	; 0x70
 8006af8:	bc08      	pop	{r3}
 8006afa:	b003      	add	sp, #12
 8006afc:	4718      	bx	r3
 8006afe:	46c0      	nop			; (mov r8, r8)
 8006b00:	7fffffff 	.word	0x7fffffff
 8006b04:	20000058 	.word	0x20000058
 8006b08:	ffff0208 	.word	0xffff0208

08006b0c <memset>:
 8006b0c:	0003      	movs	r3, r0
 8006b0e:	1882      	adds	r2, r0, r2
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d100      	bne.n	8006b16 <memset+0xa>
 8006b14:	4770      	bx	lr
 8006b16:	7019      	strb	r1, [r3, #0]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	e7f9      	b.n	8006b10 <memset+0x4>

08006b1c <__errno>:
 8006b1c:	4b01      	ldr	r3, [pc, #4]	; (8006b24 <__errno+0x8>)
 8006b1e:	6818      	ldr	r0, [r3, #0]
 8006b20:	4770      	bx	lr
 8006b22:	46c0      	nop			; (mov r8, r8)
 8006b24:	20000058 	.word	0x20000058

08006b28 <__libc_init_array>:
 8006b28:	b570      	push	{r4, r5, r6, lr}
 8006b2a:	2600      	movs	r6, #0
 8006b2c:	4c0c      	ldr	r4, [pc, #48]	; (8006b60 <__libc_init_array+0x38>)
 8006b2e:	4d0d      	ldr	r5, [pc, #52]	; (8006b64 <__libc_init_array+0x3c>)
 8006b30:	1b64      	subs	r4, r4, r5
 8006b32:	10a4      	asrs	r4, r4, #2
 8006b34:	42a6      	cmp	r6, r4
 8006b36:	d109      	bne.n	8006b4c <__libc_init_array+0x24>
 8006b38:	2600      	movs	r6, #0
 8006b3a:	f000 fc6d 	bl	8007418 <_init>
 8006b3e:	4c0a      	ldr	r4, [pc, #40]	; (8006b68 <__libc_init_array+0x40>)
 8006b40:	4d0a      	ldr	r5, [pc, #40]	; (8006b6c <__libc_init_array+0x44>)
 8006b42:	1b64      	subs	r4, r4, r5
 8006b44:	10a4      	asrs	r4, r4, #2
 8006b46:	42a6      	cmp	r6, r4
 8006b48:	d105      	bne.n	8006b56 <__libc_init_array+0x2e>
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}
 8006b4c:	00b3      	lsls	r3, r6, #2
 8006b4e:	58eb      	ldr	r3, [r5, r3]
 8006b50:	4798      	blx	r3
 8006b52:	3601      	adds	r6, #1
 8006b54:	e7ee      	b.n	8006b34 <__libc_init_array+0xc>
 8006b56:	00b3      	lsls	r3, r6, #2
 8006b58:	58eb      	ldr	r3, [r5, r3]
 8006b5a:	4798      	blx	r3
 8006b5c:	3601      	adds	r6, #1
 8006b5e:	e7f2      	b.n	8006b46 <__libc_init_array+0x1e>
 8006b60:	08007514 	.word	0x08007514
 8006b64:	08007514 	.word	0x08007514
 8006b68:	08007518 	.word	0x08007518
 8006b6c:	08007514 	.word	0x08007514

08006b70 <__retarget_lock_acquire_recursive>:
 8006b70:	4770      	bx	lr

08006b72 <__retarget_lock_release_recursive>:
 8006b72:	4770      	bx	lr

08006b74 <_free_r>:
 8006b74:	b570      	push	{r4, r5, r6, lr}
 8006b76:	0005      	movs	r5, r0
 8006b78:	2900      	cmp	r1, #0
 8006b7a:	d010      	beq.n	8006b9e <_free_r+0x2a>
 8006b7c:	1f0c      	subs	r4, r1, #4
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	da00      	bge.n	8006b86 <_free_r+0x12>
 8006b84:	18e4      	adds	r4, r4, r3
 8006b86:	0028      	movs	r0, r5
 8006b88:	f000 f8e2 	bl	8006d50 <__malloc_lock>
 8006b8c:	4a1d      	ldr	r2, [pc, #116]	; (8006c04 <_free_r+0x90>)
 8006b8e:	6813      	ldr	r3, [r2, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d105      	bne.n	8006ba0 <_free_r+0x2c>
 8006b94:	6063      	str	r3, [r4, #4]
 8006b96:	6014      	str	r4, [r2, #0]
 8006b98:	0028      	movs	r0, r5
 8006b9a:	f000 f8e1 	bl	8006d60 <__malloc_unlock>
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	42a3      	cmp	r3, r4
 8006ba2:	d908      	bls.n	8006bb6 <_free_r+0x42>
 8006ba4:	6820      	ldr	r0, [r4, #0]
 8006ba6:	1821      	adds	r1, r4, r0
 8006ba8:	428b      	cmp	r3, r1
 8006baa:	d1f3      	bne.n	8006b94 <_free_r+0x20>
 8006bac:	6819      	ldr	r1, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	1809      	adds	r1, r1, r0
 8006bb2:	6021      	str	r1, [r4, #0]
 8006bb4:	e7ee      	b.n	8006b94 <_free_r+0x20>
 8006bb6:	001a      	movs	r2, r3
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <_free_r+0x4e>
 8006bbe:	42a3      	cmp	r3, r4
 8006bc0:	d9f9      	bls.n	8006bb6 <_free_r+0x42>
 8006bc2:	6811      	ldr	r1, [r2, #0]
 8006bc4:	1850      	adds	r0, r2, r1
 8006bc6:	42a0      	cmp	r0, r4
 8006bc8:	d10b      	bne.n	8006be2 <_free_r+0x6e>
 8006bca:	6820      	ldr	r0, [r4, #0]
 8006bcc:	1809      	adds	r1, r1, r0
 8006bce:	1850      	adds	r0, r2, r1
 8006bd0:	6011      	str	r1, [r2, #0]
 8006bd2:	4283      	cmp	r3, r0
 8006bd4:	d1e0      	bne.n	8006b98 <_free_r+0x24>
 8006bd6:	6818      	ldr	r0, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	1841      	adds	r1, r0, r1
 8006bdc:	6011      	str	r1, [r2, #0]
 8006bde:	6053      	str	r3, [r2, #4]
 8006be0:	e7da      	b.n	8006b98 <_free_r+0x24>
 8006be2:	42a0      	cmp	r0, r4
 8006be4:	d902      	bls.n	8006bec <_free_r+0x78>
 8006be6:	230c      	movs	r3, #12
 8006be8:	602b      	str	r3, [r5, #0]
 8006bea:	e7d5      	b.n	8006b98 <_free_r+0x24>
 8006bec:	6820      	ldr	r0, [r4, #0]
 8006bee:	1821      	adds	r1, r4, r0
 8006bf0:	428b      	cmp	r3, r1
 8006bf2:	d103      	bne.n	8006bfc <_free_r+0x88>
 8006bf4:	6819      	ldr	r1, [r3, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	1809      	adds	r1, r1, r0
 8006bfa:	6021      	str	r1, [r4, #0]
 8006bfc:	6063      	str	r3, [r4, #4]
 8006bfe:	6054      	str	r4, [r2, #4]
 8006c00:	e7ca      	b.n	8006b98 <_free_r+0x24>
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	200003a0 	.word	0x200003a0

08006c08 <sbrk_aligned>:
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	4e0f      	ldr	r6, [pc, #60]	; (8006c48 <sbrk_aligned+0x40>)
 8006c0c:	000d      	movs	r5, r1
 8006c0e:	6831      	ldr	r1, [r6, #0]
 8006c10:	0004      	movs	r4, r0
 8006c12:	2900      	cmp	r1, #0
 8006c14:	d102      	bne.n	8006c1c <sbrk_aligned+0x14>
 8006c16:	f000 fba1 	bl	800735c <_sbrk_r>
 8006c1a:	6030      	str	r0, [r6, #0]
 8006c1c:	0029      	movs	r1, r5
 8006c1e:	0020      	movs	r0, r4
 8006c20:	f000 fb9c 	bl	800735c <_sbrk_r>
 8006c24:	1c43      	adds	r3, r0, #1
 8006c26:	d00a      	beq.n	8006c3e <sbrk_aligned+0x36>
 8006c28:	2303      	movs	r3, #3
 8006c2a:	1cc5      	adds	r5, r0, #3
 8006c2c:	439d      	bics	r5, r3
 8006c2e:	42a8      	cmp	r0, r5
 8006c30:	d007      	beq.n	8006c42 <sbrk_aligned+0x3a>
 8006c32:	1a29      	subs	r1, r5, r0
 8006c34:	0020      	movs	r0, r4
 8006c36:	f000 fb91 	bl	800735c <_sbrk_r>
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	d101      	bne.n	8006c42 <sbrk_aligned+0x3a>
 8006c3e:	2501      	movs	r5, #1
 8006c40:	426d      	negs	r5, r5
 8006c42:	0028      	movs	r0, r5
 8006c44:	bd70      	pop	{r4, r5, r6, pc}
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	200003a4 	.word	0x200003a4

08006c4c <_malloc_r>:
 8006c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c4e:	2203      	movs	r2, #3
 8006c50:	1ccb      	adds	r3, r1, #3
 8006c52:	4393      	bics	r3, r2
 8006c54:	3308      	adds	r3, #8
 8006c56:	0006      	movs	r6, r0
 8006c58:	001f      	movs	r7, r3
 8006c5a:	2b0c      	cmp	r3, #12
 8006c5c:	d238      	bcs.n	8006cd0 <_malloc_r+0x84>
 8006c5e:	270c      	movs	r7, #12
 8006c60:	42b9      	cmp	r1, r7
 8006c62:	d837      	bhi.n	8006cd4 <_malloc_r+0x88>
 8006c64:	0030      	movs	r0, r6
 8006c66:	f000 f873 	bl	8006d50 <__malloc_lock>
 8006c6a:	4b38      	ldr	r3, [pc, #224]	; (8006d4c <_malloc_r+0x100>)
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	001c      	movs	r4, r3
 8006c72:	2c00      	cmp	r4, #0
 8006c74:	d133      	bne.n	8006cde <_malloc_r+0x92>
 8006c76:	0039      	movs	r1, r7
 8006c78:	0030      	movs	r0, r6
 8006c7a:	f7ff ffc5 	bl	8006c08 <sbrk_aligned>
 8006c7e:	0004      	movs	r4, r0
 8006c80:	1c43      	adds	r3, r0, #1
 8006c82:	d15e      	bne.n	8006d42 <_malloc_r+0xf6>
 8006c84:	9b00      	ldr	r3, [sp, #0]
 8006c86:	681c      	ldr	r4, [r3, #0]
 8006c88:	0025      	movs	r5, r4
 8006c8a:	2d00      	cmp	r5, #0
 8006c8c:	d14e      	bne.n	8006d2c <_malloc_r+0xe0>
 8006c8e:	2c00      	cmp	r4, #0
 8006c90:	d051      	beq.n	8006d36 <_malloc_r+0xea>
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	0029      	movs	r1, r5
 8006c96:	18e3      	adds	r3, r4, r3
 8006c98:	0030      	movs	r0, r6
 8006c9a:	9301      	str	r3, [sp, #4]
 8006c9c:	f000 fb5e 	bl	800735c <_sbrk_r>
 8006ca0:	9b01      	ldr	r3, [sp, #4]
 8006ca2:	4283      	cmp	r3, r0
 8006ca4:	d147      	bne.n	8006d36 <_malloc_r+0xea>
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	0030      	movs	r0, r6
 8006caa:	1aff      	subs	r7, r7, r3
 8006cac:	0039      	movs	r1, r7
 8006cae:	f7ff ffab 	bl	8006c08 <sbrk_aligned>
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	d03f      	beq.n	8006d36 <_malloc_r+0xea>
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	19db      	adds	r3, r3, r7
 8006cba:	6023      	str	r3, [r4, #0]
 8006cbc:	9b00      	ldr	r3, [sp, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d040      	beq.n	8006d46 <_malloc_r+0xfa>
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	42a2      	cmp	r2, r4
 8006cc8:	d133      	bne.n	8006d32 <_malloc_r+0xe6>
 8006cca:	2200      	movs	r2, #0
 8006ccc:	605a      	str	r2, [r3, #4]
 8006cce:	e014      	b.n	8006cfa <_malloc_r+0xae>
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	dac5      	bge.n	8006c60 <_malloc_r+0x14>
 8006cd4:	230c      	movs	r3, #12
 8006cd6:	2500      	movs	r5, #0
 8006cd8:	6033      	str	r3, [r6, #0]
 8006cda:	0028      	movs	r0, r5
 8006cdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006cde:	6821      	ldr	r1, [r4, #0]
 8006ce0:	1bc9      	subs	r1, r1, r7
 8006ce2:	d420      	bmi.n	8006d26 <_malloc_r+0xda>
 8006ce4:	290b      	cmp	r1, #11
 8006ce6:	d918      	bls.n	8006d1a <_malloc_r+0xce>
 8006ce8:	19e2      	adds	r2, r4, r7
 8006cea:	6027      	str	r7, [r4, #0]
 8006cec:	42a3      	cmp	r3, r4
 8006cee:	d112      	bne.n	8006d16 <_malloc_r+0xca>
 8006cf0:	9b00      	ldr	r3, [sp, #0]
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	6863      	ldr	r3, [r4, #4]
 8006cf6:	6011      	str	r1, [r2, #0]
 8006cf8:	6053      	str	r3, [r2, #4]
 8006cfa:	0030      	movs	r0, r6
 8006cfc:	0025      	movs	r5, r4
 8006cfe:	f000 f82f 	bl	8006d60 <__malloc_unlock>
 8006d02:	2207      	movs	r2, #7
 8006d04:	350b      	adds	r5, #11
 8006d06:	1d23      	adds	r3, r4, #4
 8006d08:	4395      	bics	r5, r2
 8006d0a:	1aea      	subs	r2, r5, r3
 8006d0c:	429d      	cmp	r5, r3
 8006d0e:	d0e4      	beq.n	8006cda <_malloc_r+0x8e>
 8006d10:	1b5b      	subs	r3, r3, r5
 8006d12:	50a3      	str	r3, [r4, r2]
 8006d14:	e7e1      	b.n	8006cda <_malloc_r+0x8e>
 8006d16:	605a      	str	r2, [r3, #4]
 8006d18:	e7ec      	b.n	8006cf4 <_malloc_r+0xa8>
 8006d1a:	6862      	ldr	r2, [r4, #4]
 8006d1c:	42a3      	cmp	r3, r4
 8006d1e:	d1d5      	bne.n	8006ccc <_malloc_r+0x80>
 8006d20:	9b00      	ldr	r3, [sp, #0]
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	e7e9      	b.n	8006cfa <_malloc_r+0xae>
 8006d26:	0023      	movs	r3, r4
 8006d28:	6864      	ldr	r4, [r4, #4]
 8006d2a:	e7a2      	b.n	8006c72 <_malloc_r+0x26>
 8006d2c:	002c      	movs	r4, r5
 8006d2e:	686d      	ldr	r5, [r5, #4]
 8006d30:	e7ab      	b.n	8006c8a <_malloc_r+0x3e>
 8006d32:	0013      	movs	r3, r2
 8006d34:	e7c4      	b.n	8006cc0 <_malloc_r+0x74>
 8006d36:	230c      	movs	r3, #12
 8006d38:	0030      	movs	r0, r6
 8006d3a:	6033      	str	r3, [r6, #0]
 8006d3c:	f000 f810 	bl	8006d60 <__malloc_unlock>
 8006d40:	e7cb      	b.n	8006cda <_malloc_r+0x8e>
 8006d42:	6027      	str	r7, [r4, #0]
 8006d44:	e7d9      	b.n	8006cfa <_malloc_r+0xae>
 8006d46:	605b      	str	r3, [r3, #4]
 8006d48:	deff      	udf	#255	; 0xff
 8006d4a:	46c0      	nop			; (mov r8, r8)
 8006d4c:	200003a0 	.word	0x200003a0

08006d50 <__malloc_lock>:
 8006d50:	b510      	push	{r4, lr}
 8006d52:	4802      	ldr	r0, [pc, #8]	; (8006d5c <__malloc_lock+0xc>)
 8006d54:	f7ff ff0c 	bl	8006b70 <__retarget_lock_acquire_recursive>
 8006d58:	bd10      	pop	{r4, pc}
 8006d5a:	46c0      	nop			; (mov r8, r8)
 8006d5c:	2000039c 	.word	0x2000039c

08006d60 <__malloc_unlock>:
 8006d60:	b510      	push	{r4, lr}
 8006d62:	4802      	ldr	r0, [pc, #8]	; (8006d6c <__malloc_unlock+0xc>)
 8006d64:	f7ff ff05 	bl	8006b72 <__retarget_lock_release_recursive>
 8006d68:	bd10      	pop	{r4, pc}
 8006d6a:	46c0      	nop			; (mov r8, r8)
 8006d6c:	2000039c 	.word	0x2000039c

08006d70 <__ssputs_r>:
 8006d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d72:	b085      	sub	sp, #20
 8006d74:	9301      	str	r3, [sp, #4]
 8006d76:	9203      	str	r2, [sp, #12]
 8006d78:	688e      	ldr	r6, [r1, #8]
 8006d7a:	9a01      	ldr	r2, [sp, #4]
 8006d7c:	0007      	movs	r7, r0
 8006d7e:	000c      	movs	r4, r1
 8006d80:	680b      	ldr	r3, [r1, #0]
 8006d82:	4296      	cmp	r6, r2
 8006d84:	d831      	bhi.n	8006dea <__ssputs_r+0x7a>
 8006d86:	898a      	ldrh	r2, [r1, #12]
 8006d88:	2190      	movs	r1, #144	; 0x90
 8006d8a:	00c9      	lsls	r1, r1, #3
 8006d8c:	420a      	tst	r2, r1
 8006d8e:	d029      	beq.n	8006de4 <__ssputs_r+0x74>
 8006d90:	2003      	movs	r0, #3
 8006d92:	6921      	ldr	r1, [r4, #16]
 8006d94:	1a5b      	subs	r3, r3, r1
 8006d96:	9302      	str	r3, [sp, #8]
 8006d98:	6963      	ldr	r3, [r4, #20]
 8006d9a:	4343      	muls	r3, r0
 8006d9c:	0fdd      	lsrs	r5, r3, #31
 8006d9e:	18ed      	adds	r5, r5, r3
 8006da0:	9b01      	ldr	r3, [sp, #4]
 8006da2:	9802      	ldr	r0, [sp, #8]
 8006da4:	3301      	adds	r3, #1
 8006da6:	181b      	adds	r3, r3, r0
 8006da8:	106d      	asrs	r5, r5, #1
 8006daa:	42ab      	cmp	r3, r5
 8006dac:	d900      	bls.n	8006db0 <__ssputs_r+0x40>
 8006dae:	001d      	movs	r5, r3
 8006db0:	0552      	lsls	r2, r2, #21
 8006db2:	d529      	bpl.n	8006e08 <__ssputs_r+0x98>
 8006db4:	0029      	movs	r1, r5
 8006db6:	0038      	movs	r0, r7
 8006db8:	f7ff ff48 	bl	8006c4c <_malloc_r>
 8006dbc:	1e06      	subs	r6, r0, #0
 8006dbe:	d02d      	beq.n	8006e1c <__ssputs_r+0xac>
 8006dc0:	9a02      	ldr	r2, [sp, #8]
 8006dc2:	6921      	ldr	r1, [r4, #16]
 8006dc4:	f000 fae7 	bl	8007396 <memcpy>
 8006dc8:	89a2      	ldrh	r2, [r4, #12]
 8006dca:	4b19      	ldr	r3, [pc, #100]	; (8006e30 <__ssputs_r+0xc0>)
 8006dcc:	401a      	ands	r2, r3
 8006dce:	2380      	movs	r3, #128	; 0x80
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	81a3      	strh	r3, [r4, #12]
 8006dd4:	9b02      	ldr	r3, [sp, #8]
 8006dd6:	6126      	str	r6, [r4, #16]
 8006dd8:	18f6      	adds	r6, r6, r3
 8006dda:	6026      	str	r6, [r4, #0]
 8006ddc:	6165      	str	r5, [r4, #20]
 8006dde:	9e01      	ldr	r6, [sp, #4]
 8006de0:	1aed      	subs	r5, r5, r3
 8006de2:	60a5      	str	r5, [r4, #8]
 8006de4:	9b01      	ldr	r3, [sp, #4]
 8006de6:	429e      	cmp	r6, r3
 8006de8:	d900      	bls.n	8006dec <__ssputs_r+0x7c>
 8006dea:	9e01      	ldr	r6, [sp, #4]
 8006dec:	0032      	movs	r2, r6
 8006dee:	9903      	ldr	r1, [sp, #12]
 8006df0:	6820      	ldr	r0, [r4, #0]
 8006df2:	f000 fa9f 	bl	8007334 <memmove>
 8006df6:	2000      	movs	r0, #0
 8006df8:	68a3      	ldr	r3, [r4, #8]
 8006dfa:	1b9b      	subs	r3, r3, r6
 8006dfc:	60a3      	str	r3, [r4, #8]
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	199b      	adds	r3, r3, r6
 8006e02:	6023      	str	r3, [r4, #0]
 8006e04:	b005      	add	sp, #20
 8006e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e08:	002a      	movs	r2, r5
 8006e0a:	0038      	movs	r0, r7
 8006e0c:	f000 facc 	bl	80073a8 <_realloc_r>
 8006e10:	1e06      	subs	r6, r0, #0
 8006e12:	d1df      	bne.n	8006dd4 <__ssputs_r+0x64>
 8006e14:	0038      	movs	r0, r7
 8006e16:	6921      	ldr	r1, [r4, #16]
 8006e18:	f7ff feac 	bl	8006b74 <_free_r>
 8006e1c:	230c      	movs	r3, #12
 8006e1e:	2001      	movs	r0, #1
 8006e20:	603b      	str	r3, [r7, #0]
 8006e22:	89a2      	ldrh	r2, [r4, #12]
 8006e24:	3334      	adds	r3, #52	; 0x34
 8006e26:	4313      	orrs	r3, r2
 8006e28:	81a3      	strh	r3, [r4, #12]
 8006e2a:	4240      	negs	r0, r0
 8006e2c:	e7ea      	b.n	8006e04 <__ssputs_r+0x94>
 8006e2e:	46c0      	nop			; (mov r8, r8)
 8006e30:	fffffb7f 	.word	0xfffffb7f

08006e34 <_svfiprintf_r>:
 8006e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e36:	b0a1      	sub	sp, #132	; 0x84
 8006e38:	9003      	str	r0, [sp, #12]
 8006e3a:	001d      	movs	r5, r3
 8006e3c:	898b      	ldrh	r3, [r1, #12]
 8006e3e:	000f      	movs	r7, r1
 8006e40:	0016      	movs	r6, r2
 8006e42:	061b      	lsls	r3, r3, #24
 8006e44:	d511      	bpl.n	8006e6a <_svfiprintf_r+0x36>
 8006e46:	690b      	ldr	r3, [r1, #16]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10e      	bne.n	8006e6a <_svfiprintf_r+0x36>
 8006e4c:	2140      	movs	r1, #64	; 0x40
 8006e4e:	f7ff fefd 	bl	8006c4c <_malloc_r>
 8006e52:	6038      	str	r0, [r7, #0]
 8006e54:	6138      	str	r0, [r7, #16]
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d105      	bne.n	8006e66 <_svfiprintf_r+0x32>
 8006e5a:	230c      	movs	r3, #12
 8006e5c:	9a03      	ldr	r2, [sp, #12]
 8006e5e:	3801      	subs	r0, #1
 8006e60:	6013      	str	r3, [r2, #0]
 8006e62:	b021      	add	sp, #132	; 0x84
 8006e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e66:	2340      	movs	r3, #64	; 0x40
 8006e68:	617b      	str	r3, [r7, #20]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	ac08      	add	r4, sp, #32
 8006e6e:	6163      	str	r3, [r4, #20]
 8006e70:	3320      	adds	r3, #32
 8006e72:	7663      	strb	r3, [r4, #25]
 8006e74:	3310      	adds	r3, #16
 8006e76:	76a3      	strb	r3, [r4, #26]
 8006e78:	9507      	str	r5, [sp, #28]
 8006e7a:	0035      	movs	r5, r6
 8006e7c:	782b      	ldrb	r3, [r5, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <_svfiprintf_r+0x52>
 8006e82:	2b25      	cmp	r3, #37	; 0x25
 8006e84:	d148      	bne.n	8006f18 <_svfiprintf_r+0xe4>
 8006e86:	1bab      	subs	r3, r5, r6
 8006e88:	9305      	str	r3, [sp, #20]
 8006e8a:	42b5      	cmp	r5, r6
 8006e8c:	d00b      	beq.n	8006ea6 <_svfiprintf_r+0x72>
 8006e8e:	0032      	movs	r2, r6
 8006e90:	0039      	movs	r1, r7
 8006e92:	9803      	ldr	r0, [sp, #12]
 8006e94:	f7ff ff6c 	bl	8006d70 <__ssputs_r>
 8006e98:	3001      	adds	r0, #1
 8006e9a:	d100      	bne.n	8006e9e <_svfiprintf_r+0x6a>
 8006e9c:	e0af      	b.n	8006ffe <_svfiprintf_r+0x1ca>
 8006e9e:	6963      	ldr	r3, [r4, #20]
 8006ea0:	9a05      	ldr	r2, [sp, #20]
 8006ea2:	189b      	adds	r3, r3, r2
 8006ea4:	6163      	str	r3, [r4, #20]
 8006ea6:	782b      	ldrb	r3, [r5, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d100      	bne.n	8006eae <_svfiprintf_r+0x7a>
 8006eac:	e0a7      	b.n	8006ffe <_svfiprintf_r+0x1ca>
 8006eae:	2201      	movs	r2, #1
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	4252      	negs	r2, r2
 8006eb4:	6062      	str	r2, [r4, #4]
 8006eb6:	a904      	add	r1, sp, #16
 8006eb8:	3254      	adds	r2, #84	; 0x54
 8006eba:	1852      	adds	r2, r2, r1
 8006ebc:	1c6e      	adds	r6, r5, #1
 8006ebe:	6023      	str	r3, [r4, #0]
 8006ec0:	60e3      	str	r3, [r4, #12]
 8006ec2:	60a3      	str	r3, [r4, #8]
 8006ec4:	7013      	strb	r3, [r2, #0]
 8006ec6:	65a3      	str	r3, [r4, #88]	; 0x58
 8006ec8:	4b55      	ldr	r3, [pc, #340]	; (8007020 <_svfiprintf_r+0x1ec>)
 8006eca:	2205      	movs	r2, #5
 8006ecc:	0018      	movs	r0, r3
 8006ece:	7831      	ldrb	r1, [r6, #0]
 8006ed0:	9305      	str	r3, [sp, #20]
 8006ed2:	f000 fa55 	bl	8007380 <memchr>
 8006ed6:	1c75      	adds	r5, r6, #1
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d11f      	bne.n	8006f1c <_svfiprintf_r+0xe8>
 8006edc:	6822      	ldr	r2, [r4, #0]
 8006ede:	06d3      	lsls	r3, r2, #27
 8006ee0:	d504      	bpl.n	8006eec <_svfiprintf_r+0xb8>
 8006ee2:	2353      	movs	r3, #83	; 0x53
 8006ee4:	a904      	add	r1, sp, #16
 8006ee6:	185b      	adds	r3, r3, r1
 8006ee8:	2120      	movs	r1, #32
 8006eea:	7019      	strb	r1, [r3, #0]
 8006eec:	0713      	lsls	r3, r2, #28
 8006eee:	d504      	bpl.n	8006efa <_svfiprintf_r+0xc6>
 8006ef0:	2353      	movs	r3, #83	; 0x53
 8006ef2:	a904      	add	r1, sp, #16
 8006ef4:	185b      	adds	r3, r3, r1
 8006ef6:	212b      	movs	r1, #43	; 0x2b
 8006ef8:	7019      	strb	r1, [r3, #0]
 8006efa:	7833      	ldrb	r3, [r6, #0]
 8006efc:	2b2a      	cmp	r3, #42	; 0x2a
 8006efe:	d016      	beq.n	8006f2e <_svfiprintf_r+0xfa>
 8006f00:	0035      	movs	r5, r6
 8006f02:	2100      	movs	r1, #0
 8006f04:	200a      	movs	r0, #10
 8006f06:	68e3      	ldr	r3, [r4, #12]
 8006f08:	782a      	ldrb	r2, [r5, #0]
 8006f0a:	1c6e      	adds	r6, r5, #1
 8006f0c:	3a30      	subs	r2, #48	; 0x30
 8006f0e:	2a09      	cmp	r2, #9
 8006f10:	d94e      	bls.n	8006fb0 <_svfiprintf_r+0x17c>
 8006f12:	2900      	cmp	r1, #0
 8006f14:	d111      	bne.n	8006f3a <_svfiprintf_r+0x106>
 8006f16:	e017      	b.n	8006f48 <_svfiprintf_r+0x114>
 8006f18:	3501      	adds	r5, #1
 8006f1a:	e7af      	b.n	8006e7c <_svfiprintf_r+0x48>
 8006f1c:	9b05      	ldr	r3, [sp, #20]
 8006f1e:	6822      	ldr	r2, [r4, #0]
 8006f20:	1ac0      	subs	r0, r0, r3
 8006f22:	2301      	movs	r3, #1
 8006f24:	4083      	lsls	r3, r0
 8006f26:	4313      	orrs	r3, r2
 8006f28:	002e      	movs	r6, r5
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	e7cc      	b.n	8006ec8 <_svfiprintf_r+0x94>
 8006f2e:	9b07      	ldr	r3, [sp, #28]
 8006f30:	1d19      	adds	r1, r3, #4
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	9107      	str	r1, [sp, #28]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	db01      	blt.n	8006f3e <_svfiprintf_r+0x10a>
 8006f3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f3c:	e004      	b.n	8006f48 <_svfiprintf_r+0x114>
 8006f3e:	425b      	negs	r3, r3
 8006f40:	60e3      	str	r3, [r4, #12]
 8006f42:	2302      	movs	r3, #2
 8006f44:	4313      	orrs	r3, r2
 8006f46:	6023      	str	r3, [r4, #0]
 8006f48:	782b      	ldrb	r3, [r5, #0]
 8006f4a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f4c:	d10a      	bne.n	8006f64 <_svfiprintf_r+0x130>
 8006f4e:	786b      	ldrb	r3, [r5, #1]
 8006f50:	2b2a      	cmp	r3, #42	; 0x2a
 8006f52:	d135      	bne.n	8006fc0 <_svfiprintf_r+0x18c>
 8006f54:	9b07      	ldr	r3, [sp, #28]
 8006f56:	3502      	adds	r5, #2
 8006f58:	1d1a      	adds	r2, r3, #4
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	9207      	str	r2, [sp, #28]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	db2b      	blt.n	8006fba <_svfiprintf_r+0x186>
 8006f62:	9309      	str	r3, [sp, #36]	; 0x24
 8006f64:	4e2f      	ldr	r6, [pc, #188]	; (8007024 <_svfiprintf_r+0x1f0>)
 8006f66:	2203      	movs	r2, #3
 8006f68:	0030      	movs	r0, r6
 8006f6a:	7829      	ldrb	r1, [r5, #0]
 8006f6c:	f000 fa08 	bl	8007380 <memchr>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	d006      	beq.n	8006f82 <_svfiprintf_r+0x14e>
 8006f74:	2340      	movs	r3, #64	; 0x40
 8006f76:	1b80      	subs	r0, r0, r6
 8006f78:	4083      	lsls	r3, r0
 8006f7a:	6822      	ldr	r2, [r4, #0]
 8006f7c:	3501      	adds	r5, #1
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	7829      	ldrb	r1, [r5, #0]
 8006f84:	2206      	movs	r2, #6
 8006f86:	4828      	ldr	r0, [pc, #160]	; (8007028 <_svfiprintf_r+0x1f4>)
 8006f88:	1c6e      	adds	r6, r5, #1
 8006f8a:	7621      	strb	r1, [r4, #24]
 8006f8c:	f000 f9f8 	bl	8007380 <memchr>
 8006f90:	2800      	cmp	r0, #0
 8006f92:	d03c      	beq.n	800700e <_svfiprintf_r+0x1da>
 8006f94:	4b25      	ldr	r3, [pc, #148]	; (800702c <_svfiprintf_r+0x1f8>)
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d125      	bne.n	8006fe6 <_svfiprintf_r+0x1b2>
 8006f9a:	2207      	movs	r2, #7
 8006f9c:	9b07      	ldr	r3, [sp, #28]
 8006f9e:	3307      	adds	r3, #7
 8006fa0:	4393      	bics	r3, r2
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	9307      	str	r3, [sp, #28]
 8006fa6:	6963      	ldr	r3, [r4, #20]
 8006fa8:	9a04      	ldr	r2, [sp, #16]
 8006faa:	189b      	adds	r3, r3, r2
 8006fac:	6163      	str	r3, [r4, #20]
 8006fae:	e764      	b.n	8006e7a <_svfiprintf_r+0x46>
 8006fb0:	4343      	muls	r3, r0
 8006fb2:	0035      	movs	r5, r6
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	189b      	adds	r3, r3, r2
 8006fb8:	e7a6      	b.n	8006f08 <_svfiprintf_r+0xd4>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	425b      	negs	r3, r3
 8006fbe:	e7d0      	b.n	8006f62 <_svfiprintf_r+0x12e>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	200a      	movs	r0, #10
 8006fc4:	001a      	movs	r2, r3
 8006fc6:	3501      	adds	r5, #1
 8006fc8:	6063      	str	r3, [r4, #4]
 8006fca:	7829      	ldrb	r1, [r5, #0]
 8006fcc:	1c6e      	adds	r6, r5, #1
 8006fce:	3930      	subs	r1, #48	; 0x30
 8006fd0:	2909      	cmp	r1, #9
 8006fd2:	d903      	bls.n	8006fdc <_svfiprintf_r+0x1a8>
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0c5      	beq.n	8006f64 <_svfiprintf_r+0x130>
 8006fd8:	9209      	str	r2, [sp, #36]	; 0x24
 8006fda:	e7c3      	b.n	8006f64 <_svfiprintf_r+0x130>
 8006fdc:	4342      	muls	r2, r0
 8006fde:	0035      	movs	r5, r6
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	1852      	adds	r2, r2, r1
 8006fe4:	e7f1      	b.n	8006fca <_svfiprintf_r+0x196>
 8006fe6:	aa07      	add	r2, sp, #28
 8006fe8:	9200      	str	r2, [sp, #0]
 8006fea:	0021      	movs	r1, r4
 8006fec:	003a      	movs	r2, r7
 8006fee:	4b10      	ldr	r3, [pc, #64]	; (8007030 <_svfiprintf_r+0x1fc>)
 8006ff0:	9803      	ldr	r0, [sp, #12]
 8006ff2:	e000      	b.n	8006ff6 <_svfiprintf_r+0x1c2>
 8006ff4:	bf00      	nop
 8006ff6:	9004      	str	r0, [sp, #16]
 8006ff8:	9b04      	ldr	r3, [sp, #16]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	d1d3      	bne.n	8006fa6 <_svfiprintf_r+0x172>
 8006ffe:	89bb      	ldrh	r3, [r7, #12]
 8007000:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007002:	065b      	lsls	r3, r3, #25
 8007004:	d400      	bmi.n	8007008 <_svfiprintf_r+0x1d4>
 8007006:	e72c      	b.n	8006e62 <_svfiprintf_r+0x2e>
 8007008:	2001      	movs	r0, #1
 800700a:	4240      	negs	r0, r0
 800700c:	e729      	b.n	8006e62 <_svfiprintf_r+0x2e>
 800700e:	aa07      	add	r2, sp, #28
 8007010:	9200      	str	r2, [sp, #0]
 8007012:	0021      	movs	r1, r4
 8007014:	003a      	movs	r2, r7
 8007016:	4b06      	ldr	r3, [pc, #24]	; (8007030 <_svfiprintf_r+0x1fc>)
 8007018:	9803      	ldr	r0, [sp, #12]
 800701a:	f000 f87b 	bl	8007114 <_printf_i>
 800701e:	e7ea      	b.n	8006ff6 <_svfiprintf_r+0x1c2>
 8007020:	080074e0 	.word	0x080074e0
 8007024:	080074e6 	.word	0x080074e6
 8007028:	080074ea 	.word	0x080074ea
 800702c:	00000000 	.word	0x00000000
 8007030:	08006d71 	.word	0x08006d71

08007034 <_printf_common>:
 8007034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007036:	0016      	movs	r6, r2
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	688a      	ldr	r2, [r1, #8]
 800703c:	690b      	ldr	r3, [r1, #16]
 800703e:	000c      	movs	r4, r1
 8007040:	9000      	str	r0, [sp, #0]
 8007042:	4293      	cmp	r3, r2
 8007044:	da00      	bge.n	8007048 <_printf_common+0x14>
 8007046:	0013      	movs	r3, r2
 8007048:	0022      	movs	r2, r4
 800704a:	6033      	str	r3, [r6, #0]
 800704c:	3243      	adds	r2, #67	; 0x43
 800704e:	7812      	ldrb	r2, [r2, #0]
 8007050:	2a00      	cmp	r2, #0
 8007052:	d001      	beq.n	8007058 <_printf_common+0x24>
 8007054:	3301      	adds	r3, #1
 8007056:	6033      	str	r3, [r6, #0]
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	069b      	lsls	r3, r3, #26
 800705c:	d502      	bpl.n	8007064 <_printf_common+0x30>
 800705e:	6833      	ldr	r3, [r6, #0]
 8007060:	3302      	adds	r3, #2
 8007062:	6033      	str	r3, [r6, #0]
 8007064:	6822      	ldr	r2, [r4, #0]
 8007066:	2306      	movs	r3, #6
 8007068:	0015      	movs	r5, r2
 800706a:	401d      	ands	r5, r3
 800706c:	421a      	tst	r2, r3
 800706e:	d027      	beq.n	80070c0 <_printf_common+0x8c>
 8007070:	0023      	movs	r3, r4
 8007072:	3343      	adds	r3, #67	; 0x43
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	1e5a      	subs	r2, r3, #1
 8007078:	4193      	sbcs	r3, r2
 800707a:	6822      	ldr	r2, [r4, #0]
 800707c:	0692      	lsls	r2, r2, #26
 800707e:	d430      	bmi.n	80070e2 <_printf_common+0xae>
 8007080:	0022      	movs	r2, r4
 8007082:	9901      	ldr	r1, [sp, #4]
 8007084:	9800      	ldr	r0, [sp, #0]
 8007086:	9d08      	ldr	r5, [sp, #32]
 8007088:	3243      	adds	r2, #67	; 0x43
 800708a:	47a8      	blx	r5
 800708c:	3001      	adds	r0, #1
 800708e:	d025      	beq.n	80070dc <_printf_common+0xa8>
 8007090:	2206      	movs	r2, #6
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	2500      	movs	r5, #0
 8007096:	4013      	ands	r3, r2
 8007098:	2b04      	cmp	r3, #4
 800709a:	d105      	bne.n	80070a8 <_printf_common+0x74>
 800709c:	6833      	ldr	r3, [r6, #0]
 800709e:	68e5      	ldr	r5, [r4, #12]
 80070a0:	1aed      	subs	r5, r5, r3
 80070a2:	43eb      	mvns	r3, r5
 80070a4:	17db      	asrs	r3, r3, #31
 80070a6:	401d      	ands	r5, r3
 80070a8:	68a3      	ldr	r3, [r4, #8]
 80070aa:	6922      	ldr	r2, [r4, #16]
 80070ac:	4293      	cmp	r3, r2
 80070ae:	dd01      	ble.n	80070b4 <_printf_common+0x80>
 80070b0:	1a9b      	subs	r3, r3, r2
 80070b2:	18ed      	adds	r5, r5, r3
 80070b4:	2600      	movs	r6, #0
 80070b6:	42b5      	cmp	r5, r6
 80070b8:	d120      	bne.n	80070fc <_printf_common+0xc8>
 80070ba:	2000      	movs	r0, #0
 80070bc:	e010      	b.n	80070e0 <_printf_common+0xac>
 80070be:	3501      	adds	r5, #1
 80070c0:	68e3      	ldr	r3, [r4, #12]
 80070c2:	6832      	ldr	r2, [r6, #0]
 80070c4:	1a9b      	subs	r3, r3, r2
 80070c6:	42ab      	cmp	r3, r5
 80070c8:	ddd2      	ble.n	8007070 <_printf_common+0x3c>
 80070ca:	0022      	movs	r2, r4
 80070cc:	2301      	movs	r3, #1
 80070ce:	9901      	ldr	r1, [sp, #4]
 80070d0:	9800      	ldr	r0, [sp, #0]
 80070d2:	9f08      	ldr	r7, [sp, #32]
 80070d4:	3219      	adds	r2, #25
 80070d6:	47b8      	blx	r7
 80070d8:	3001      	adds	r0, #1
 80070da:	d1f0      	bne.n	80070be <_printf_common+0x8a>
 80070dc:	2001      	movs	r0, #1
 80070de:	4240      	negs	r0, r0
 80070e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070e2:	2030      	movs	r0, #48	; 0x30
 80070e4:	18e1      	adds	r1, r4, r3
 80070e6:	3143      	adds	r1, #67	; 0x43
 80070e8:	7008      	strb	r0, [r1, #0]
 80070ea:	0021      	movs	r1, r4
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	3145      	adds	r1, #69	; 0x45
 80070f0:	7809      	ldrb	r1, [r1, #0]
 80070f2:	18a2      	adds	r2, r4, r2
 80070f4:	3243      	adds	r2, #67	; 0x43
 80070f6:	3302      	adds	r3, #2
 80070f8:	7011      	strb	r1, [r2, #0]
 80070fa:	e7c1      	b.n	8007080 <_printf_common+0x4c>
 80070fc:	0022      	movs	r2, r4
 80070fe:	2301      	movs	r3, #1
 8007100:	9901      	ldr	r1, [sp, #4]
 8007102:	9800      	ldr	r0, [sp, #0]
 8007104:	9f08      	ldr	r7, [sp, #32]
 8007106:	321a      	adds	r2, #26
 8007108:	47b8      	blx	r7
 800710a:	3001      	adds	r0, #1
 800710c:	d0e6      	beq.n	80070dc <_printf_common+0xa8>
 800710e:	3601      	adds	r6, #1
 8007110:	e7d1      	b.n	80070b6 <_printf_common+0x82>
	...

08007114 <_printf_i>:
 8007114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007116:	b08b      	sub	sp, #44	; 0x2c
 8007118:	9206      	str	r2, [sp, #24]
 800711a:	000a      	movs	r2, r1
 800711c:	3243      	adds	r2, #67	; 0x43
 800711e:	9307      	str	r3, [sp, #28]
 8007120:	9005      	str	r0, [sp, #20]
 8007122:	9204      	str	r2, [sp, #16]
 8007124:	7e0a      	ldrb	r2, [r1, #24]
 8007126:	000c      	movs	r4, r1
 8007128:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800712a:	2a78      	cmp	r2, #120	; 0x78
 800712c:	d809      	bhi.n	8007142 <_printf_i+0x2e>
 800712e:	2a62      	cmp	r2, #98	; 0x62
 8007130:	d80b      	bhi.n	800714a <_printf_i+0x36>
 8007132:	2a00      	cmp	r2, #0
 8007134:	d100      	bne.n	8007138 <_printf_i+0x24>
 8007136:	e0be      	b.n	80072b6 <_printf_i+0x1a2>
 8007138:	497c      	ldr	r1, [pc, #496]	; (800732c <_printf_i+0x218>)
 800713a:	9103      	str	r1, [sp, #12]
 800713c:	2a58      	cmp	r2, #88	; 0x58
 800713e:	d100      	bne.n	8007142 <_printf_i+0x2e>
 8007140:	e093      	b.n	800726a <_printf_i+0x156>
 8007142:	0026      	movs	r6, r4
 8007144:	3642      	adds	r6, #66	; 0x42
 8007146:	7032      	strb	r2, [r6, #0]
 8007148:	e022      	b.n	8007190 <_printf_i+0x7c>
 800714a:	0010      	movs	r0, r2
 800714c:	3863      	subs	r0, #99	; 0x63
 800714e:	2815      	cmp	r0, #21
 8007150:	d8f7      	bhi.n	8007142 <_printf_i+0x2e>
 8007152:	f7f8 ffeb 	bl	800012c <__gnu_thumb1_case_shi>
 8007156:	0016      	.short	0x0016
 8007158:	fff6001f 	.word	0xfff6001f
 800715c:	fff6fff6 	.word	0xfff6fff6
 8007160:	001ffff6 	.word	0x001ffff6
 8007164:	fff6fff6 	.word	0xfff6fff6
 8007168:	fff6fff6 	.word	0xfff6fff6
 800716c:	003600a3 	.word	0x003600a3
 8007170:	fff60083 	.word	0xfff60083
 8007174:	00b4fff6 	.word	0x00b4fff6
 8007178:	0036fff6 	.word	0x0036fff6
 800717c:	fff6fff6 	.word	0xfff6fff6
 8007180:	0087      	.short	0x0087
 8007182:	0026      	movs	r6, r4
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	3642      	adds	r6, #66	; 0x42
 8007188:	1d11      	adds	r1, r2, #4
 800718a:	6019      	str	r1, [r3, #0]
 800718c:	6813      	ldr	r3, [r2, #0]
 800718e:	7033      	strb	r3, [r6, #0]
 8007190:	2301      	movs	r3, #1
 8007192:	e0a2      	b.n	80072da <_printf_i+0x1c6>
 8007194:	6818      	ldr	r0, [r3, #0]
 8007196:	6809      	ldr	r1, [r1, #0]
 8007198:	1d02      	adds	r2, r0, #4
 800719a:	060d      	lsls	r5, r1, #24
 800719c:	d50b      	bpl.n	80071b6 <_printf_i+0xa2>
 800719e:	6805      	ldr	r5, [r0, #0]
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	2d00      	cmp	r5, #0
 80071a4:	da03      	bge.n	80071ae <_printf_i+0x9a>
 80071a6:	232d      	movs	r3, #45	; 0x2d
 80071a8:	9a04      	ldr	r2, [sp, #16]
 80071aa:	426d      	negs	r5, r5
 80071ac:	7013      	strb	r3, [r2, #0]
 80071ae:	4b5f      	ldr	r3, [pc, #380]	; (800732c <_printf_i+0x218>)
 80071b0:	270a      	movs	r7, #10
 80071b2:	9303      	str	r3, [sp, #12]
 80071b4:	e01b      	b.n	80071ee <_printf_i+0xda>
 80071b6:	6805      	ldr	r5, [r0, #0]
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	0649      	lsls	r1, r1, #25
 80071bc:	d5f1      	bpl.n	80071a2 <_printf_i+0x8e>
 80071be:	b22d      	sxth	r5, r5
 80071c0:	e7ef      	b.n	80071a2 <_printf_i+0x8e>
 80071c2:	680d      	ldr	r5, [r1, #0]
 80071c4:	6819      	ldr	r1, [r3, #0]
 80071c6:	1d08      	adds	r0, r1, #4
 80071c8:	6018      	str	r0, [r3, #0]
 80071ca:	062e      	lsls	r6, r5, #24
 80071cc:	d501      	bpl.n	80071d2 <_printf_i+0xbe>
 80071ce:	680d      	ldr	r5, [r1, #0]
 80071d0:	e003      	b.n	80071da <_printf_i+0xc6>
 80071d2:	066d      	lsls	r5, r5, #25
 80071d4:	d5fb      	bpl.n	80071ce <_printf_i+0xba>
 80071d6:	680d      	ldr	r5, [r1, #0]
 80071d8:	b2ad      	uxth	r5, r5
 80071da:	4b54      	ldr	r3, [pc, #336]	; (800732c <_printf_i+0x218>)
 80071dc:	2708      	movs	r7, #8
 80071de:	9303      	str	r3, [sp, #12]
 80071e0:	2a6f      	cmp	r2, #111	; 0x6f
 80071e2:	d000      	beq.n	80071e6 <_printf_i+0xd2>
 80071e4:	3702      	adds	r7, #2
 80071e6:	0023      	movs	r3, r4
 80071e8:	2200      	movs	r2, #0
 80071ea:	3343      	adds	r3, #67	; 0x43
 80071ec:	701a      	strb	r2, [r3, #0]
 80071ee:	6863      	ldr	r3, [r4, #4]
 80071f0:	60a3      	str	r3, [r4, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	db03      	blt.n	80071fe <_printf_i+0xea>
 80071f6:	2104      	movs	r1, #4
 80071f8:	6822      	ldr	r2, [r4, #0]
 80071fa:	438a      	bics	r2, r1
 80071fc:	6022      	str	r2, [r4, #0]
 80071fe:	2d00      	cmp	r5, #0
 8007200:	d102      	bne.n	8007208 <_printf_i+0xf4>
 8007202:	9e04      	ldr	r6, [sp, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00c      	beq.n	8007222 <_printf_i+0x10e>
 8007208:	9e04      	ldr	r6, [sp, #16]
 800720a:	0028      	movs	r0, r5
 800720c:	0039      	movs	r1, r7
 800720e:	f7f9 f81d 	bl	800024c <__aeabi_uidivmod>
 8007212:	9b03      	ldr	r3, [sp, #12]
 8007214:	3e01      	subs	r6, #1
 8007216:	5c5b      	ldrb	r3, [r3, r1]
 8007218:	7033      	strb	r3, [r6, #0]
 800721a:	002b      	movs	r3, r5
 800721c:	0005      	movs	r5, r0
 800721e:	429f      	cmp	r7, r3
 8007220:	d9f3      	bls.n	800720a <_printf_i+0xf6>
 8007222:	2f08      	cmp	r7, #8
 8007224:	d109      	bne.n	800723a <_printf_i+0x126>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	07db      	lsls	r3, r3, #31
 800722a:	d506      	bpl.n	800723a <_printf_i+0x126>
 800722c:	6862      	ldr	r2, [r4, #4]
 800722e:	6923      	ldr	r3, [r4, #16]
 8007230:	429a      	cmp	r2, r3
 8007232:	dc02      	bgt.n	800723a <_printf_i+0x126>
 8007234:	2330      	movs	r3, #48	; 0x30
 8007236:	3e01      	subs	r6, #1
 8007238:	7033      	strb	r3, [r6, #0]
 800723a:	9b04      	ldr	r3, [sp, #16]
 800723c:	1b9b      	subs	r3, r3, r6
 800723e:	6123      	str	r3, [r4, #16]
 8007240:	9b07      	ldr	r3, [sp, #28]
 8007242:	0021      	movs	r1, r4
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	9805      	ldr	r0, [sp, #20]
 8007248:	9b06      	ldr	r3, [sp, #24]
 800724a:	aa09      	add	r2, sp, #36	; 0x24
 800724c:	f7ff fef2 	bl	8007034 <_printf_common>
 8007250:	3001      	adds	r0, #1
 8007252:	d147      	bne.n	80072e4 <_printf_i+0x1d0>
 8007254:	2001      	movs	r0, #1
 8007256:	4240      	negs	r0, r0
 8007258:	b00b      	add	sp, #44	; 0x2c
 800725a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800725c:	2220      	movs	r2, #32
 800725e:	6809      	ldr	r1, [r1, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	6022      	str	r2, [r4, #0]
 8007264:	2278      	movs	r2, #120	; 0x78
 8007266:	4932      	ldr	r1, [pc, #200]	; (8007330 <_printf_i+0x21c>)
 8007268:	9103      	str	r1, [sp, #12]
 800726a:	0021      	movs	r1, r4
 800726c:	3145      	adds	r1, #69	; 0x45
 800726e:	700a      	strb	r2, [r1, #0]
 8007270:	6819      	ldr	r1, [r3, #0]
 8007272:	6822      	ldr	r2, [r4, #0]
 8007274:	c920      	ldmia	r1!, {r5}
 8007276:	0610      	lsls	r0, r2, #24
 8007278:	d402      	bmi.n	8007280 <_printf_i+0x16c>
 800727a:	0650      	lsls	r0, r2, #25
 800727c:	d500      	bpl.n	8007280 <_printf_i+0x16c>
 800727e:	b2ad      	uxth	r5, r5
 8007280:	6019      	str	r1, [r3, #0]
 8007282:	07d3      	lsls	r3, r2, #31
 8007284:	d502      	bpl.n	800728c <_printf_i+0x178>
 8007286:	2320      	movs	r3, #32
 8007288:	4313      	orrs	r3, r2
 800728a:	6023      	str	r3, [r4, #0]
 800728c:	2710      	movs	r7, #16
 800728e:	2d00      	cmp	r5, #0
 8007290:	d1a9      	bne.n	80071e6 <_printf_i+0xd2>
 8007292:	2220      	movs	r2, #32
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	4393      	bics	r3, r2
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	e7a4      	b.n	80071e6 <_printf_i+0xd2>
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	680d      	ldr	r5, [r1, #0]
 80072a0:	1d10      	adds	r0, r2, #4
 80072a2:	6949      	ldr	r1, [r1, #20]
 80072a4:	6018      	str	r0, [r3, #0]
 80072a6:	6813      	ldr	r3, [r2, #0]
 80072a8:	062e      	lsls	r6, r5, #24
 80072aa:	d501      	bpl.n	80072b0 <_printf_i+0x19c>
 80072ac:	6019      	str	r1, [r3, #0]
 80072ae:	e002      	b.n	80072b6 <_printf_i+0x1a2>
 80072b0:	066d      	lsls	r5, r5, #25
 80072b2:	d5fb      	bpl.n	80072ac <_printf_i+0x198>
 80072b4:	8019      	strh	r1, [r3, #0]
 80072b6:	2300      	movs	r3, #0
 80072b8:	9e04      	ldr	r6, [sp, #16]
 80072ba:	6123      	str	r3, [r4, #16]
 80072bc:	e7c0      	b.n	8007240 <_printf_i+0x12c>
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	1d11      	adds	r1, r2, #4
 80072c2:	6019      	str	r1, [r3, #0]
 80072c4:	6816      	ldr	r6, [r2, #0]
 80072c6:	2100      	movs	r1, #0
 80072c8:	0030      	movs	r0, r6
 80072ca:	6862      	ldr	r2, [r4, #4]
 80072cc:	f000 f858 	bl	8007380 <memchr>
 80072d0:	2800      	cmp	r0, #0
 80072d2:	d001      	beq.n	80072d8 <_printf_i+0x1c4>
 80072d4:	1b80      	subs	r0, r0, r6
 80072d6:	6060      	str	r0, [r4, #4]
 80072d8:	6863      	ldr	r3, [r4, #4]
 80072da:	6123      	str	r3, [r4, #16]
 80072dc:	2300      	movs	r3, #0
 80072de:	9a04      	ldr	r2, [sp, #16]
 80072e0:	7013      	strb	r3, [r2, #0]
 80072e2:	e7ad      	b.n	8007240 <_printf_i+0x12c>
 80072e4:	0032      	movs	r2, r6
 80072e6:	6923      	ldr	r3, [r4, #16]
 80072e8:	9906      	ldr	r1, [sp, #24]
 80072ea:	9805      	ldr	r0, [sp, #20]
 80072ec:	9d07      	ldr	r5, [sp, #28]
 80072ee:	47a8      	blx	r5
 80072f0:	3001      	adds	r0, #1
 80072f2:	d0af      	beq.n	8007254 <_printf_i+0x140>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	079b      	lsls	r3, r3, #30
 80072f8:	d415      	bmi.n	8007326 <_printf_i+0x212>
 80072fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072fc:	68e0      	ldr	r0, [r4, #12]
 80072fe:	4298      	cmp	r0, r3
 8007300:	daaa      	bge.n	8007258 <_printf_i+0x144>
 8007302:	0018      	movs	r0, r3
 8007304:	e7a8      	b.n	8007258 <_printf_i+0x144>
 8007306:	0022      	movs	r2, r4
 8007308:	2301      	movs	r3, #1
 800730a:	9906      	ldr	r1, [sp, #24]
 800730c:	9805      	ldr	r0, [sp, #20]
 800730e:	9e07      	ldr	r6, [sp, #28]
 8007310:	3219      	adds	r2, #25
 8007312:	47b0      	blx	r6
 8007314:	3001      	adds	r0, #1
 8007316:	d09d      	beq.n	8007254 <_printf_i+0x140>
 8007318:	3501      	adds	r5, #1
 800731a:	68e3      	ldr	r3, [r4, #12]
 800731c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800731e:	1a9b      	subs	r3, r3, r2
 8007320:	42ab      	cmp	r3, r5
 8007322:	dcf0      	bgt.n	8007306 <_printf_i+0x1f2>
 8007324:	e7e9      	b.n	80072fa <_printf_i+0x1e6>
 8007326:	2500      	movs	r5, #0
 8007328:	e7f7      	b.n	800731a <_printf_i+0x206>
 800732a:	46c0      	nop			; (mov r8, r8)
 800732c:	080074f1 	.word	0x080074f1
 8007330:	08007502 	.word	0x08007502

08007334 <memmove>:
 8007334:	b510      	push	{r4, lr}
 8007336:	4288      	cmp	r0, r1
 8007338:	d902      	bls.n	8007340 <memmove+0xc>
 800733a:	188b      	adds	r3, r1, r2
 800733c:	4298      	cmp	r0, r3
 800733e:	d303      	bcc.n	8007348 <memmove+0x14>
 8007340:	2300      	movs	r3, #0
 8007342:	e007      	b.n	8007354 <memmove+0x20>
 8007344:	5c8b      	ldrb	r3, [r1, r2]
 8007346:	5483      	strb	r3, [r0, r2]
 8007348:	3a01      	subs	r2, #1
 800734a:	d2fb      	bcs.n	8007344 <memmove+0x10>
 800734c:	bd10      	pop	{r4, pc}
 800734e:	5ccc      	ldrb	r4, [r1, r3]
 8007350:	54c4      	strb	r4, [r0, r3]
 8007352:	3301      	adds	r3, #1
 8007354:	429a      	cmp	r2, r3
 8007356:	d1fa      	bne.n	800734e <memmove+0x1a>
 8007358:	e7f8      	b.n	800734c <memmove+0x18>
	...

0800735c <_sbrk_r>:
 800735c:	2300      	movs	r3, #0
 800735e:	b570      	push	{r4, r5, r6, lr}
 8007360:	4d06      	ldr	r5, [pc, #24]	; (800737c <_sbrk_r+0x20>)
 8007362:	0004      	movs	r4, r0
 8007364:	0008      	movs	r0, r1
 8007366:	602b      	str	r3, [r5, #0]
 8007368:	f7fb f9ee 	bl	8002748 <_sbrk>
 800736c:	1c43      	adds	r3, r0, #1
 800736e:	d103      	bne.n	8007378 <_sbrk_r+0x1c>
 8007370:	682b      	ldr	r3, [r5, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d000      	beq.n	8007378 <_sbrk_r+0x1c>
 8007376:	6023      	str	r3, [r4, #0]
 8007378:	bd70      	pop	{r4, r5, r6, pc}
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	20000398 	.word	0x20000398

08007380 <memchr>:
 8007380:	b2c9      	uxtb	r1, r1
 8007382:	1882      	adds	r2, r0, r2
 8007384:	4290      	cmp	r0, r2
 8007386:	d101      	bne.n	800738c <memchr+0xc>
 8007388:	2000      	movs	r0, #0
 800738a:	4770      	bx	lr
 800738c:	7803      	ldrb	r3, [r0, #0]
 800738e:	428b      	cmp	r3, r1
 8007390:	d0fb      	beq.n	800738a <memchr+0xa>
 8007392:	3001      	adds	r0, #1
 8007394:	e7f6      	b.n	8007384 <memchr+0x4>

08007396 <memcpy>:
 8007396:	2300      	movs	r3, #0
 8007398:	b510      	push	{r4, lr}
 800739a:	429a      	cmp	r2, r3
 800739c:	d100      	bne.n	80073a0 <memcpy+0xa>
 800739e:	bd10      	pop	{r4, pc}
 80073a0:	5ccc      	ldrb	r4, [r1, r3]
 80073a2:	54c4      	strb	r4, [r0, r3]
 80073a4:	3301      	adds	r3, #1
 80073a6:	e7f8      	b.n	800739a <memcpy+0x4>

080073a8 <_realloc_r>:
 80073a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073aa:	0007      	movs	r7, r0
 80073ac:	000e      	movs	r6, r1
 80073ae:	0014      	movs	r4, r2
 80073b0:	2900      	cmp	r1, #0
 80073b2:	d105      	bne.n	80073c0 <_realloc_r+0x18>
 80073b4:	0011      	movs	r1, r2
 80073b6:	f7ff fc49 	bl	8006c4c <_malloc_r>
 80073ba:	0005      	movs	r5, r0
 80073bc:	0028      	movs	r0, r5
 80073be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80073c0:	2a00      	cmp	r2, #0
 80073c2:	d103      	bne.n	80073cc <_realloc_r+0x24>
 80073c4:	f7ff fbd6 	bl	8006b74 <_free_r>
 80073c8:	0025      	movs	r5, r4
 80073ca:	e7f7      	b.n	80073bc <_realloc_r+0x14>
 80073cc:	f000 f81b 	bl	8007406 <_malloc_usable_size_r>
 80073d0:	9001      	str	r0, [sp, #4]
 80073d2:	4284      	cmp	r4, r0
 80073d4:	d803      	bhi.n	80073de <_realloc_r+0x36>
 80073d6:	0035      	movs	r5, r6
 80073d8:	0843      	lsrs	r3, r0, #1
 80073da:	42a3      	cmp	r3, r4
 80073dc:	d3ee      	bcc.n	80073bc <_realloc_r+0x14>
 80073de:	0021      	movs	r1, r4
 80073e0:	0038      	movs	r0, r7
 80073e2:	f7ff fc33 	bl	8006c4c <_malloc_r>
 80073e6:	1e05      	subs	r5, r0, #0
 80073e8:	d0e8      	beq.n	80073bc <_realloc_r+0x14>
 80073ea:	9b01      	ldr	r3, [sp, #4]
 80073ec:	0022      	movs	r2, r4
 80073ee:	429c      	cmp	r4, r3
 80073f0:	d900      	bls.n	80073f4 <_realloc_r+0x4c>
 80073f2:	001a      	movs	r2, r3
 80073f4:	0031      	movs	r1, r6
 80073f6:	0028      	movs	r0, r5
 80073f8:	f7ff ffcd 	bl	8007396 <memcpy>
 80073fc:	0031      	movs	r1, r6
 80073fe:	0038      	movs	r0, r7
 8007400:	f7ff fbb8 	bl	8006b74 <_free_r>
 8007404:	e7da      	b.n	80073bc <_realloc_r+0x14>

08007406 <_malloc_usable_size_r>:
 8007406:	1f0b      	subs	r3, r1, #4
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	1f18      	subs	r0, r3, #4
 800740c:	2b00      	cmp	r3, #0
 800740e:	da01      	bge.n	8007414 <_malloc_usable_size_r+0xe>
 8007410:	580b      	ldr	r3, [r1, r0]
 8007412:	18c0      	adds	r0, r0, r3
 8007414:	4770      	bx	lr
	...

08007418 <_init>:
 8007418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741a:	46c0      	nop			; (mov r8, r8)
 800741c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741e:	bc08      	pop	{r3}
 8007420:	469e      	mov	lr, r3
 8007422:	4770      	bx	lr

08007424 <_fini>:
 8007424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007426:	46c0      	nop			; (mov r8, r8)
 8007428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742a:	bc08      	pop	{r3}
 800742c:	469e      	mov	lr, r3
 800742e:	4770      	bx	lr
